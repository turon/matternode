// AUTO-GENERATED by zap

// NOTE: This implementation generates a boiler plate starting point for cluster implementations.
// The actual implementations are manually written currently.

/**
 * Copyright 2022 Project CHIP Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  https://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{#all_user_clusters}}
/**
 * Cluster{{asUpperCamelCase name}}
 */
class Cluster{{asUpperCamelCase name}}
{
    static CLUSTER_NAME = '{{define}}'
    static CLUSTER_ID = {{asHex code 4}}

    static Command = {
{{#zcl_commands}}
        {{asUpperCamelCase name}}: {{code}},
{{/zcl_commands}}
    }
}

/**
 * Cluster{{asUpperCamelCase name}}{{asUpperCamelCase side}}
 */
class Cluster{{asUpperCamelCase name}}{{asUpperCamelCase side}}
{
    static Attribute = {
{{#zcl_attributes_server}}
        {{asUpperCamelCase name}}: {{code}},
{{/zcl_attributes_server}}
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
{{#zcl_commands}}
    static SchemaCommand{{asUpperCamelCase name}} = TlvObject({
    {{#zcl_command_arguments}}
  {{#if isArray}}
        {{asLowerCamelCase label}}: TlvField({{index}},Tlv{{asUnderlyingZclType type}}),
  {{else}}
    {{#if_is_struct type}}
        {{asLowerCamelCase label}}: TlvField({{index}},Tlv{{asUnderlyingZclType type}}),
    {{else}}
        {{asLowerCamelCase label}}: TlvField({{index}},Tlv{{asUnderlyingZclType type}}),
    {{/if_is_struct}}
  {{/if}}
    {{/zcl_command_arguments}}
    })

    static TemplateCommand{{asUpperCamelCase name}} = function(params) {
        return [
  {{#zcl_command_arguments}}
  {{#if isArray}}
          { 'tag': {{index}}, 'type': 'array', 'value': [] }, // params.{{asUpperCamelCase label}}
  {{else}}
    {{#if_is_struct type}}
          { 'tag': {{index}}, 'type': 'struct', 'value': [] }, // params.{{asUpperCamelCase label}}
    {{else}}
          { 'tag': {{index}}, 'type': '{{asUnderlyingZclType type}}', 'value': params.{{asUpperCamelCase label}} },
    {{/if_is_struct}}
  {{/if}}
{{/zcl_command_arguments}}
        ]
    }

    static MapCommand{{asUpperCamelCase name}} = new Map([
  {{#zcl_command_arguments}}
        [{{index}}, '{{asLowerCamelCase label}}'],
  {{/zcl_command_arguments}}
    ])

{{/zcl_commands}}

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
        {{#zcl_attributes_server}}
            {{code}}: { // Cluster{{asUpperCamelCase parent.name}}{{asUpperCamelCase parent.side}}.Attribute.{{asUpperCamelCase name}}
                "name": "{{asUpperCamelCase name}}",
                "type": "{{type}}",
                "nullable": {{#if isNullable}}true{{else}}false{{/if}},
                "nosubscribe": {{#if isReportableAttribute}}false{{else}}true{{/if}},
                "readonly": {{#if isWritableAttribute}}false{{else}}true{{/if}},
            },
        {{/zcl_attributes_server}}
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
{{#zcl_commands}}
            case Cluster{{asUpperCamelCase parent.name}}.Command.{{asUpperCamelCase name}}: this.on{{asUpperCamelCase name}}(msg, path); break;
{{/zcl_commands}}
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
{{#zcl_commands}}
    on{{asUpperCamelCase name}}(msg, commandPath)
    {
        console.log(this.constructor.name+".on{{asUpperCamelCase name}}")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

{{/zcl_commands}}
}

{{/all_user_clusters}}

module.exports = {
{{#all_user_clusters}}
    Cluster{{asUpperCamelCase name}}{{asUpperCamelCase side}},
{{/all_user_clusters}}
}
