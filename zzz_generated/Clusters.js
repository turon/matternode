// AUTO-GENERATED by zap

// NOTE: This implementation generates a boiler plate starting point for cluster implementations.
// The actual implementations are manually written currently.

/**
 * Copyright 2022 Project CHIP Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  https://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ClusterIdentify
 */
class ClusterIdentify
{
    static CLUSTER_NAME = 'IDENTIFY_CLUSTER'
    static CLUSTER_ID = 0x0003

    static Command = {
        Identify: 0,
        TriggerEffect: 64,
    }
}

/**
 * ClusterIdentifyServer
 */
class ClusterIdentifyServer
{
    static Attribute = {
        IdentifyTime: 0,
        IdentifyType: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandIdentify = TlvObject({
        identifyTime: TlvField(0,TlvUInt16),
    })

    static TemplateCommandIdentify = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.IdentifyTime },
        ]
    }

    static MapCommandIdentify = new Map([
        [0, 'identifyTime'],
    ])

    static SchemaCommandTriggerEffect = TlvObject({
        effectIdentifier: TlvField(0,TlvUInt8),
        effectVariant: TlvField(1,TlvUInt8),
    })

    static TemplateCommandTriggerEffect = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.EffectIdentifier },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.EffectVariant },
        ]
    }

    static MapCommandTriggerEffect = new Map([
        [0, 'effectIdentifier'],
        [1, 'effectVariant'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterIdentifyServer.Attribute.IdentifyTime
                "name": "IdentifyTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterIdentifyServer.Attribute.IdentifyType
                "name": "IdentifyType",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterIdentifyServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterIdentifyServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterIdentifyServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterIdentifyServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterIdentifyServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterIdentify.Command.Identify: this.onIdentify(msg, path); break;
            case ClusterIdentify.Command.TriggerEffect: this.onTriggerEffect(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onIdentify(msg, commandPath)
    {
        console.log(this.constructor.name+".onIdentify")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTriggerEffect(msg, commandPath)
    {
        console.log(this.constructor.name+".onTriggerEffect")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterGroups
 */
class ClusterGroups
{
    static CLUSTER_NAME = 'GROUPS_CLUSTER'
    static CLUSTER_ID = 0x0004

    static Command = {
        AddGroup: 0,
        AddGroupResponse: 0,
        ViewGroup: 1,
        ViewGroupResponse: 1,
        GetGroupMembership: 2,
        GetGroupMembershipResponse: 2,
        RemoveGroup: 3,
        RemoveGroupResponse: 3,
        RemoveAllGroups: 4,
        AddGroupIfIdentifying: 5,
    }
}

/**
 * ClusterGroupsServer
 */
class ClusterGroupsServer
{
    static Attribute = {
        NameSupport: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandAddGroup = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        groupName: TlvField(1,TlvString),
    })

    static TemplateCommandAddGroup = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.GroupName },
        ]
    }

    static MapCommandAddGroup = new Map([
        [0, 'groupId'],
        [1, 'groupName'],
    ])

    static SchemaCommandAddGroupResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
    })

    static TemplateCommandAddGroupResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandAddGroupResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
    ])

    static SchemaCommandViewGroup = TlvObject({
        groupId: TlvField(0,TlvUInt16),
    })

    static TemplateCommandViewGroup = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandViewGroup = new Map([
        [0, 'groupId'],
    ])

    static SchemaCommandViewGroupResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        groupName: TlvField(2,TlvString),
    })

    static TemplateCommandViewGroupResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'chip::CharSpan', 'value': params.GroupName },
        ]
    }

    static MapCommandViewGroupResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'groupName'],
    ])

    static SchemaCommandGetGroupMembership = TlvObject({
        groupList: TlvField(0,TlvArray),
    })

    static TemplateCommandGetGroupMembership = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.GroupList
        ]
    }

    static MapCommandGetGroupMembership = new Map([
        [0, 'groupList'],
    ])

    static SchemaCommandGetGroupMembershipResponse = TlvObject({
        capacity: TlvField(0,TlvUInt8),
        groupList: TlvField(1,TlvArray),
    })

    static TemplateCommandGetGroupMembershipResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Capacity },
          { 'tag': 1, 'type': 'array', 'value': [] }, // params.GroupList
        ]
    }

    static MapCommandGetGroupMembershipResponse = new Map([
        [0, 'capacity'],
        [1, 'groupList'],
    ])

    static SchemaCommandRemoveGroup = TlvObject({
        groupId: TlvField(0,TlvUInt16),
    })

    static TemplateCommandRemoveGroup = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandRemoveGroup = new Map([
        [0, 'groupId'],
    ])

    static SchemaCommandRemoveGroupResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
    })

    static TemplateCommandRemoveGroupResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandRemoveGroupResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
    ])

    static SchemaCommandRemoveAllGroups = TlvObject({
    })

    static TemplateCommandRemoveAllGroups = function(params) {
        return [
        ]
    }

    static MapCommandRemoveAllGroups = new Map([
    ])

    static SchemaCommandAddGroupIfIdentifying = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        groupName: TlvField(1,TlvString),
    })

    static TemplateCommandAddGroupIfIdentifying = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.GroupName },
        ]
    }

    static MapCommandAddGroupIfIdentifying = new Map([
        [0, 'groupId'],
        [1, 'groupName'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterGroupsServer.Attribute.NameSupport
                "name": "NameSupport",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterGroupsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterGroupsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterGroupsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterGroupsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterGroupsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterGroups.Command.AddGroup: this.onAddGroup(msg, path); break;
            case ClusterGroups.Command.AddGroupResponse: this.onAddGroupResponse(msg, path); break;
            case ClusterGroups.Command.ViewGroup: this.onViewGroup(msg, path); break;
            case ClusterGroups.Command.ViewGroupResponse: this.onViewGroupResponse(msg, path); break;
            case ClusterGroups.Command.GetGroupMembership: this.onGetGroupMembership(msg, path); break;
            case ClusterGroups.Command.GetGroupMembershipResponse: this.onGetGroupMembershipResponse(msg, path); break;
            case ClusterGroups.Command.RemoveGroup: this.onRemoveGroup(msg, path); break;
            case ClusterGroups.Command.RemoveGroupResponse: this.onRemoveGroupResponse(msg, path); break;
            case ClusterGroups.Command.RemoveAllGroups: this.onRemoveAllGroups(msg, path); break;
            case ClusterGroups.Command.AddGroupIfIdentifying: this.onAddGroupIfIdentifying(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onAddGroup(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddGroup")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddGroupResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddGroupResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onViewGroup(msg, commandPath)
    {
        console.log(this.constructor.name+".onViewGroup")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onViewGroupResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onViewGroupResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetGroupMembership(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetGroupMembership")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetGroupMembershipResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetGroupMembershipResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveGroup(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveGroup")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveGroupResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveGroupResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveAllGroups(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveAllGroups")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddGroupIfIdentifying(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddGroupIfIdentifying")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterScenes
 */
class ClusterScenes
{
    static CLUSTER_NAME = 'SCENES_CLUSTER'
    static CLUSTER_ID = 0x0005

    static Command = {
        AddScene: 0,
        AddSceneResponse: 0,
        ViewScene: 1,
        ViewSceneResponse: 1,
        RemoveScene: 2,
        RemoveSceneResponse: 2,
        RemoveAllScenes: 3,
        RemoveAllScenesResponse: 3,
        StoreScene: 4,
        StoreSceneResponse: 4,
        RecallScene: 5,
        GetSceneMembership: 6,
        GetSceneMembershipResponse: 6,
        EnhancedAddScene: 64,
        EnhancedAddSceneResponse: 64,
        EnhancedViewScene: 65,
        EnhancedViewSceneResponse: 65,
        CopyScene: 66,
        CopySceneResponse: 66,
    }
}

/**
 * ClusterScenesServer
 */
class ClusterScenesServer
{
    static Attribute = {
        SceneCount: 0,
        CurrentScene: 1,
        CurrentGroup: 2,
        SceneValid: 3,
        NameSupport: 4,
        LastConfiguredBy: 5,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandAddScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        sceneName: TlvField(3,TlvString),
        extensionFieldSets: TlvField(4,TlvArray),
    })

    static TemplateCommandAddScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'chip::CharSpan', 'value': params.SceneName },
          { 'tag': 4, 'type': 'array', 'value': [] }, // params.ExtensionFieldSets
        ]
    }

    static MapCommandAddScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
        [2, 'transitionTime'],
        [3, 'sceneName'],
        [4, 'extensionFieldSets'],
    ])

    static SchemaCommandAddSceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        sceneId: TlvField(2,TlvUInt8),
    })

    static TemplateCommandAddSceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandAddSceneResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'sceneId'],
    ])

    static SchemaCommandViewScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
    })

    static TemplateCommandViewScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandViewScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
    ])

    static SchemaCommandViewSceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        sceneId: TlvField(2,TlvUInt8),
        transitionTime: TlvField(3,TlvUInt16),
        sceneName: TlvField(4,TlvString),
        extensionFieldSets: TlvField(5,TlvArray),
    })

    static TemplateCommandViewSceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneId },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 4, 'type': 'chip::CharSpan', 'value': params.SceneName },
          { 'tag': 5, 'type': 'array', 'value': [] }, // params.ExtensionFieldSets
        ]
    }

    static MapCommandViewSceneResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'sceneId'],
        [3, 'transitionTime'],
        [4, 'sceneName'],
        [5, 'extensionFieldSets'],
    ])

    static SchemaCommandRemoveScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
    })

    static TemplateCommandRemoveScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandRemoveScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
    ])

    static SchemaCommandRemoveSceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        sceneId: TlvField(2,TlvUInt8),
    })

    static TemplateCommandRemoveSceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandRemoveSceneResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'sceneId'],
    ])

    static SchemaCommandRemoveAllScenes = TlvObject({
        groupId: TlvField(0,TlvUInt16),
    })

    static TemplateCommandRemoveAllScenes = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandRemoveAllScenes = new Map([
        [0, 'groupId'],
    ])

    static SchemaCommandRemoveAllScenesResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
    })

    static TemplateCommandRemoveAllScenesResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandRemoveAllScenesResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
    ])

    static SchemaCommandStoreScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
    })

    static TemplateCommandStoreScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandStoreScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
    ])

    static SchemaCommandStoreSceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        sceneId: TlvField(2,TlvUInt8),
    })

    static TemplateCommandStoreSceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandStoreSceneResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'sceneId'],
    ])

    static SchemaCommandRecallScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
    })

    static TemplateCommandRecallScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
        ]
    }

    static MapCommandRecallScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
        [2, 'transitionTime'],
    ])

    static SchemaCommandGetSceneMembership = TlvObject({
        groupId: TlvField(0,TlvUInt16),
    })

    static TemplateCommandGetSceneMembership = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
        ]
    }

    static MapCommandGetSceneMembership = new Map([
        [0, 'groupId'],
    ])

    static SchemaCommandGetSceneMembershipResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        capacity: TlvField(1,TlvUInt8),
        groupId: TlvField(2,TlvUInt16),
        sceneList: TlvField(3,TlvArray),
    })

    static TemplateCommandGetSceneMembershipResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Capacity },
          { 'tag': 2, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.SceneList
        ]
    }

    static MapCommandGetSceneMembershipResponse = new Map([
        [0, 'status'],
        [1, 'capacity'],
        [2, 'groupId'],
        [3, 'sceneList'],
    ])

    static SchemaCommandEnhancedAddScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        sceneName: TlvField(3,TlvString),
        extensionFieldSets: TlvField(4,TlvArray),
    })

    static TemplateCommandEnhancedAddScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'chip::CharSpan', 'value': params.SceneName },
          { 'tag': 4, 'type': 'array', 'value': [] }, // params.ExtensionFieldSets
        ]
    }

    static MapCommandEnhancedAddScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
        [2, 'transitionTime'],
        [3, 'sceneName'],
        [4, 'extensionFieldSets'],
    ])

    static SchemaCommandEnhancedAddSceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        sceneId: TlvField(2,TlvUInt8),
    })

    static TemplateCommandEnhancedAddSceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandEnhancedAddSceneResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'sceneId'],
    ])

    static SchemaCommandEnhancedViewScene = TlvObject({
        groupId: TlvField(0,TlvUInt16),
        sceneId: TlvField(1,TlvUInt8),
    })

    static TemplateCommandEnhancedViewScene = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.SceneId },
        ]
    }

    static MapCommandEnhancedViewScene = new Map([
        [0, 'groupId'],
        [1, 'sceneId'],
    ])

    static SchemaCommandEnhancedViewSceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupId: TlvField(1,TlvUInt16),
        sceneId: TlvField(2,TlvUInt8),
        transitionTime: TlvField(3,TlvUInt16),
        sceneName: TlvField(4,TlvString),
        extensionFieldSets: TlvField(5,TlvArray),
    })

    static TemplateCommandEnhancedViewSceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneId },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 4, 'type': 'chip::CharSpan', 'value': params.SceneName },
          { 'tag': 5, 'type': 'array', 'value': [] }, // params.ExtensionFieldSets
        ]
    }

    static MapCommandEnhancedViewSceneResponse = new Map([
        [0, 'status'],
        [1, 'groupId'],
        [2, 'sceneId'],
        [3, 'transitionTime'],
        [4, 'sceneName'],
        [5, 'extensionFieldSets'],
    ])

    static SchemaCommandCopyScene = TlvObject({
        mode: TlvField(0,TlvUInt8),
        groupIdFrom: TlvField(1,TlvUInt16),
        sceneIdFrom: TlvField(2,TlvUInt8),
        groupIdTo: TlvField(3,TlvUInt16),
        sceneIdTo: TlvField(4,TlvUInt8),
    })

    static TemplateCommandCopyScene = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Mode },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupIdFrom },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneIdFrom },
          { 'tag': 3, 'type': 'chip::GroupId', 'value': params.GroupIdTo },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.SceneIdTo },
        ]
    }

    static MapCommandCopyScene = new Map([
        [0, 'mode'],
        [1, 'groupIdFrom'],
        [2, 'sceneIdFrom'],
        [3, 'groupIdTo'],
        [4, 'sceneIdTo'],
    ])

    static SchemaCommandCopySceneResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        groupIdFrom: TlvField(1,TlvUInt16),
        sceneIdFrom: TlvField(2,TlvUInt8),
    })

    static TemplateCommandCopySceneResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::GroupId', 'value': params.GroupIdFrom },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.SceneIdFrom },
        ]
    }

    static MapCommandCopySceneResponse = new Map([
        [0, 'status'],
        [1, 'groupIdFrom'],
        [2, 'sceneIdFrom'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterScenesServer.Attribute.SceneCount
                "name": "SceneCount",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterScenesServer.Attribute.CurrentScene
                "name": "CurrentScene",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterScenesServer.Attribute.CurrentGroup
                "name": "CurrentGroup",
                "type": "group_id",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterScenesServer.Attribute.SceneValid
                "name": "SceneValid",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterScenesServer.Attribute.NameSupport
                "name": "NameSupport",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterScenesServer.Attribute.LastConfiguredBy
                "name": "LastConfiguredBy",
                "type": "node_id",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterScenesServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterScenesServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterScenesServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterScenesServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterScenesServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterScenes.Command.AddScene: this.onAddScene(msg, path); break;
            case ClusterScenes.Command.AddSceneResponse: this.onAddSceneResponse(msg, path); break;
            case ClusterScenes.Command.ViewScene: this.onViewScene(msg, path); break;
            case ClusterScenes.Command.ViewSceneResponse: this.onViewSceneResponse(msg, path); break;
            case ClusterScenes.Command.RemoveScene: this.onRemoveScene(msg, path); break;
            case ClusterScenes.Command.RemoveSceneResponse: this.onRemoveSceneResponse(msg, path); break;
            case ClusterScenes.Command.RemoveAllScenes: this.onRemoveAllScenes(msg, path); break;
            case ClusterScenes.Command.RemoveAllScenesResponse: this.onRemoveAllScenesResponse(msg, path); break;
            case ClusterScenes.Command.StoreScene: this.onStoreScene(msg, path); break;
            case ClusterScenes.Command.StoreSceneResponse: this.onStoreSceneResponse(msg, path); break;
            case ClusterScenes.Command.RecallScene: this.onRecallScene(msg, path); break;
            case ClusterScenes.Command.GetSceneMembership: this.onGetSceneMembership(msg, path); break;
            case ClusterScenes.Command.GetSceneMembershipResponse: this.onGetSceneMembershipResponse(msg, path); break;
            case ClusterScenes.Command.EnhancedAddScene: this.onEnhancedAddScene(msg, path); break;
            case ClusterScenes.Command.EnhancedAddSceneResponse: this.onEnhancedAddSceneResponse(msg, path); break;
            case ClusterScenes.Command.EnhancedViewScene: this.onEnhancedViewScene(msg, path); break;
            case ClusterScenes.Command.EnhancedViewSceneResponse: this.onEnhancedViewSceneResponse(msg, path); break;
            case ClusterScenes.Command.CopyScene: this.onCopyScene(msg, path); break;
            case ClusterScenes.Command.CopySceneResponse: this.onCopySceneResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onAddScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddSceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddSceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onViewScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onViewScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onViewSceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onViewSceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveSceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveSceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveAllScenes(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveAllScenes")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveAllScenesResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveAllScenesResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStoreScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onStoreScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStoreSceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onStoreSceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRecallScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onRecallScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetSceneMembership(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetSceneMembership")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetSceneMembershipResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetSceneMembershipResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedAddScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedAddScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedAddSceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedAddSceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedViewScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedViewScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedViewSceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedViewSceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCopyScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onCopyScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCopySceneResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onCopySceneResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterOnOff
 */
class ClusterOnOff
{
    static CLUSTER_NAME = 'ON_OFF_CLUSTER'
    static CLUSTER_ID = 0x0006

    static Command = {
        Off: 0,
        On: 1,
        Toggle: 2,
        OffWithEffect: 64,
        OnWithRecallGlobalScene: 65,
        OnWithTimedOff: 66,
    }
}

/**
 * ClusterOnOffServer
 */
class ClusterOnOffServer
{
    static Attribute = {
        OnOff: 0,
        GlobalSceneControl: 16384,
        OnTime: 16385,
        OffWaitTime: 16386,
        StartUpOnOff: 16387,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandOff = TlvObject({
    })

    static TemplateCommandOff = function(params) {
        return [
        ]
    }

    static MapCommandOff = new Map([
    ])

    static SchemaCommandOn = TlvObject({
    })

    static TemplateCommandOn = function(params) {
        return [
        ]
    }

    static MapCommandOn = new Map([
    ])

    static SchemaCommandToggle = TlvObject({
    })

    static TemplateCommandToggle = function(params) {
        return [
        ]
    }

    static MapCommandToggle = new Map([
    ])

    static SchemaCommandOffWithEffect = TlvObject({
        effectId: TlvField(0,TlvUInt8),
        effectVariant: TlvField(1,TlvUInt8),
    })

    static TemplateCommandOffWithEffect = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.EffectId },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.EffectVariant },
        ]
    }

    static MapCommandOffWithEffect = new Map([
        [0, 'effectId'],
        [1, 'effectVariant'],
    ])

    static SchemaCommandOnWithRecallGlobalScene = TlvObject({
    })

    static TemplateCommandOnWithRecallGlobalScene = function(params) {
        return [
        ]
    }

    static MapCommandOnWithRecallGlobalScene = new Map([
    ])

    static SchemaCommandOnWithTimedOff = TlvObject({
        onOffControl: TlvField(0,TlvUInt8),
        onTime: TlvField(1,TlvUInt16),
        offWaitTime: TlvField(2,TlvUInt16),
    })

    static TemplateCommandOnWithTimedOff = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.OnOffControl },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.OnTime },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.OffWaitTime },
        ]
    }

    static MapCommandOnWithTimedOff = new Map([
        [0, 'onOffControl'],
        [1, 'onTime'],
        [2, 'offWaitTime'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterOnOffServer.Attribute.OnOff
                "name": "OnOff",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16384: { // ClusterOnOffServer.Attribute.GlobalSceneControl
                "name": "GlobalSceneControl",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16385: { // ClusterOnOffServer.Attribute.OnTime
                "name": "OnTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16386: { // ClusterOnOffServer.Attribute.OffWaitTime
                "name": "OffWaitTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16387: { // ClusterOnOffServer.Attribute.StartUpOnOff
                "name": "StartUpOnOff",
                "type": "OnOffStartUpOnOff",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterOnOffServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterOnOffServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterOnOffServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterOnOffServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterOnOffServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterOnOff.Command.Off: this.onOff(msg, path); break;
            case ClusterOnOff.Command.On: this.onOn(msg, path); break;
            case ClusterOnOff.Command.Toggle: this.onToggle(msg, path); break;
            case ClusterOnOff.Command.OffWithEffect: this.onOffWithEffect(msg, path); break;
            case ClusterOnOff.Command.OnWithRecallGlobalScene: this.onOnWithRecallGlobalScene(msg, path); break;
            case ClusterOnOff.Command.OnWithTimedOff: this.onOnWithTimedOff(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onOff(msg, commandPath)
    {
        console.log(this.constructor.name+".onOff")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onOn(msg, commandPath)
    {
        console.log(this.constructor.name+".onOn")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onToggle(msg, commandPath)
    {
        console.log(this.constructor.name+".onToggle")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onOffWithEffect(msg, commandPath)
    {
        console.log(this.constructor.name+".onOffWithEffect")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onOnWithRecallGlobalScene(msg, commandPath)
    {
        console.log(this.constructor.name+".onOnWithRecallGlobalScene")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onOnWithTimedOff(msg, commandPath)
    {
        console.log(this.constructor.name+".onOnWithTimedOff")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterOnOffSwitchConfiguration
 */
class ClusterOnOffSwitchConfiguration
{
    static CLUSTER_NAME = 'ON_OFF_SWITCH_CONFIGURATION_CLUSTER'
    static CLUSTER_ID = 0x0007

    static Command = {
    }
}

/**
 * ClusterOnOffSwitchConfigurationServer
 */
class ClusterOnOffSwitchConfigurationServer
{
    static Attribute = {
        SwitchType: 0,
        SwitchActions: 16,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterOnOffSwitchConfigurationServer.Attribute.SwitchType
                "name": "SwitchType",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterOnOffSwitchConfigurationServer.Attribute.SwitchActions
                "name": "SwitchActions",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterOnOffSwitchConfigurationServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterOnOffSwitchConfigurationServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterOnOffSwitchConfigurationServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterOnOffSwitchConfigurationServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterOnOffSwitchConfigurationServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterLevelControl
 */
class ClusterLevelControl
{
    static CLUSTER_NAME = 'LEVEL_CONTROL_CLUSTER'
    static CLUSTER_ID = 0x0008

    static Command = {
        MoveToLevel: 0,
        Move: 1,
        Step: 2,
        Stop: 3,
        MoveToLevelWithOnOff: 4,
        MoveWithOnOff: 5,
        StepWithOnOff: 6,
        StopWithOnOff: 7,
        MoveToClosestFrequency: 8,
    }
}

/**
 * ClusterLevelControlServer
 */
class ClusterLevelControlServer
{
    static Attribute = {
        CurrentLevel: 0,
        RemainingTime: 1,
        MinLevel: 2,
        MaxLevel: 3,
        CurrentFrequency: 4,
        MinFrequency: 5,
        MaxFrequency: 6,
        Options: 15,
        OnOffTransitionTime: 16,
        OnLevel: 17,
        OnTransitionTime: 18,
        OffTransitionTime: 19,
        DefaultMoveRate: 20,
        StartUpCurrentLevel: 16384,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandMoveToLevel = TlvObject({
        level: TlvField(0,TlvUInt8),
        transitionTime: TlvField(1,TlvUInt16),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveToLevel = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Level },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToLevel = new Map([
        [0, 'level'],
        [1, 'transitionTime'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandMove = TlvObject({
        moveMode: TlvField(0,TlvUInt8),
        rate: TlvField(1,TlvUInt8),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMove = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.MoveMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Rate },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMove = new Map([
        [0, 'moveMode'],
        [1, 'rate'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandStep = TlvObject({
        stepMode: TlvField(0,TlvUInt8),
        stepSize: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandStep = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StepMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.StepSize },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStep = new Map([
        [0, 'stepMode'],
        [1, 'stepSize'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandStop = TlvObject({
        optionsMask: TlvField(0,TlvUInt8),
        optionsOverride: TlvField(1,TlvUInt8),
    })

    static TemplateCommandStop = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStop = new Map([
        [0, 'optionsMask'],
        [1, 'optionsOverride'],
    ])

    static SchemaCommandMoveToLevelWithOnOff = TlvObject({
        level: TlvField(0,TlvUInt8),
        transitionTime: TlvField(1,TlvUInt16),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveToLevelWithOnOff = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Level },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToLevelWithOnOff = new Map([
        [0, 'level'],
        [1, 'transitionTime'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandMoveWithOnOff = TlvObject({
        moveMode: TlvField(0,TlvUInt8),
        rate: TlvField(1,TlvUInt8),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveWithOnOff = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.MoveMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Rate },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveWithOnOff = new Map([
        [0, 'moveMode'],
        [1, 'rate'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandStepWithOnOff = TlvObject({
        stepMode: TlvField(0,TlvUInt8),
        stepSize: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandStepWithOnOff = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StepMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.StepSize },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStepWithOnOff = new Map([
        [0, 'stepMode'],
        [1, 'stepSize'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandStopWithOnOff = TlvObject({
        optionsMask: TlvField(0,TlvUInt8),
        optionsOverride: TlvField(1,TlvUInt8),
    })

    static TemplateCommandStopWithOnOff = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStopWithOnOff = new Map([
        [0, 'optionsMask'],
        [1, 'optionsOverride'],
    ])

    static SchemaCommandMoveToClosestFrequency = TlvObject({
        frequency: TlvField(0,TlvUInt16),
    })

    static TemplateCommandMoveToClosestFrequency = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.Frequency },
        ]
    }

    static MapCommandMoveToClosestFrequency = new Map([
        [0, 'frequency'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterLevelControlServer.Attribute.CurrentLevel
                "name": "CurrentLevel",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterLevelControlServer.Attribute.RemainingTime
                "name": "RemainingTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterLevelControlServer.Attribute.MinLevel
                "name": "MinLevel",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterLevelControlServer.Attribute.MaxLevel
                "name": "MaxLevel",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterLevelControlServer.Attribute.CurrentFrequency
                "name": "CurrentFrequency",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterLevelControlServer.Attribute.MinFrequency
                "name": "MinFrequency",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterLevelControlServer.Attribute.MaxFrequency
                "name": "MaxFrequency",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterLevelControlServer.Attribute.Options
                "name": "Options",
                "type": "LevelControlOptions",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterLevelControlServer.Attribute.OnOffTransitionTime
                "name": "OnOffTransitionTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterLevelControlServer.Attribute.OnLevel
                "name": "OnLevel",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterLevelControlServer.Attribute.OnTransitionTime
                "name": "OnTransitionTime",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterLevelControlServer.Attribute.OffTransitionTime
                "name": "OffTransitionTime",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterLevelControlServer.Attribute.DefaultMoveRate
                "name": "DefaultMoveRate",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16384: { // ClusterLevelControlServer.Attribute.StartUpCurrentLevel
                "name": "StartUpCurrentLevel",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterLevelControlServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterLevelControlServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterLevelControlServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterLevelControlServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterLevelControlServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterLevelControl.Command.MoveToLevel: this.onMoveToLevel(msg, path); break;
            case ClusterLevelControl.Command.Move: this.onMove(msg, path); break;
            case ClusterLevelControl.Command.Step: this.onStep(msg, path); break;
            case ClusterLevelControl.Command.Stop: this.onStop(msg, path); break;
            case ClusterLevelControl.Command.MoveToLevelWithOnOff: this.onMoveToLevelWithOnOff(msg, path); break;
            case ClusterLevelControl.Command.MoveWithOnOff: this.onMoveWithOnOff(msg, path); break;
            case ClusterLevelControl.Command.StepWithOnOff: this.onStepWithOnOff(msg, path); break;
            case ClusterLevelControl.Command.StopWithOnOff: this.onStopWithOnOff(msg, path); break;
            case ClusterLevelControl.Command.MoveToClosestFrequency: this.onMoveToClosestFrequency(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onMoveToLevel(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToLevel")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMove(msg, commandPath)
    {
        console.log(this.constructor.name+".onMove")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStep(msg, commandPath)
    {
        console.log(this.constructor.name+".onStep")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStop(msg, commandPath)
    {
        console.log(this.constructor.name+".onStop")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveToLevelWithOnOff(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToLevelWithOnOff")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveWithOnOff(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveWithOnOff")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStepWithOnOff(msg, commandPath)
    {
        console.log(this.constructor.name+".onStepWithOnOff")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStopWithOnOff(msg, commandPath)
    {
        console.log(this.constructor.name+".onStopWithOnOff")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveToClosestFrequency(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToClosestFrequency")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterBinaryInputBasic
 */
class ClusterBinaryInputBasic
{
    static CLUSTER_NAME = 'BINARY_INPUT_BASIC_CLUSTER'
    static CLUSTER_ID = 0x000F

    static Command = {
    }
}

/**
 * ClusterBinaryInputBasicServer
 */
class ClusterBinaryInputBasicServer
{
    static Attribute = {
        ActiveText: 4,
        Description: 28,
        InactiveText: 46,
        OutOfService: 81,
        Polarity: 84,
        PresentValue: 85,
        Reliability: 103,
        StatusFlags: 111,
        ApplicationType: 256,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            4: { // ClusterBinaryInputBasicServer.Attribute.ActiveText
                "name": "ActiveText",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            28: { // ClusterBinaryInputBasicServer.Attribute.Description
                "name": "Description",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            46: { // ClusterBinaryInputBasicServer.Attribute.InactiveText
                "name": "InactiveText",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            81: { // ClusterBinaryInputBasicServer.Attribute.OutOfService
                "name": "OutOfService",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            84: { // ClusterBinaryInputBasicServer.Attribute.Polarity
                "name": "Polarity",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            85: { // ClusterBinaryInputBasicServer.Attribute.PresentValue
                "name": "PresentValue",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            103: { // ClusterBinaryInputBasicServer.Attribute.Reliability
                "name": "Reliability",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            111: { // ClusterBinaryInputBasicServer.Attribute.StatusFlags
                "name": "StatusFlags",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            256: { // ClusterBinaryInputBasicServer.Attribute.ApplicationType
                "name": "ApplicationType",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterBinaryInputBasicServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterBinaryInputBasicServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterBinaryInputBasicServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterBinaryInputBasicServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterBinaryInputBasicServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterDescriptor
 */
class ClusterDescriptor
{
    static CLUSTER_NAME = 'DESCRIPTOR_CLUSTER'
    static CLUSTER_ID = 0x001D

    static Command = {
    }
}

/**
 * ClusterDescriptorServer
 */
class ClusterDescriptorServer
{
    static Attribute = {
        DeviceTypeList: 0,
        ServerList: 1,
        ClientList: 2,
        PartsList: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterDescriptorServer.Attribute.DeviceTypeList
                "name": "DeviceTypeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterDescriptorServer.Attribute.ServerList
                "name": "ServerList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterDescriptorServer.Attribute.ClientList
                "name": "ClientList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterDescriptorServer.Attribute.PartsList
                "name": "PartsList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterDescriptorServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterDescriptorServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterDescriptorServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterDescriptorServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterDescriptorServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterBinding
 */
class ClusterBinding
{
    static CLUSTER_NAME = 'BINDING_CLUSTER'
    static CLUSTER_ID = 0x001E

    static Command = {
    }
}

/**
 * ClusterBindingServer
 */
class ClusterBindingServer
{
    static Attribute = {
        Binding: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterBindingServer.Attribute.Binding
                "name": "Binding",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterBindingServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterBindingServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterBindingServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterBindingServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterBindingServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterAccessControl
 */
class ClusterAccessControl
{
    static CLUSTER_NAME = 'ACCESS_CONTROL_CLUSTER'
    static CLUSTER_ID = 0x001F

    static Command = {
    }
}

/**
 * ClusterAccessControlServer
 */
class ClusterAccessControlServer
{
    static Attribute = {
        Acl: 0,
        Extension: 1,
        SubjectsPerAccessControlEntry: 2,
        TargetsPerAccessControlEntry: 3,
        AccessControlEntriesPerFabric: 4,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterAccessControlServer.Attribute.Acl
                "name": "Acl",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterAccessControlServer.Attribute.Extension
                "name": "Extension",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterAccessControlServer.Attribute.SubjectsPerAccessControlEntry
                "name": "SubjectsPerAccessControlEntry",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterAccessControlServer.Attribute.TargetsPerAccessControlEntry
                "name": "TargetsPerAccessControlEntry",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterAccessControlServer.Attribute.AccessControlEntriesPerFabric
                "name": "AccessControlEntriesPerFabric",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterAccessControlServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterAccessControlServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterAccessControlServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterAccessControlServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterAccessControlServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterActions
 */
class ClusterActions
{
    static CLUSTER_NAME = 'ACTIONS_CLUSTER'
    static CLUSTER_ID = 0x0025

    static Command = {
        InstantAction: 0,
        InstantActionWithTransition: 1,
        StartAction: 2,
        StartActionWithDuration: 3,
        StopAction: 4,
        PauseAction: 5,
        PauseActionWithDuration: 6,
        ResumeAction: 7,
        EnableAction: 8,
        EnableActionWithDuration: 9,
        DisableAction: 10,
        DisableActionWithDuration: 11,
    }
}

/**
 * ClusterActionsServer
 */
class ClusterActionsServer
{
    static Attribute = {
        ActionList: 0,
        EndpointLists: 1,
        SetupURL: 2,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandInstantAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandInstantAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandInstantAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandInstantActionWithTransition = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
        transitionTime: TlvField(2,TlvUInt16),
    })

    static TemplateCommandInstantActionWithTransition = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
        ]
    }

    static MapCommandInstantActionWithTransition = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
        [2, 'transitionTime'],
    ])

    static SchemaCommandStartAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandStartAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandStartAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandStartActionWithDuration = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
        duration: TlvField(2,TlvUInt32),
    })

    static TemplateCommandStartActionWithDuration = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.Duration },
        ]
    }

    static MapCommandStartActionWithDuration = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
        [2, 'duration'],
    ])

    static SchemaCommandStopAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandStopAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandStopAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandPauseAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandPauseAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandPauseAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandPauseActionWithDuration = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
        duration: TlvField(2,TlvUInt32),
    })

    static TemplateCommandPauseActionWithDuration = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.Duration },
        ]
    }

    static MapCommandPauseActionWithDuration = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
        [2, 'duration'],
    ])

    static SchemaCommandResumeAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandResumeAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandResumeAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandEnableAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandEnableAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandEnableAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandEnableActionWithDuration = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
        duration: TlvField(2,TlvUInt32),
    })

    static TemplateCommandEnableActionWithDuration = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.Duration },
        ]
    }

    static MapCommandEnableActionWithDuration = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
        [2, 'duration'],
    ])

    static SchemaCommandDisableAction = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
    })

    static TemplateCommandDisableAction = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
        ]
    }

    static MapCommandDisableAction = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
    ])

    static SchemaCommandDisableActionWithDuration = TlvObject({
        actionID: TlvField(0,TlvUInt16),
        invokeID: TlvField(1,TlvUInt32),
        duration: TlvField(2,TlvUInt32),
    })

    static TemplateCommandDisableActionWithDuration = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ActionID },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.InvokeID },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.Duration },
        ]
    }

    static MapCommandDisableActionWithDuration = new Map([
        [0, 'actionID'],
        [1, 'invokeID'],
        [2, 'duration'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterActionsServer.Attribute.ActionList
                "name": "ActionList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterActionsServer.Attribute.EndpointLists
                "name": "EndpointLists",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterActionsServer.Attribute.SetupURL
                "name": "SetupURL",
                "type": "long_char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterActionsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterActionsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterActionsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterActionsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterActionsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterActions.Command.InstantAction: this.onInstantAction(msg, path); break;
            case ClusterActions.Command.InstantActionWithTransition: this.onInstantActionWithTransition(msg, path); break;
            case ClusterActions.Command.StartAction: this.onStartAction(msg, path); break;
            case ClusterActions.Command.StartActionWithDuration: this.onStartActionWithDuration(msg, path); break;
            case ClusterActions.Command.StopAction: this.onStopAction(msg, path); break;
            case ClusterActions.Command.PauseAction: this.onPauseAction(msg, path); break;
            case ClusterActions.Command.PauseActionWithDuration: this.onPauseActionWithDuration(msg, path); break;
            case ClusterActions.Command.ResumeAction: this.onResumeAction(msg, path); break;
            case ClusterActions.Command.EnableAction: this.onEnableAction(msg, path); break;
            case ClusterActions.Command.EnableActionWithDuration: this.onEnableActionWithDuration(msg, path); break;
            case ClusterActions.Command.DisableAction: this.onDisableAction(msg, path); break;
            case ClusterActions.Command.DisableActionWithDuration: this.onDisableActionWithDuration(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onInstantAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onInstantAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onInstantActionWithTransition(msg, commandPath)
    {
        console.log(this.constructor.name+".onInstantActionWithTransition")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStartAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onStartAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStartActionWithDuration(msg, commandPath)
    {
        console.log(this.constructor.name+".onStartActionWithDuration")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStopAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onStopAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onPauseAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onPauseAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onPauseActionWithDuration(msg, commandPath)
    {
        console.log(this.constructor.name+".onPauseActionWithDuration")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onResumeAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onResumeAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnableAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnableAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnableActionWithDuration(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnableActionWithDuration")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onDisableAction(msg, commandPath)
    {
        console.log(this.constructor.name+".onDisableAction")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onDisableActionWithDuration(msg, commandPath)
    {
        console.log(this.constructor.name+".onDisableActionWithDuration")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterBasic
 */
class ClusterBasic
{
    static CLUSTER_NAME = 'BASIC_CLUSTER'
    static CLUSTER_ID = 0x0028

    static Command = {
        MfgSpecificPing: 0,
    }
}

/**
 * ClusterBasicServer
 */
class ClusterBasicServer
{
    static Attribute = {
        DataModelRevision: 0,
        VendorName: 1,
        VendorID: 2,
        ProductName: 3,
        ProductID: 4,
        NodeLabel: 5,
        Location: 6,
        HardwareVersion: 7,
        HardwareVersionString: 8,
        SoftwareVersion: 9,
        SoftwareVersionString: 10,
        ManufacturingDate: 11,
        PartNumber: 12,
        ProductURL: 13,
        ProductLabel: 14,
        SerialNumber: 15,
        LocalConfigDisabled: 16,
        Reachable: 17,
        UniqueID: 18,
        CapabilityMinima: 19,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandMfgSpecificPing = TlvObject({
    })

    static TemplateCommandMfgSpecificPing = function(params) {
        return [
        ]
    }

    static MapCommandMfgSpecificPing = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterBasicServer.Attribute.DataModelRevision
                "name": "DataModelRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterBasicServer.Attribute.VendorName
                "name": "VendorName",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterBasicServer.Attribute.VendorID
                "name": "VendorID",
                "type": "vendor_id",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterBasicServer.Attribute.ProductName
                "name": "ProductName",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterBasicServer.Attribute.ProductID
                "name": "ProductID",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterBasicServer.Attribute.NodeLabel
                "name": "NodeLabel",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterBasicServer.Attribute.Location
                "name": "Location",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterBasicServer.Attribute.HardwareVersion
                "name": "HardwareVersion",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterBasicServer.Attribute.HardwareVersionString
                "name": "HardwareVersionString",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterBasicServer.Attribute.SoftwareVersion
                "name": "SoftwareVersion",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterBasicServer.Attribute.SoftwareVersionString
                "name": "SoftwareVersionString",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterBasicServer.Attribute.ManufacturingDate
                "name": "ManufacturingDate",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterBasicServer.Attribute.PartNumber
                "name": "PartNumber",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            13: { // ClusterBasicServer.Attribute.ProductURL
                "name": "ProductURL",
                "type": "long_char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            14: { // ClusterBasicServer.Attribute.ProductLabel
                "name": "ProductLabel",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterBasicServer.Attribute.SerialNumber
                "name": "SerialNumber",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterBasicServer.Attribute.LocalConfigDisabled
                "name": "LocalConfigDisabled",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterBasicServer.Attribute.Reachable
                "name": "Reachable",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterBasicServer.Attribute.UniqueID
                "name": "UniqueID",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterBasicServer.Attribute.CapabilityMinima
                "name": "CapabilityMinima",
                "type": "CapabilityMinimaStruct",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterBasicServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterBasicServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterBasicServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterBasicServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterBasicServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterBasic.Command.MfgSpecificPing: this.onMfgSpecificPing(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onMfgSpecificPing(msg, commandPath)
    {
        console.log(this.constructor.name+".onMfgSpecificPing")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterOtaSoftwareUpdateProvider
 */
class ClusterOtaSoftwareUpdateProvider
{
    static CLUSTER_NAME = 'OTA_SOFTWARE_UPDATE_PROVIDER_CLUSTER'
    static CLUSTER_ID = 0x0029

    static Command = {
        QueryImage: 0,
        QueryImageResponse: 1,
        ApplyUpdateRequest: 2,
        ApplyUpdateResponse: 3,
        NotifyUpdateApplied: 4,
    }
}

/**
 * ClusterOtaSoftwareUpdateProviderClient
 */
class ClusterOtaSoftwareUpdateProviderClient
{
    static Attribute = {
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandQueryImage = TlvObject({
        vendorId: TlvField(0,TlvUInt16),
        productId: TlvField(1,TlvUInt16),
        softwareVersion: TlvField(2,TlvUInt32),
        protocolsSupported: TlvField(3,TlvArray),
        hardwareVersion: TlvField(4,TlvUInt16),
        location: TlvField(5,TlvString),
        requestorCanConsent: TlvField(6,Tlvbool),
        metadataForProvider: TlvField(7,TlvByteString),
    })

    static TemplateCommandQueryImage = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::VendorId', 'value': params.VendorId },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.ProductId },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.SoftwareVersion },
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.ProtocolsSupported
          { 'tag': 4, 'type': 'uint16_t', 'value': params.HardwareVersion },
          { 'tag': 5, 'type': 'chip::CharSpan', 'value': params.Location },
          { 'tag': 6, 'type': 'bool', 'value': params.RequestorCanConsent },
          { 'tag': 7, 'type': 'chip::ByteSpan', 'value': params.MetadataForProvider },
        ]
    }

    static MapCommandQueryImage = new Map([
        [0, 'vendorId'],
        [1, 'productId'],
        [2, 'softwareVersion'],
        [3, 'protocolsSupported'],
        [4, 'hardwareVersion'],
        [5, 'location'],
        [6, 'requestorCanConsent'],
        [7, 'metadataForProvider'],
    ])

    static SchemaCommandQueryImageResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        delayedActionTime: TlvField(1,TlvUInt32),
        imageURI: TlvField(2,TlvString),
        softwareVersion: TlvField(3,TlvUInt32),
        softwareVersionString: TlvField(4,TlvString),
        updateToken: TlvField(5,TlvByteString),
        userConsentNeeded: TlvField(6,Tlvbool),
        metadataForRequestor: TlvField(7,TlvByteString),
    })

    static TemplateCommandQueryImageResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.DelayedActionTime },
          { 'tag': 2, 'type': 'chip::CharSpan', 'value': params.ImageURI },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.SoftwareVersion },
          { 'tag': 4, 'type': 'chip::CharSpan', 'value': params.SoftwareVersionString },
          { 'tag': 5, 'type': 'chip::ByteSpan', 'value': params.UpdateToken },
          { 'tag': 6, 'type': 'bool', 'value': params.UserConsentNeeded },
          { 'tag': 7, 'type': 'chip::ByteSpan', 'value': params.MetadataForRequestor },
        ]
    }

    static MapCommandQueryImageResponse = new Map([
        [0, 'status'],
        [1, 'delayedActionTime'],
        [2, 'imageURI'],
        [3, 'softwareVersion'],
        [4, 'softwareVersionString'],
        [5, 'updateToken'],
        [6, 'userConsentNeeded'],
        [7, 'metadataForRequestor'],
    ])

    static SchemaCommandApplyUpdateRequest = TlvObject({
        updateToken: TlvField(0,TlvByteString),
        newVersion: TlvField(1,TlvUInt32),
    })

    static TemplateCommandApplyUpdateRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.UpdateToken },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.NewVersion },
        ]
    }

    static MapCommandApplyUpdateRequest = new Map([
        [0, 'updateToken'],
        [1, 'newVersion'],
    ])

    static SchemaCommandApplyUpdateResponse = TlvObject({
        action: TlvField(0,TlvUInt8),
        delayedActionTime: TlvField(1,TlvUInt32),
    })

    static TemplateCommandApplyUpdateResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Action },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.DelayedActionTime },
        ]
    }

    static MapCommandApplyUpdateResponse = new Map([
        [0, 'action'],
        [1, 'delayedActionTime'],
    ])

    static SchemaCommandNotifyUpdateApplied = TlvObject({
        updateToken: TlvField(0,TlvByteString),
        softwareVersion: TlvField(1,TlvUInt32),
    })

    static TemplateCommandNotifyUpdateApplied = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.UpdateToken },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.SoftwareVersion },
        ]
    }

    static MapCommandNotifyUpdateApplied = new Map([
        [0, 'updateToken'],
        [1, 'softwareVersion'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            65528: { // ClusterOtaSoftwareUpdateProviderClient.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterOtaSoftwareUpdateProviderClient.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterOtaSoftwareUpdateProviderClient.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterOtaSoftwareUpdateProviderClient.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterOtaSoftwareUpdateProviderClient.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterOtaSoftwareUpdateProvider.Command.QueryImage: this.onQueryImage(msg, path); break;
            case ClusterOtaSoftwareUpdateProvider.Command.QueryImageResponse: this.onQueryImageResponse(msg, path); break;
            case ClusterOtaSoftwareUpdateProvider.Command.ApplyUpdateRequest: this.onApplyUpdateRequest(msg, path); break;
            case ClusterOtaSoftwareUpdateProvider.Command.ApplyUpdateResponse: this.onApplyUpdateResponse(msg, path); break;
            case ClusterOtaSoftwareUpdateProvider.Command.NotifyUpdateApplied: this.onNotifyUpdateApplied(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onQueryImage(msg, commandPath)
    {
        console.log(this.constructor.name+".onQueryImage")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onQueryImageResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onQueryImageResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onApplyUpdateRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onApplyUpdateRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onApplyUpdateResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onApplyUpdateResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onNotifyUpdateApplied(msg, commandPath)
    {
        console.log(this.constructor.name+".onNotifyUpdateApplied")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterOtaSoftwareUpdateRequestor
 */
class ClusterOtaSoftwareUpdateRequestor
{
    static CLUSTER_NAME = 'OTA_SOFTWARE_UPDATE_REQUESTOR_CLUSTER'
    static CLUSTER_ID = 0x002A

    static Command = {
        AnnounceOtaProvider: 0,
    }
}

/**
 * ClusterOtaSoftwareUpdateRequestorServer
 */
class ClusterOtaSoftwareUpdateRequestorServer
{
    static Attribute = {
        DefaultOtaProviders: 0,
        UpdatePossible: 1,
        UpdateState: 2,
        UpdateStateProgress: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandAnnounceOtaProvider = TlvObject({
        providerNodeId: TlvField(0,TlvUInt64),
        vendorId: TlvField(1,TlvUInt16),
        announcementReason: TlvField(2,TlvUInt8),
        metadataForNode: TlvField(3,TlvByteString),
        endpoint: TlvField(4,TlvUInt16),
    })

    static TemplateCommandAnnounceOtaProvider = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::NodeId', 'value': params.ProviderNodeId },
          { 'tag': 1, 'type': 'chip::VendorId', 'value': params.VendorId },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.AnnouncementReason },
          { 'tag': 3, 'type': 'chip::ByteSpan', 'value': params.MetadataForNode },
          { 'tag': 4, 'type': 'chip::EndpointId', 'value': params.Endpoint },
        ]
    }

    static MapCommandAnnounceOtaProvider = new Map([
        [0, 'providerNodeId'],
        [1, 'vendorId'],
        [2, 'announcementReason'],
        [3, 'metadataForNode'],
        [4, 'endpoint'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.DefaultOtaProviders
                "name": "DefaultOtaProviders",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.UpdatePossible
                "name": "UpdatePossible",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.UpdateState
                "name": "UpdateState",
                "type": "OTAUpdateStateEnum",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.UpdateStateProgress
                "name": "UpdateStateProgress",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterOtaSoftwareUpdateRequestorServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterOtaSoftwareUpdateRequestor.Command.AnnounceOtaProvider: this.onAnnounceOtaProvider(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onAnnounceOtaProvider(msg, commandPath)
    {
        console.log(this.constructor.name+".onAnnounceOtaProvider")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterLocalizationConfiguration
 */
class ClusterLocalizationConfiguration
{
    static CLUSTER_NAME = 'LOCALIZATION_CONFIGURATION_CLUSTER'
    static CLUSTER_ID = 0x002B

    static Command = {
    }
}

/**
 * ClusterLocalizationConfigurationServer
 */
class ClusterLocalizationConfigurationServer
{
    static Attribute = {
        ActiveLocale: 0,
        SupportedLocales: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterLocalizationConfigurationServer.Attribute.ActiveLocale
                "name": "ActiveLocale",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterLocalizationConfigurationServer.Attribute.SupportedLocales
                "name": "SupportedLocales",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterLocalizationConfigurationServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterLocalizationConfigurationServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterLocalizationConfigurationServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterLocalizationConfigurationServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterLocalizationConfigurationServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterTimeFormatLocalization
 */
class ClusterTimeFormatLocalization
{
    static CLUSTER_NAME = 'TIME_FORMAT_LOCALIZATION_CLUSTER'
    static CLUSTER_ID = 0x002C

    static Command = {
    }
}

/**
 * ClusterTimeFormatLocalizationServer
 */
class ClusterTimeFormatLocalizationServer
{
    static Attribute = {
        HourFormat: 0,
        ActiveCalendarType: 1,
        SupportedCalendarTypes: 2,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterTimeFormatLocalizationServer.Attribute.HourFormat
                "name": "HourFormat",
                "type": "HourFormat",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterTimeFormatLocalizationServer.Attribute.ActiveCalendarType
                "name": "ActiveCalendarType",
                "type": "CalendarType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterTimeFormatLocalizationServer.Attribute.SupportedCalendarTypes
                "name": "SupportedCalendarTypes",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterTimeFormatLocalizationServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterTimeFormatLocalizationServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterTimeFormatLocalizationServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterTimeFormatLocalizationServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterTimeFormatLocalizationServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterUnitLocalization
 */
class ClusterUnitLocalization
{
    static CLUSTER_NAME = 'UNIT_LOCALIZATION_CLUSTER'
    static CLUSTER_ID = 0x002D

    static Command = {
    }
}

/**
 * ClusterUnitLocalizationServer
 */
class ClusterUnitLocalizationServer
{
    static Attribute = {
        TemperatureUnit: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterUnitLocalizationServer.Attribute.TemperatureUnit
                "name": "TemperatureUnit",
                "type": "TempUnit",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterUnitLocalizationServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterUnitLocalizationServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterUnitLocalizationServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterUnitLocalizationServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterUnitLocalizationServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterPowerSourceConfiguration
 */
class ClusterPowerSourceConfiguration
{
    static CLUSTER_NAME = 'POWER_SOURCE_CONFIGURATION_CLUSTER'
    static CLUSTER_ID = 0x002E

    static Command = {
    }
}

/**
 * ClusterPowerSourceConfigurationServer
 */
class ClusterPowerSourceConfigurationServer
{
    static Attribute = {
        Sources: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterPowerSourceConfigurationServer.Attribute.Sources
                "name": "Sources",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterPowerSourceConfigurationServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterPowerSourceConfigurationServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterPowerSourceConfigurationServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterPowerSourceConfigurationServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterPowerSourceConfigurationServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterPowerSource
 */
class ClusterPowerSource
{
    static CLUSTER_NAME = 'POWER_SOURCE_CLUSTER'
    static CLUSTER_ID = 0x002F

    static Command = {
    }
}

/**
 * ClusterPowerSourceServer
 */
class ClusterPowerSourceServer
{
    static Attribute = {
        Status: 0,
        Order: 1,
        Description: 2,
        WiredAssessedInputVoltage: 3,
        WiredAssessedInputFrequency: 4,
        WiredCurrentType: 5,
        WiredAssessedCurrent: 6,
        WiredNominalVoltage: 7,
        WiredMaximumCurrent: 8,
        WiredPresent: 9,
        ActiveWiredFaults: 10,
        BatVoltage: 11,
        BatPercentRemaining: 12,
        BatTimeRemaining: 13,
        BatChargeLevel: 14,
        BatReplacementNeeded: 15,
        BatReplaceability: 16,
        BatPresent: 17,
        ActiveBatFaults: 18,
        BatReplacementDescription: 19,
        BatCommonDesignation: 20,
        BatANSIDesignation: 21,
        BatIECDesignation: 22,
        BatApprovedChemistry: 23,
        BatCapacity: 24,
        BatQuantity: 25,
        BatChargeState: 26,
        BatTimeToFullCharge: 27,
        BatFunctionalWhileCharging: 28,
        BatChargingCurrent: 29,
        ActiveBatChargeFaults: 30,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterPowerSourceServer.Attribute.Status
                "name": "Status",
                "type": "PowerSourceStatus",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterPowerSourceServer.Attribute.Order
                "name": "Order",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterPowerSourceServer.Attribute.Description
                "name": "Description",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterPowerSourceServer.Attribute.WiredAssessedInputVoltage
                "name": "WiredAssessedInputVoltage",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterPowerSourceServer.Attribute.WiredAssessedInputFrequency
                "name": "WiredAssessedInputFrequency",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterPowerSourceServer.Attribute.WiredCurrentType
                "name": "WiredCurrentType",
                "type": "WiredCurrentType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterPowerSourceServer.Attribute.WiredAssessedCurrent
                "name": "WiredAssessedCurrent",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterPowerSourceServer.Attribute.WiredNominalVoltage
                "name": "WiredNominalVoltage",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterPowerSourceServer.Attribute.WiredMaximumCurrent
                "name": "WiredMaximumCurrent",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterPowerSourceServer.Attribute.WiredPresent
                "name": "WiredPresent",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterPowerSourceServer.Attribute.ActiveWiredFaults
                "name": "ActiveWiredFaults",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterPowerSourceServer.Attribute.BatVoltage
                "name": "BatVoltage",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterPowerSourceServer.Attribute.BatPercentRemaining
                "name": "BatPercentRemaining",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            13: { // ClusterPowerSourceServer.Attribute.BatTimeRemaining
                "name": "BatTimeRemaining",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            14: { // ClusterPowerSourceServer.Attribute.BatChargeLevel
                "name": "BatChargeLevel",
                "type": "BatChargeLevel",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterPowerSourceServer.Attribute.BatReplacementNeeded
                "name": "BatReplacementNeeded",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterPowerSourceServer.Attribute.BatReplaceability
                "name": "BatReplaceability",
                "type": "BatReplaceability",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterPowerSourceServer.Attribute.BatPresent
                "name": "BatPresent",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterPowerSourceServer.Attribute.ActiveBatFaults
                "name": "ActiveBatFaults",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterPowerSourceServer.Attribute.BatReplacementDescription
                "name": "BatReplacementDescription",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterPowerSourceServer.Attribute.BatCommonDesignation
                "name": "BatCommonDesignation",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterPowerSourceServer.Attribute.BatANSIDesignation
                "name": "BatANSIDesignation",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterPowerSourceServer.Attribute.BatIECDesignation
                "name": "BatIECDesignation",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterPowerSourceServer.Attribute.BatApprovedChemistry
                "name": "BatApprovedChemistry",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            24: { // ClusterPowerSourceServer.Attribute.BatCapacity
                "name": "BatCapacity",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            25: { // ClusterPowerSourceServer.Attribute.BatQuantity
                "name": "BatQuantity",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterPowerSourceServer.Attribute.BatChargeState
                "name": "BatChargeState",
                "type": "BatChargeState",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            27: { // ClusterPowerSourceServer.Attribute.BatTimeToFullCharge
                "name": "BatTimeToFullCharge",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            28: { // ClusterPowerSourceServer.Attribute.BatFunctionalWhileCharging
                "name": "BatFunctionalWhileCharging",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            29: { // ClusterPowerSourceServer.Attribute.BatChargingCurrent
                "name": "BatChargingCurrent",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            30: { // ClusterPowerSourceServer.Attribute.ActiveBatChargeFaults
                "name": "ActiveBatChargeFaults",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterPowerSourceServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterPowerSourceServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterPowerSourceServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterPowerSourceServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterPowerSourceServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterGeneralCommissioning
 */
class ClusterGeneralCommissioning
{
    static CLUSTER_NAME = 'GENERAL_COMMISSIONING_CLUSTER'
    static CLUSTER_ID = 0x0030

    static Command = {
        ArmFailSafe: 0,
        ArmFailSafeResponse: 1,
        SetRegulatoryConfig: 2,
        SetRegulatoryConfigResponse: 3,
        CommissioningComplete: 4,
        CommissioningCompleteResponse: 5,
    }
}

/**
 * ClusterGeneralCommissioningServer
 */
class ClusterGeneralCommissioningServer
{
    static Attribute = {
        Breadcrumb: 0,
        BasicCommissioningInfo: 1,
        RegulatoryConfig: 2,
        LocationCapability: 3,
        SupportsConcurrentConnection: 4,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandArmFailSafe = TlvObject({
        expiryLengthSeconds: TlvField(0,TlvUInt16),
        breadcrumb: TlvField(1,TlvUInt64),
    })

    static TemplateCommandArmFailSafe = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ExpiryLengthSeconds },
          { 'tag': 1, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandArmFailSafe = new Map([
        [0, 'expiryLengthSeconds'],
        [1, 'breadcrumb'],
    ])

    static SchemaCommandArmFailSafeResponse = TlvObject({
        errorCode: TlvField(0,TlvUInt8),
        debugText: TlvField(1,TlvString),
    })

    static TemplateCommandArmFailSafeResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.ErrorCode },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DebugText },
        ]
    }

    static MapCommandArmFailSafeResponse = new Map([
        [0, 'errorCode'],
        [1, 'debugText'],
    ])

    static SchemaCommandSetRegulatoryConfig = TlvObject({
        newRegulatoryConfig: TlvField(0,TlvUInt8),
        countryCode: TlvField(1,TlvString),
        breadcrumb: TlvField(2,TlvUInt64),
    })

    static TemplateCommandSetRegulatoryConfig = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NewRegulatoryConfig },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.CountryCode },
          { 'tag': 2, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandSetRegulatoryConfig = new Map([
        [0, 'newRegulatoryConfig'],
        [1, 'countryCode'],
        [2, 'breadcrumb'],
    ])

    static SchemaCommandSetRegulatoryConfigResponse = TlvObject({
        errorCode: TlvField(0,TlvUInt8),
        debugText: TlvField(1,TlvString),
    })

    static TemplateCommandSetRegulatoryConfigResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.ErrorCode },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DebugText },
        ]
    }

    static MapCommandSetRegulatoryConfigResponse = new Map([
        [0, 'errorCode'],
        [1, 'debugText'],
    ])

    static SchemaCommandCommissioningComplete = TlvObject({
    })

    static TemplateCommandCommissioningComplete = function(params) {
        return [
        ]
    }

    static MapCommandCommissioningComplete = new Map([
    ])

    static SchemaCommandCommissioningCompleteResponse = TlvObject({
        errorCode: TlvField(0,TlvUInt8),
        debugText: TlvField(1,TlvString),
    })

    static TemplateCommandCommissioningCompleteResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.ErrorCode },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DebugText },
        ]
    }

    static MapCommandCommissioningCompleteResponse = new Map([
        [0, 'errorCode'],
        [1, 'debugText'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterGeneralCommissioningServer.Attribute.Breadcrumb
                "name": "Breadcrumb",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterGeneralCommissioningServer.Attribute.BasicCommissioningInfo
                "name": "BasicCommissioningInfo",
                "type": "BasicCommissioningInfo",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterGeneralCommissioningServer.Attribute.RegulatoryConfig
                "name": "RegulatoryConfig",
                "type": "RegulatoryLocationType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterGeneralCommissioningServer.Attribute.LocationCapability
                "name": "LocationCapability",
                "type": "RegulatoryLocationType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterGeneralCommissioningServer.Attribute.SupportsConcurrentConnection
                "name": "SupportsConcurrentConnection",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterGeneralCommissioningServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterGeneralCommissioningServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterGeneralCommissioningServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterGeneralCommissioningServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterGeneralCommissioningServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterGeneralCommissioning.Command.ArmFailSafe: this.onArmFailSafe(msg, path); break;
            case ClusterGeneralCommissioning.Command.ArmFailSafeResponse: this.onArmFailSafeResponse(msg, path); break;
            case ClusterGeneralCommissioning.Command.SetRegulatoryConfig: this.onSetRegulatoryConfig(msg, path); break;
            case ClusterGeneralCommissioning.Command.SetRegulatoryConfigResponse: this.onSetRegulatoryConfigResponse(msg, path); break;
            case ClusterGeneralCommissioning.Command.CommissioningComplete: this.onCommissioningComplete(msg, path); break;
            case ClusterGeneralCommissioning.Command.CommissioningCompleteResponse: this.onCommissioningCompleteResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onArmFailSafe(msg, commandPath)
    {
        console.log(this.constructor.name+".onArmFailSafe")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onArmFailSafeResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onArmFailSafeResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetRegulatoryConfig(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetRegulatoryConfig")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetRegulatoryConfigResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetRegulatoryConfigResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCommissioningComplete(msg, commandPath)
    {
        console.log(this.constructor.name+".onCommissioningComplete")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCommissioningCompleteResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onCommissioningCompleteResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterNetworkCommissioning
 */
class ClusterNetworkCommissioning
{
    static CLUSTER_NAME = 'NETWORK_COMMISSIONING_CLUSTER'
    static CLUSTER_ID = 0x0031

    static Command = {
        ScanNetworks: 0,
        ScanNetworksResponse: 1,
        AddOrUpdateWiFiNetwork: 2,
        AddOrUpdateThreadNetwork: 3,
        RemoveNetwork: 4,
        NetworkConfigResponse: 5,
        ConnectNetwork: 6,
        ConnectNetworkResponse: 7,
        ReorderNetwork: 8,
    }
}

/**
 * ClusterNetworkCommissioningServer
 */
class ClusterNetworkCommissioningServer
{
    static Attribute = {
        MaxNetworks: 0,
        Networks: 1,
        ScanMaxTimeSeconds: 2,
        ConnectMaxTimeSeconds: 3,
        InterfaceEnabled: 4,
        LastNetworkingStatus: 5,
        LastNetworkID: 6,
        LastConnectErrorValue: 7,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandScanNetworks = TlvObject({
        ssid: TlvField(0,TlvByteString),
        breadcrumb: TlvField(1,TlvUInt64),
    })

    static TemplateCommandScanNetworks = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.Ssid },
          { 'tag': 1, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandScanNetworks = new Map([
        [0, 'ssid'],
        [1, 'breadcrumb'],
    ])

    static SchemaCommandScanNetworksResponse = TlvObject({
        networkingStatus: TlvField(0,TlvUInt8),
        debugText: TlvField(1,TlvString),
        wiFiScanResults: TlvField(2,TlvArray),
        threadScanResults: TlvField(3,TlvArray),
    })

    static TemplateCommandScanNetworksResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NetworkingStatus },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DebugText },
          { 'tag': 2, 'type': 'array', 'value': [] }, // params.WiFiScanResults
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.ThreadScanResults
        ]
    }

    static MapCommandScanNetworksResponse = new Map([
        [0, 'networkingStatus'],
        [1, 'debugText'],
        [2, 'wiFiScanResults'],
        [3, 'threadScanResults'],
    ])

    static SchemaCommandAddOrUpdateWiFiNetwork = TlvObject({
        ssid: TlvField(0,TlvByteString),
        credentials: TlvField(1,TlvByteString),
        breadcrumb: TlvField(2,TlvUInt64),
    })

    static TemplateCommandAddOrUpdateWiFiNetwork = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.Ssid },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.Credentials },
          { 'tag': 2, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandAddOrUpdateWiFiNetwork = new Map([
        [0, 'ssid'],
        [1, 'credentials'],
        [2, 'breadcrumb'],
    ])

    static SchemaCommandAddOrUpdateThreadNetwork = TlvObject({
        operationalDataset: TlvField(0,TlvByteString),
        breadcrumb: TlvField(1,TlvUInt64),
    })

    static TemplateCommandAddOrUpdateThreadNetwork = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.OperationalDataset },
          { 'tag': 1, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandAddOrUpdateThreadNetwork = new Map([
        [0, 'operationalDataset'],
        [1, 'breadcrumb'],
    ])

    static SchemaCommandRemoveNetwork = TlvObject({
        networkID: TlvField(0,TlvByteString),
        breadcrumb: TlvField(1,TlvUInt64),
    })

    static TemplateCommandRemoveNetwork = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.NetworkID },
          { 'tag': 1, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandRemoveNetwork = new Map([
        [0, 'networkID'],
        [1, 'breadcrumb'],
    ])

    static SchemaCommandNetworkConfigResponse = TlvObject({
        networkingStatus: TlvField(0,TlvUInt8),
        debugText: TlvField(1,TlvString),
        networkIndex: TlvField(2,TlvUInt8),
    })

    static TemplateCommandNetworkConfigResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NetworkingStatus },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DebugText },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.NetworkIndex },
        ]
    }

    static MapCommandNetworkConfigResponse = new Map([
        [0, 'networkingStatus'],
        [1, 'debugText'],
        [2, 'networkIndex'],
    ])

    static SchemaCommandConnectNetwork = TlvObject({
        networkID: TlvField(0,TlvByteString),
        breadcrumb: TlvField(1,TlvUInt64),
    })

    static TemplateCommandConnectNetwork = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.NetworkID },
          { 'tag': 1, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandConnectNetwork = new Map([
        [0, 'networkID'],
        [1, 'breadcrumb'],
    ])

    static SchemaCommandConnectNetworkResponse = TlvObject({
        networkingStatus: TlvField(0,TlvUInt8),
        debugText: TlvField(1,TlvString),
        errorValue: TlvField(2,TlvInt32_t),
    })

    static TemplateCommandConnectNetworkResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NetworkingStatus },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DebugText },
          { 'tag': 2, 'type': 'int32_t', 'value': params.ErrorValue },
        ]
    }

    static MapCommandConnectNetworkResponse = new Map([
        [0, 'networkingStatus'],
        [1, 'debugText'],
        [2, 'errorValue'],
    ])

    static SchemaCommandReorderNetwork = TlvObject({
        networkID: TlvField(0,TlvByteString),
        networkIndex: TlvField(1,TlvUInt8),
        breadcrumb: TlvField(2,TlvUInt64),
    })

    static TemplateCommandReorderNetwork = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.NetworkID },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.NetworkIndex },
          { 'tag': 2, 'type': 'uint64_t', 'value': params.Breadcrumb },
        ]
    }

    static MapCommandReorderNetwork = new Map([
        [0, 'networkID'],
        [1, 'networkIndex'],
        [2, 'breadcrumb'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterNetworkCommissioningServer.Attribute.MaxNetworks
                "name": "MaxNetworks",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterNetworkCommissioningServer.Attribute.Networks
                "name": "Networks",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterNetworkCommissioningServer.Attribute.ScanMaxTimeSeconds
                "name": "ScanMaxTimeSeconds",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterNetworkCommissioningServer.Attribute.ConnectMaxTimeSeconds
                "name": "ConnectMaxTimeSeconds",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterNetworkCommissioningServer.Attribute.InterfaceEnabled
                "name": "InterfaceEnabled",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterNetworkCommissioningServer.Attribute.LastNetworkingStatus
                "name": "LastNetworkingStatus",
                "type": "NetworkCommissioningStatus",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterNetworkCommissioningServer.Attribute.LastNetworkID
                "name": "LastNetworkID",
                "type": "octet_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterNetworkCommissioningServer.Attribute.LastConnectErrorValue
                "name": "LastConnectErrorValue",
                "type": "int32s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterNetworkCommissioningServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterNetworkCommissioningServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterNetworkCommissioningServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterNetworkCommissioningServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterNetworkCommissioningServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterNetworkCommissioning.Command.ScanNetworks: this.onScanNetworks(msg, path); break;
            case ClusterNetworkCommissioning.Command.ScanNetworksResponse: this.onScanNetworksResponse(msg, path); break;
            case ClusterNetworkCommissioning.Command.AddOrUpdateWiFiNetwork: this.onAddOrUpdateWiFiNetwork(msg, path); break;
            case ClusterNetworkCommissioning.Command.AddOrUpdateThreadNetwork: this.onAddOrUpdateThreadNetwork(msg, path); break;
            case ClusterNetworkCommissioning.Command.RemoveNetwork: this.onRemoveNetwork(msg, path); break;
            case ClusterNetworkCommissioning.Command.NetworkConfigResponse: this.onNetworkConfigResponse(msg, path); break;
            case ClusterNetworkCommissioning.Command.ConnectNetwork: this.onConnectNetwork(msg, path); break;
            case ClusterNetworkCommissioning.Command.ConnectNetworkResponse: this.onConnectNetworkResponse(msg, path); break;
            case ClusterNetworkCommissioning.Command.ReorderNetwork: this.onReorderNetwork(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onScanNetworks(msg, commandPath)
    {
        console.log(this.constructor.name+".onScanNetworks")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onScanNetworksResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onScanNetworksResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddOrUpdateWiFiNetwork(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddOrUpdateWiFiNetwork")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddOrUpdateThreadNetwork(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddOrUpdateThreadNetwork")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveNetwork(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveNetwork")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onNetworkConfigResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onNetworkConfigResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onConnectNetwork(msg, commandPath)
    {
        console.log(this.constructor.name+".onConnectNetwork")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onConnectNetworkResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onConnectNetworkResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onReorderNetwork(msg, commandPath)
    {
        console.log(this.constructor.name+".onReorderNetwork")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterDiagnosticLogs
 */
class ClusterDiagnosticLogs
{
    static CLUSTER_NAME = 'DIAGNOSTIC_LOGS_CLUSTER'
    static CLUSTER_ID = 0x0032

    static Command = {
        RetrieveLogsRequest: 0,
        RetrieveLogsResponse: 1,
    }
}

/**
 * ClusterDiagnosticLogsServer
 */
class ClusterDiagnosticLogsServer
{
    static Attribute = {
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandRetrieveLogsRequest = TlvObject({
        intent: TlvField(0,TlvUInt8),
        requestedProtocol: TlvField(1,TlvUInt8),
        transferFileDesignator: TlvField(2,TlvByteString),
    })

    static TemplateCommandRetrieveLogsRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Intent },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.RequestedProtocol },
          { 'tag': 2, 'type': 'chip::ByteSpan', 'value': params.TransferFileDesignator },
        ]
    }

    static MapCommandRetrieveLogsRequest = new Map([
        [0, 'intent'],
        [1, 'requestedProtocol'],
        [2, 'transferFileDesignator'],
    ])

    static SchemaCommandRetrieveLogsResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        content: TlvField(1,TlvByteString),
        timeStamp: TlvField(2,TlvUInt32),
        timeSinceBoot: TlvField(3,TlvUInt32),
    })

    static TemplateCommandRetrieveLogsResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.Content },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.TimeStamp },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.TimeSinceBoot },
        ]
    }

    static MapCommandRetrieveLogsResponse = new Map([
        [0, 'status'],
        [1, 'content'],
        [2, 'timeStamp'],
        [3, 'timeSinceBoot'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            65528: { // ClusterDiagnosticLogsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterDiagnosticLogsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterDiagnosticLogsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterDiagnosticLogsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterDiagnosticLogsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterDiagnosticLogs.Command.RetrieveLogsRequest: this.onRetrieveLogsRequest(msg, path); break;
            case ClusterDiagnosticLogs.Command.RetrieveLogsResponse: this.onRetrieveLogsResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onRetrieveLogsRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onRetrieveLogsRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRetrieveLogsResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onRetrieveLogsResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterGeneralDiagnostics
 */
class ClusterGeneralDiagnostics
{
    static CLUSTER_NAME = 'GENERAL_DIAGNOSTICS_CLUSTER'
    static CLUSTER_ID = 0x0033

    static Command = {
        TestEventTrigger: 0,
    }
}

/**
 * ClusterGeneralDiagnosticsServer
 */
class ClusterGeneralDiagnosticsServer
{
    static Attribute = {
        NetworkInterfaces: 0,
        RebootCount: 1,
        UpTime: 2,
        TotalOperationalHours: 3,
        BootReasons: 4,
        ActiveHardwareFaults: 5,
        ActiveRadioFaults: 6,
        ActiveNetworkFaults: 7,
        TestEventTriggersEnabled: 8,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandTestEventTrigger = TlvObject({
        enableKey: TlvField(0,TlvByteString),
        eventTrigger: TlvField(1,TlvUInt64),
    })

    static TemplateCommandTestEventTrigger = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.EnableKey },
          { 'tag': 1, 'type': 'uint64_t', 'value': params.EventTrigger },
        ]
    }

    static MapCommandTestEventTrigger = new Map([
        [0, 'enableKey'],
        [1, 'eventTrigger'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterGeneralDiagnosticsServer.Attribute.NetworkInterfaces
                "name": "NetworkInterfaces",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterGeneralDiagnosticsServer.Attribute.RebootCount
                "name": "RebootCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterGeneralDiagnosticsServer.Attribute.UpTime
                "name": "UpTime",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterGeneralDiagnosticsServer.Attribute.TotalOperationalHours
                "name": "TotalOperationalHours",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterGeneralDiagnosticsServer.Attribute.BootReasons
                "name": "BootReasons",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterGeneralDiagnosticsServer.Attribute.ActiveHardwareFaults
                "name": "ActiveHardwareFaults",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterGeneralDiagnosticsServer.Attribute.ActiveRadioFaults
                "name": "ActiveRadioFaults",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterGeneralDiagnosticsServer.Attribute.ActiveNetworkFaults
                "name": "ActiveNetworkFaults",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterGeneralDiagnosticsServer.Attribute.TestEventTriggersEnabled
                "name": "TestEventTriggersEnabled",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterGeneralDiagnosticsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterGeneralDiagnosticsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterGeneralDiagnosticsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterGeneralDiagnosticsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterGeneralDiagnosticsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterGeneralDiagnostics.Command.TestEventTrigger: this.onTestEventTrigger(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onTestEventTrigger(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEventTrigger")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterSoftwareDiagnostics
 */
class ClusterSoftwareDiagnostics
{
    static CLUSTER_NAME = 'SOFTWARE_DIAGNOSTICS_CLUSTER'
    static CLUSTER_ID = 0x0034

    static Command = {
        ResetWatermarks: 0,
    }
}

/**
 * ClusterSoftwareDiagnosticsServer
 */
class ClusterSoftwareDiagnosticsServer
{
    static Attribute = {
        ThreadMetrics: 0,
        CurrentHeapFree: 1,
        CurrentHeapUsed: 2,
        CurrentHeapHighWatermark: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandResetWatermarks = TlvObject({
    })

    static TemplateCommandResetWatermarks = function(params) {
        return [
        ]
    }

    static MapCommandResetWatermarks = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterSoftwareDiagnosticsServer.Attribute.ThreadMetrics
                "name": "ThreadMetrics",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterSoftwareDiagnosticsServer.Attribute.CurrentHeapFree
                "name": "CurrentHeapFree",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterSoftwareDiagnosticsServer.Attribute.CurrentHeapUsed
                "name": "CurrentHeapUsed",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterSoftwareDiagnosticsServer.Attribute.CurrentHeapHighWatermark
                "name": "CurrentHeapHighWatermark",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterSoftwareDiagnosticsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterSoftwareDiagnosticsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterSoftwareDiagnosticsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterSoftwareDiagnosticsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterSoftwareDiagnosticsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterSoftwareDiagnostics.Command.ResetWatermarks: this.onResetWatermarks(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onResetWatermarks(msg, commandPath)
    {
        console.log(this.constructor.name+".onResetWatermarks")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterThreadNetworkDiagnostics
 */
class ClusterThreadNetworkDiagnostics
{
    static CLUSTER_NAME = 'THREAD_NETWORK_DIAGNOSTICS_CLUSTER'
    static CLUSTER_ID = 0x0035

    static Command = {
        ResetCounts: 0,
    }
}

/**
 * ClusterThreadNetworkDiagnosticsServer
 */
class ClusterThreadNetworkDiagnosticsServer
{
    static Attribute = {
        Channel: 0,
        RoutingRole: 1,
        NetworkName: 2,
        PanId: 3,
        ExtendedPanId: 4,
        MeshLocalPrefix: 5,
        OverrunCount: 6,
        NeighborTableList: 7,
        RouteTableList: 8,
        PartitionId: 9,
        Weighting: 10,
        DataVersion: 11,
        StableDataVersion: 12,
        LeaderRouterId: 13,
        DetachedRoleCount: 14,
        ChildRoleCount: 15,
        RouterRoleCount: 16,
        LeaderRoleCount: 17,
        AttachAttemptCount: 18,
        PartitionIdChangeCount: 19,
        BetterPartitionAttachAttemptCount: 20,
        ParentChangeCount: 21,
        TxTotalCount: 22,
        TxUnicastCount: 23,
        TxBroadcastCount: 24,
        TxAckRequestedCount: 25,
        TxAckedCount: 26,
        TxNoAckRequestedCount: 27,
        TxDataCount: 28,
        TxDataPollCount: 29,
        TxBeaconCount: 30,
        TxBeaconRequestCount: 31,
        TxOtherCount: 32,
        TxRetryCount: 33,
        TxDirectMaxRetryExpiryCount: 34,
        TxIndirectMaxRetryExpiryCount: 35,
        TxErrCcaCount: 36,
        TxErrAbortCount: 37,
        TxErrBusyChannelCount: 38,
        RxTotalCount: 39,
        RxUnicastCount: 40,
        RxBroadcastCount: 41,
        RxDataCount: 42,
        RxDataPollCount: 43,
        RxBeaconCount: 44,
        RxBeaconRequestCount: 45,
        RxOtherCount: 46,
        RxAddressFilteredCount: 47,
        RxDestAddrFilteredCount: 48,
        RxDuplicatedCount: 49,
        RxErrNoFrameCount: 50,
        RxErrUnknownNeighborCount: 51,
        RxErrInvalidSrcAddrCount: 52,
        RxErrSecCount: 53,
        RxErrFcsCount: 54,
        RxErrOtherCount: 55,
        ActiveTimestamp: 56,
        PendingTimestamp: 57,
        Delay: 58,
        SecurityPolicy: 59,
        ChannelPage0Mask: 60,
        OperationalDatasetComponents: 61,
        ActiveNetworkFaultsList: 62,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandResetCounts = TlvObject({
    })

    static TemplateCommandResetCounts = function(params) {
        return [
        ]
    }

    static MapCommandResetCounts = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterThreadNetworkDiagnosticsServer.Attribute.Channel
                "name": "Channel",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RoutingRole
                "name": "RoutingRole",
                "type": "RoutingRole",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterThreadNetworkDiagnosticsServer.Attribute.NetworkName
                "name": "NetworkName",
                "type": "char_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterThreadNetworkDiagnosticsServer.Attribute.PanId
                "name": "PanId",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ExtendedPanId
                "name": "ExtendedPanId",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterThreadNetworkDiagnosticsServer.Attribute.MeshLocalPrefix
                "name": "MeshLocalPrefix",
                "type": "octet_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterThreadNetworkDiagnosticsServer.Attribute.OverrunCount
                "name": "OverrunCount",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterThreadNetworkDiagnosticsServer.Attribute.NeighborTableList
                "name": "NeighborTableList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RouteTableList
                "name": "RouteTableList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterThreadNetworkDiagnosticsServer.Attribute.PartitionId
                "name": "PartitionId",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterThreadNetworkDiagnosticsServer.Attribute.Weighting
                "name": "Weighting",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterThreadNetworkDiagnosticsServer.Attribute.DataVersion
                "name": "DataVersion",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterThreadNetworkDiagnosticsServer.Attribute.StableDataVersion
                "name": "StableDataVersion",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            13: { // ClusterThreadNetworkDiagnosticsServer.Attribute.LeaderRouterId
                "name": "LeaderRouterId",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            14: { // ClusterThreadNetworkDiagnosticsServer.Attribute.DetachedRoleCount
                "name": "DetachedRoleCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ChildRoleCount
                "name": "ChildRoleCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RouterRoleCount
                "name": "RouterRoleCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterThreadNetworkDiagnosticsServer.Attribute.LeaderRoleCount
                "name": "LeaderRoleCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterThreadNetworkDiagnosticsServer.Attribute.AttachAttemptCount
                "name": "AttachAttemptCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterThreadNetworkDiagnosticsServer.Attribute.PartitionIdChangeCount
                "name": "PartitionIdChangeCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterThreadNetworkDiagnosticsServer.Attribute.BetterPartitionAttachAttemptCount
                "name": "BetterPartitionAttachAttemptCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ParentChangeCount
                "name": "ParentChangeCount",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxTotalCount
                "name": "TxTotalCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxUnicastCount
                "name": "TxUnicastCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            24: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxBroadcastCount
                "name": "TxBroadcastCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            25: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxAckRequestedCount
                "name": "TxAckRequestedCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxAckedCount
                "name": "TxAckedCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            27: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxNoAckRequestedCount
                "name": "TxNoAckRequestedCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            28: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxDataCount
                "name": "TxDataCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            29: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxDataPollCount
                "name": "TxDataPollCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            30: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxBeaconCount
                "name": "TxBeaconCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            31: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxBeaconRequestCount
                "name": "TxBeaconRequestCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            32: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxOtherCount
                "name": "TxOtherCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxRetryCount
                "name": "TxRetryCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            34: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxDirectMaxRetryExpiryCount
                "name": "TxDirectMaxRetryExpiryCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            35: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxIndirectMaxRetryExpiryCount
                "name": "TxIndirectMaxRetryExpiryCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            36: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxErrCcaCount
                "name": "TxErrCcaCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            37: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxErrAbortCount
                "name": "TxErrAbortCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            38: { // ClusterThreadNetworkDiagnosticsServer.Attribute.TxErrBusyChannelCount
                "name": "TxErrBusyChannelCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            39: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxTotalCount
                "name": "RxTotalCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            40: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxUnicastCount
                "name": "RxUnicastCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            41: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxBroadcastCount
                "name": "RxBroadcastCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            42: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxDataCount
                "name": "RxDataCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            43: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxDataPollCount
                "name": "RxDataPollCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            44: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxBeaconCount
                "name": "RxBeaconCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            45: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxBeaconRequestCount
                "name": "RxBeaconRequestCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            46: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxOtherCount
                "name": "RxOtherCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            47: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxAddressFilteredCount
                "name": "RxAddressFilteredCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            48: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxDestAddrFilteredCount
                "name": "RxDestAddrFilteredCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            49: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxDuplicatedCount
                "name": "RxDuplicatedCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            50: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxErrNoFrameCount
                "name": "RxErrNoFrameCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            51: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxErrUnknownNeighborCount
                "name": "RxErrUnknownNeighborCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            52: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxErrInvalidSrcAddrCount
                "name": "RxErrInvalidSrcAddrCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            53: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxErrSecCount
                "name": "RxErrSecCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            54: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxErrFcsCount
                "name": "RxErrFcsCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            55: { // ClusterThreadNetworkDiagnosticsServer.Attribute.RxErrOtherCount
                "name": "RxErrOtherCount",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            56: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ActiveTimestamp
                "name": "ActiveTimestamp",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            57: { // ClusterThreadNetworkDiagnosticsServer.Attribute.PendingTimestamp
                "name": "PendingTimestamp",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            58: { // ClusterThreadNetworkDiagnosticsServer.Attribute.Delay
                "name": "Delay",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            59: { // ClusterThreadNetworkDiagnosticsServer.Attribute.SecurityPolicy
                "name": "SecurityPolicy",
                "type": "SecurityPolicy",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            60: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ChannelPage0Mask
                "name": "ChannelPage0Mask",
                "type": "octet_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            61: { // ClusterThreadNetworkDiagnosticsServer.Attribute.OperationalDatasetComponents
                "name": "OperationalDatasetComponents",
                "type": "OperationalDatasetComponents",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            62: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ActiveNetworkFaultsList
                "name": "ActiveNetworkFaultsList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterThreadNetworkDiagnosticsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterThreadNetworkDiagnosticsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterThreadNetworkDiagnosticsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterThreadNetworkDiagnosticsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterThreadNetworkDiagnosticsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterThreadNetworkDiagnostics.Command.ResetCounts: this.onResetCounts(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onResetCounts(msg, commandPath)
    {
        console.log(this.constructor.name+".onResetCounts")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterWiFiNetworkDiagnostics
 */
class ClusterWiFiNetworkDiagnostics
{
    static CLUSTER_NAME = 'WIFI_NETWORK_DIAGNOSTICS_CLUSTER'
    static CLUSTER_ID = 0x0036

    static Command = {
        ResetCounts: 0,
    }
}

/**
 * ClusterWiFiNetworkDiagnosticsServer
 */
class ClusterWiFiNetworkDiagnosticsServer
{
    static Attribute = {
        Bssid: 0,
        SecurityType: 1,
        WiFiVersion: 2,
        ChannelNumber: 3,
        Rssi: 4,
        BeaconLostCount: 5,
        BeaconRxCount: 6,
        PacketMulticastRxCount: 7,
        PacketMulticastTxCount: 8,
        PacketUnicastRxCount: 9,
        PacketUnicastTxCount: 10,
        CurrentMaxRate: 11,
        OverrunCount: 12,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandResetCounts = TlvObject({
    })

    static TemplateCommandResetCounts = function(params) {
        return [
        ]
    }

    static MapCommandResetCounts = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.Bssid
                "name": "Bssid",
                "type": "octet_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.SecurityType
                "name": "SecurityType",
                "type": "SecurityType",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.WiFiVersion
                "name": "WiFiVersion",
                "type": "WiFiVersionType",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.ChannelNumber
                "name": "ChannelNumber",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.Rssi
                "name": "Rssi",
                "type": "int8s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.BeaconLostCount
                "name": "BeaconLostCount",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.BeaconRxCount
                "name": "BeaconRxCount",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.PacketMulticastRxCount
                "name": "PacketMulticastRxCount",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.PacketMulticastTxCount
                "name": "PacketMulticastTxCount",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.PacketUnicastRxCount
                "name": "PacketUnicastRxCount",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.PacketUnicastTxCount
                "name": "PacketUnicastTxCount",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.CurrentMaxRate
                "name": "CurrentMaxRate",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.OverrunCount
                "name": "OverrunCount",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterWiFiNetworkDiagnosticsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterWiFiNetworkDiagnostics.Command.ResetCounts: this.onResetCounts(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onResetCounts(msg, commandPath)
    {
        console.log(this.constructor.name+".onResetCounts")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterEthernetNetworkDiagnostics
 */
class ClusterEthernetNetworkDiagnostics
{
    static CLUSTER_NAME = 'ETHERNET_NETWORK_DIAGNOSTICS_CLUSTER'
    static CLUSTER_ID = 0x0037

    static Command = {
        ResetCounts: 0,
    }
}

/**
 * ClusterEthernetNetworkDiagnosticsServer
 */
class ClusterEthernetNetworkDiagnosticsServer
{
    static Attribute = {
        PHYRate: 0,
        FullDuplex: 1,
        PacketRxCount: 2,
        PacketTxCount: 3,
        TxErrCount: 4,
        CollisionCount: 5,
        OverrunCount: 6,
        CarrierDetect: 7,
        TimeSinceReset: 8,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandResetCounts = TlvObject({
    })

    static TemplateCommandResetCounts = function(params) {
        return [
        ]
    }

    static MapCommandResetCounts = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.PHYRate
                "name": "PHYRate",
                "type": "PHYRateType",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.FullDuplex
                "name": "FullDuplex",
                "type": "boolean",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.PacketRxCount
                "name": "PacketRxCount",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.PacketTxCount
                "name": "PacketTxCount",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.TxErrCount
                "name": "TxErrCount",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.CollisionCount
                "name": "CollisionCount",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.OverrunCount
                "name": "OverrunCount",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.CarrierDetect
                "name": "CarrierDetect",
                "type": "boolean",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.TimeSinceReset
                "name": "TimeSinceReset",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterEthernetNetworkDiagnosticsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterEthernetNetworkDiagnostics.Command.ResetCounts: this.onResetCounts(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onResetCounts(msg, commandPath)
    {
        console.log(this.constructor.name+".onResetCounts")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterSwitch
 */
class ClusterSwitch
{
    static CLUSTER_NAME = 'SWITCH_CLUSTER'
    static CLUSTER_ID = 0x003B

    static Command = {
    }
}

/**
 * ClusterSwitchServer
 */
class ClusterSwitchServer
{
    static Attribute = {
        NumberOfPositions: 0,
        CurrentPosition: 1,
        MultiPressMax: 2,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterSwitchServer.Attribute.NumberOfPositions
                "name": "NumberOfPositions",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterSwitchServer.Attribute.CurrentPosition
                "name": "CurrentPosition",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterSwitchServer.Attribute.MultiPressMax
                "name": "MultiPressMax",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterSwitchServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterSwitchServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterSwitchServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterSwitchServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterSwitchServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterAdministratorCommissioning
 */
class ClusterAdministratorCommissioning
{
    static CLUSTER_NAME = 'ADMINISTRATOR_COMMISSIONING_CLUSTER'
    static CLUSTER_ID = 0x003C

    static Command = {
        OpenCommissioningWindow: 0,
        OpenBasicCommissioningWindow: 1,
        RevokeCommissioning: 2,
    }
}

/**
 * ClusterAdministratorCommissioningServer
 */
class ClusterAdministratorCommissioningServer
{
    static Attribute = {
        WindowStatus: 0,
        AdminFabricIndex: 1,
        AdminVendorId: 2,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandOpenCommissioningWindow = TlvObject({
        commissioningTimeout: TlvField(0,TlvUInt16),
        PAKEVerifier: TlvField(1,TlvByteString),
        discriminator: TlvField(2,TlvUInt16),
        iterations: TlvField(3,TlvUInt32),
        salt: TlvField(4,TlvByteString),
    })

    static TemplateCommandOpenCommissioningWindow = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.CommissioningTimeout },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.PAKEVerifier },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.Discriminator },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.Iterations },
          { 'tag': 4, 'type': 'chip::ByteSpan', 'value': params.Salt },
        ]
    }

    static MapCommandOpenCommissioningWindow = new Map([
        [0, 'commissioningTimeout'],
        [1, 'PAKEVerifier'],
        [2, 'discriminator'],
        [3, 'iterations'],
        [4, 'salt'],
    ])

    static SchemaCommandOpenBasicCommissioningWindow = TlvObject({
        commissioningTimeout: TlvField(0,TlvUInt16),
    })

    static TemplateCommandOpenBasicCommissioningWindow = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.CommissioningTimeout },
        ]
    }

    static MapCommandOpenBasicCommissioningWindow = new Map([
        [0, 'commissioningTimeout'],
    ])

    static SchemaCommandRevokeCommissioning = TlvObject({
    })

    static TemplateCommandRevokeCommissioning = function(params) {
        return [
        ]
    }

    static MapCommandRevokeCommissioning = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterAdministratorCommissioningServer.Attribute.WindowStatus
                "name": "WindowStatus",
                "type": "CommissioningWindowStatus",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterAdministratorCommissioningServer.Attribute.AdminFabricIndex
                "name": "AdminFabricIndex",
                "type": "fabric_idx",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterAdministratorCommissioningServer.Attribute.AdminVendorId
                "name": "AdminVendorId",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterAdministratorCommissioningServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterAdministratorCommissioningServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterAdministratorCommissioningServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterAdministratorCommissioningServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterAdministratorCommissioningServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterAdministratorCommissioning.Command.OpenCommissioningWindow: this.onOpenCommissioningWindow(msg, path); break;
            case ClusterAdministratorCommissioning.Command.OpenBasicCommissioningWindow: this.onOpenBasicCommissioningWindow(msg, path); break;
            case ClusterAdministratorCommissioning.Command.RevokeCommissioning: this.onRevokeCommissioning(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onOpenCommissioningWindow(msg, commandPath)
    {
        console.log(this.constructor.name+".onOpenCommissioningWindow")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onOpenBasicCommissioningWindow(msg, commandPath)
    {
        console.log(this.constructor.name+".onOpenBasicCommissioningWindow")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRevokeCommissioning(msg, commandPath)
    {
        console.log(this.constructor.name+".onRevokeCommissioning")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterOperationalCredentials
 */
class ClusterOperationalCredentials
{
    static CLUSTER_NAME = 'OPERATIONAL_CREDENTIALS_CLUSTER'
    static CLUSTER_ID = 0x003E

    static Command = {
        AttestationRequest: 0,
        AttestationResponse: 1,
        CertificateChainRequest: 2,
        CertificateChainResponse: 3,
        CSRRequest: 4,
        CSRResponse: 5,
        AddNOC: 6,
        UpdateNOC: 7,
        NOCResponse: 8,
        UpdateFabricLabel: 9,
        RemoveFabric: 10,
        AddTrustedRootCertificate: 11,
    }
}

/**
 * ClusterOperationalCredentialsServer
 */
class ClusterOperationalCredentialsServer
{
    static Attribute = {
        NOCs: 0,
        Fabrics: 1,
        SupportedFabrics: 2,
        CommissionedFabrics: 3,
        TrustedRootCertificates: 4,
        CurrentFabricIndex: 5,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandAttestationRequest = TlvObject({
        attestationNonce: TlvField(0,TlvByteString),
    })

    static TemplateCommandAttestationRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.AttestationNonce },
        ]
    }

    static MapCommandAttestationRequest = new Map([
        [0, 'attestationNonce'],
    ])

    static SchemaCommandAttestationResponse = TlvObject({
        attestationElements: TlvField(0,TlvByteString),
        signature: TlvField(1,TlvByteString),
    })

    static TemplateCommandAttestationResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.AttestationElements },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.Signature },
        ]
    }

    static MapCommandAttestationResponse = new Map([
        [0, 'attestationElements'],
        [1, 'signature'],
    ])

    static SchemaCommandCertificateChainRequest = TlvObject({
        certificateType: TlvField(0,TlvUInt8),
    })

    static TemplateCommandCertificateChainRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.CertificateType },
        ]
    }

    static MapCommandCertificateChainRequest = new Map([
        [0, 'certificateType'],
    ])

    static SchemaCommandCertificateChainResponse = TlvObject({
        certificate: TlvField(0,TlvByteString),
    })

    static TemplateCommandCertificateChainResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.Certificate },
        ]
    }

    static MapCommandCertificateChainResponse = new Map([
        [0, 'certificate'],
    ])

    static SchemaCommandCSRRequest = TlvObject({
        CSRNonce: TlvField(0,TlvByteString),
        isForUpdateNOC: TlvField(1,Tlvbool),
    })

    static TemplateCommandCSRRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.CSRNonce },
          { 'tag': 1, 'type': 'bool', 'value': params.IsForUpdateNOC },
        ]
    }

    static MapCommandCSRRequest = new Map([
        [0, 'CSRNonce'],
        [1, 'isForUpdateNOC'],
    ])

    static SchemaCommandCSRResponse = TlvObject({
        NOCSRElements: TlvField(0,TlvByteString),
        attestationSignature: TlvField(1,TlvByteString),
    })

    static TemplateCommandCSRResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.NOCSRElements },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.AttestationSignature },
        ]
    }

    static MapCommandCSRResponse = new Map([
        [0, 'NOCSRElements'],
        [1, 'attestationSignature'],
    ])

    static SchemaCommandAddNOC = TlvObject({
        NOCValue: TlvField(0,TlvByteString),
        ICACValue: TlvField(1,TlvByteString),
        IPKValue: TlvField(2,TlvByteString),
        caseAdminSubject: TlvField(3,TlvUInt64),
        adminVendorId: TlvField(4,TlvUInt16),
    })

    static TemplateCommandAddNOC = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.NOCValue },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.ICACValue },
          { 'tag': 2, 'type': 'chip::ByteSpan', 'value': params.IPKValue },
          { 'tag': 3, 'type': 'uint64_t', 'value': params.CaseAdminSubject },
          { 'tag': 4, 'type': 'chip::VendorId', 'value': params.AdminVendorId },
        ]
    }

    static MapCommandAddNOC = new Map([
        [0, 'NOCValue'],
        [1, 'ICACValue'],
        [2, 'IPKValue'],
        [3, 'caseAdminSubject'],
        [4, 'adminVendorId'],
    ])

    static SchemaCommandUpdateNOC = TlvObject({
        NOCValue: TlvField(0,TlvByteString),
        ICACValue: TlvField(1,TlvByteString),
    })

    static TemplateCommandUpdateNOC = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.NOCValue },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.ICACValue },
        ]
    }

    static MapCommandUpdateNOC = new Map([
        [0, 'NOCValue'],
        [1, 'ICACValue'],
    ])

    static SchemaCommandNOCResponse = TlvObject({
        statusCode: TlvField(0,TlvUInt8),
        fabricIndex: TlvField(1,TlvUInt64),
        debugText: TlvField(2,TlvString),
    })

    static TemplateCommandNOCResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StatusCode },
          { 'tag': 1, 'type': 'chip::FabricIndex', 'value': params.FabricIndex },
          { 'tag': 2, 'type': 'chip::CharSpan', 'value': params.DebugText },
        ]
    }

    static MapCommandNOCResponse = new Map([
        [0, 'statusCode'],
        [1, 'fabricIndex'],
        [2, 'debugText'],
    ])

    static SchemaCommandUpdateFabricLabel = TlvObject({
        label: TlvField(0,TlvString),
    })

    static TemplateCommandUpdateFabricLabel = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::CharSpan', 'value': params.Label },
        ]
    }

    static MapCommandUpdateFabricLabel = new Map([
        [0, 'label'],
    ])

    static SchemaCommandRemoveFabric = TlvObject({
        fabricIndex: TlvField(0,TlvUInt64),
    })

    static TemplateCommandRemoveFabric = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::FabricIndex', 'value': params.FabricIndex },
        ]
    }

    static MapCommandRemoveFabric = new Map([
        [0, 'fabricIndex'],
    ])

    static SchemaCommandAddTrustedRootCertificate = TlvObject({
        rootCertificate: TlvField(0,TlvByteString),
    })

    static TemplateCommandAddTrustedRootCertificate = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.RootCertificate },
        ]
    }

    static MapCommandAddTrustedRootCertificate = new Map([
        [0, 'rootCertificate'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterOperationalCredentialsServer.Attribute.NOCs
                "name": "NOCs",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterOperationalCredentialsServer.Attribute.Fabrics
                "name": "Fabrics",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterOperationalCredentialsServer.Attribute.SupportedFabrics
                "name": "SupportedFabrics",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterOperationalCredentialsServer.Attribute.CommissionedFabrics
                "name": "CommissionedFabrics",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterOperationalCredentialsServer.Attribute.TrustedRootCertificates
                "name": "TrustedRootCertificates",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterOperationalCredentialsServer.Attribute.CurrentFabricIndex
                "name": "CurrentFabricIndex",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterOperationalCredentialsServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterOperationalCredentialsServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterOperationalCredentialsServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterOperationalCredentialsServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterOperationalCredentialsServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterOperationalCredentials.Command.AttestationRequest: this.onAttestationRequest(msg, path); break;
            case ClusterOperationalCredentials.Command.AttestationResponse: this.onAttestationResponse(msg, path); break;
            case ClusterOperationalCredentials.Command.CertificateChainRequest: this.onCertificateChainRequest(msg, path); break;
            case ClusterOperationalCredentials.Command.CertificateChainResponse: this.onCertificateChainResponse(msg, path); break;
            case ClusterOperationalCredentials.Command.CSRRequest: this.onCSRRequest(msg, path); break;
            case ClusterOperationalCredentials.Command.CSRResponse: this.onCSRResponse(msg, path); break;
            case ClusterOperationalCredentials.Command.AddNOC: this.onAddNOC(msg, path); break;
            case ClusterOperationalCredentials.Command.UpdateNOC: this.onUpdateNOC(msg, path); break;
            case ClusterOperationalCredentials.Command.NOCResponse: this.onNOCResponse(msg, path); break;
            case ClusterOperationalCredentials.Command.UpdateFabricLabel: this.onUpdateFabricLabel(msg, path); break;
            case ClusterOperationalCredentials.Command.RemoveFabric: this.onRemoveFabric(msg, path); break;
            case ClusterOperationalCredentials.Command.AddTrustedRootCertificate: this.onAddTrustedRootCertificate(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onAttestationRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onAttestationRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAttestationResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onAttestationResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCertificateChainRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onCertificateChainRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCertificateChainResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onCertificateChainResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCSRRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onCSRRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onCSRResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onCSRResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddNOC(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddNOC")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onUpdateNOC(msg, commandPath)
    {
        console.log(this.constructor.name+".onUpdateNOC")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onNOCResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onNOCResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onUpdateFabricLabel(msg, commandPath)
    {
        console.log(this.constructor.name+".onUpdateFabricLabel")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRemoveFabric(msg, commandPath)
    {
        console.log(this.constructor.name+".onRemoveFabric")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onAddTrustedRootCertificate(msg, commandPath)
    {
        console.log(this.constructor.name+".onAddTrustedRootCertificate")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterGroupKeyManagement
 */
class ClusterGroupKeyManagement
{
    static CLUSTER_NAME = 'GROUP_KEY_MANAGEMENT_CLUSTER'
    static CLUSTER_ID = 0x003F

    static Command = {
        KeySetWrite: 0,
        KeySetRead: 1,
        KeySetReadResponse: 2,
        KeySetRemove: 3,
        KeySetReadAllIndices: 4,
        KeySetReadAllIndicesResponse: 5,
    }
}

/**
 * ClusterGroupKeyManagementServer
 */
class ClusterGroupKeyManagementServer
{
    static Attribute = {
        GroupKeyMap: 0,
        GroupTable: 1,
        MaxGroupsPerFabric: 2,
        MaxGroupKeysPerFabric: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandKeySetWrite = TlvObject({
        groupKeySet: TlvField(0,TlvObject),
    })

    static TemplateCommandKeySetWrite = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.GroupKeySet
        ]
    }

    static MapCommandKeySetWrite = new Map([
        [0, 'groupKeySet'],
    ])

    static SchemaCommandKeySetRead = TlvObject({
        groupKeySetID: TlvField(0,TlvUInt16),
    })

    static TemplateCommandKeySetRead = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.GroupKeySetID },
        ]
    }

    static MapCommandKeySetRead = new Map([
        [0, 'groupKeySetID'],
    ])

    static SchemaCommandKeySetReadResponse = TlvObject({
        groupKeySet: TlvField(0,TlvObject),
    })

    static TemplateCommandKeySetReadResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.GroupKeySet
        ]
    }

    static MapCommandKeySetReadResponse = new Map([
        [0, 'groupKeySet'],
    ])

    static SchemaCommandKeySetRemove = TlvObject({
        groupKeySetID: TlvField(0,TlvUInt16),
    })

    static TemplateCommandKeySetRemove = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.GroupKeySetID },
        ]
    }

    static MapCommandKeySetRemove = new Map([
        [0, 'groupKeySetID'],
    ])

    static SchemaCommandKeySetReadAllIndices = TlvObject({
        groupKeySetIDs: TlvField(0,TlvArray),
    })

    static TemplateCommandKeySetReadAllIndices = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.GroupKeySetIDs
        ]
    }

    static MapCommandKeySetReadAllIndices = new Map([
        [0, 'groupKeySetIDs'],
    ])

    static SchemaCommandKeySetReadAllIndicesResponse = TlvObject({
        groupKeySetIDs: TlvField(0,TlvArray),
    })

    static TemplateCommandKeySetReadAllIndicesResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.GroupKeySetIDs
        ]
    }

    static MapCommandKeySetReadAllIndicesResponse = new Map([
        [0, 'groupKeySetIDs'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterGroupKeyManagementServer.Attribute.GroupKeyMap
                "name": "GroupKeyMap",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterGroupKeyManagementServer.Attribute.GroupTable
                "name": "GroupTable",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterGroupKeyManagementServer.Attribute.MaxGroupsPerFabric
                "name": "MaxGroupsPerFabric",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterGroupKeyManagementServer.Attribute.MaxGroupKeysPerFabric
                "name": "MaxGroupKeysPerFabric",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterGroupKeyManagementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterGroupKeyManagementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterGroupKeyManagementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterGroupKeyManagementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterGroupKeyManagementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterGroupKeyManagement.Command.KeySetWrite: this.onKeySetWrite(msg, path); break;
            case ClusterGroupKeyManagement.Command.KeySetRead: this.onKeySetRead(msg, path); break;
            case ClusterGroupKeyManagement.Command.KeySetReadResponse: this.onKeySetReadResponse(msg, path); break;
            case ClusterGroupKeyManagement.Command.KeySetRemove: this.onKeySetRemove(msg, path); break;
            case ClusterGroupKeyManagement.Command.KeySetReadAllIndices: this.onKeySetReadAllIndices(msg, path); break;
            case ClusterGroupKeyManagement.Command.KeySetReadAllIndicesResponse: this.onKeySetReadAllIndicesResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onKeySetWrite(msg, commandPath)
    {
        console.log(this.constructor.name+".onKeySetWrite")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onKeySetRead(msg, commandPath)
    {
        console.log(this.constructor.name+".onKeySetRead")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onKeySetReadResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onKeySetReadResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onKeySetRemove(msg, commandPath)
    {
        console.log(this.constructor.name+".onKeySetRemove")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onKeySetReadAllIndices(msg, commandPath)
    {
        console.log(this.constructor.name+".onKeySetReadAllIndices")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onKeySetReadAllIndicesResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onKeySetReadAllIndicesResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterFixedLabel
 */
class ClusterFixedLabel
{
    static CLUSTER_NAME = 'FIXED_LABEL_CLUSTER'
    static CLUSTER_ID = 0x0040

    static Command = {
    }
}

/**
 * ClusterFixedLabelServer
 */
class ClusterFixedLabelServer
{
    static Attribute = {
        LabelList: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterFixedLabelServer.Attribute.LabelList
                "name": "LabelList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterFixedLabelServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterFixedLabelServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterFixedLabelServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterFixedLabelServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterFixedLabelServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterUserLabel
 */
class ClusterUserLabel
{
    static CLUSTER_NAME = 'USER_LABEL_CLUSTER'
    static CLUSTER_ID = 0x0041

    static Command = {
    }
}

/**
 * ClusterUserLabelServer
 */
class ClusterUserLabelServer
{
    static Attribute = {
        LabelList: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterUserLabelServer.Attribute.LabelList
                "name": "LabelList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterUserLabelServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterUserLabelServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterUserLabelServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterUserLabelServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterUserLabelServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterBooleanState
 */
class ClusterBooleanState
{
    static CLUSTER_NAME = 'BOOLEAN_STATE_CLUSTER'
    static CLUSTER_ID = 0x0045

    static Command = {
    }
}

/**
 * ClusterBooleanStateServer
 */
class ClusterBooleanStateServer
{
    static Attribute = {
        StateValue: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterBooleanStateServer.Attribute.StateValue
                "name": "StateValue",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterBooleanStateServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterBooleanStateServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterBooleanStateServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterBooleanStateServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterBooleanStateServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterModeSelect
 */
class ClusterModeSelect
{
    static CLUSTER_NAME = 'MODE_SELECT_CLUSTER'
    static CLUSTER_ID = 0x0050

    static Command = {
        ChangeToMode: 0,
    }
}

/**
 * ClusterModeSelectServer
 */
class ClusterModeSelectServer
{
    static Attribute = {
        Description: 0,
        StandardNamespace: 1,
        SupportedModes: 2,
        CurrentMode: 3,
        StartUpMode: 4,
        OnMode: 5,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandChangeToMode = TlvObject({
        newMode: TlvField(0,TlvUInt8),
    })

    static TemplateCommandChangeToMode = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NewMode },
        ]
    }

    static MapCommandChangeToMode = new Map([
        [0, 'newMode'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterModeSelectServer.Attribute.Description
                "name": "Description",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterModeSelectServer.Attribute.StandardNamespace
                "name": "StandardNamespace",
                "type": "enum16",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterModeSelectServer.Attribute.SupportedModes
                "name": "SupportedModes",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterModeSelectServer.Attribute.CurrentMode
                "name": "CurrentMode",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterModeSelectServer.Attribute.StartUpMode
                "name": "StartUpMode",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterModeSelectServer.Attribute.OnMode
                "name": "OnMode",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterModeSelectServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterModeSelectServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterModeSelectServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterModeSelectServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterModeSelectServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterModeSelect.Command.ChangeToMode: this.onChangeToMode(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onChangeToMode(msg, commandPath)
    {
        console.log(this.constructor.name+".onChangeToMode")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterDoorLock
 */
class ClusterDoorLock
{
    static CLUSTER_NAME = 'DOOR_LOCK_CLUSTER'
    static CLUSTER_ID = 0x0101

    static Command = {
        LockDoor: 0,
        UnlockDoor: 1,
        UnlockWithTimeout: 3,
        SetWeekDaySchedule: 11,
        GetWeekDaySchedule: 12,
        GetWeekDayScheduleResponse: 12,
        ClearWeekDaySchedule: 13,
        SetYearDaySchedule: 14,
        GetYearDaySchedule: 15,
        GetYearDayScheduleResponse: 15,
        ClearYearDaySchedule: 16,
        SetHolidaySchedule: 17,
        GetHolidaySchedule: 18,
        GetHolidayScheduleResponse: 18,
        ClearHolidaySchedule: 19,
        SetUser: 26,
        GetUser: 27,
        GetUserResponse: 28,
        ClearUser: 29,
        SetCredential: 34,
        SetCredentialResponse: 35,
        GetCredentialStatus: 36,
        GetCredentialStatusResponse: 37,
        ClearCredential: 38,
    }
}

/**
 * ClusterDoorLockServer
 */
class ClusterDoorLockServer
{
    static Attribute = {
        LockState: 0,
        LockType: 1,
        ActuatorEnabled: 2,
        DoorState: 3,
        DoorOpenEvents: 4,
        DoorClosedEvents: 5,
        OpenPeriod: 6,
        NumberOfTotalUsersSupported: 17,
        NumberOfPINUsersSupported: 18,
        NumberOfRFIDUsersSupported: 19,
        NumberOfWeekDaySchedulesSupportedPerUser: 20,
        NumberOfYearDaySchedulesSupportedPerUser: 21,
        NumberOfHolidaySchedulesSupported: 22,
        MaxPINCodeLength: 23,
        MinPINCodeLength: 24,
        MaxRFIDCodeLength: 25,
        MinRFIDCodeLength: 26,
        CredentialRulesSupport: 27,
        NumberOfCredentialsSupportedPerUser: 28,
        Language: 33,
        LEDSettings: 34,
        AutoRelockTime: 35,
        SoundVolume: 36,
        OperatingMode: 37,
        SupportedOperatingModes: 38,
        DefaultConfigurationRegister: 39,
        EnableLocalProgramming: 40,
        EnableOneTouchLocking: 41,
        EnableInsideStatusLED: 42,
        EnablePrivacyModeButton: 43,
        LocalProgrammingFeatures: 44,
        WrongCodeEntryLimit: 48,
        UserCodeTemporaryDisableTime: 49,
        SendPINOverTheAir: 50,
        RequirePINforRemoteOperation: 51,
        ExpiringUserTimeout: 53,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandLockDoor = TlvObject({
        pinCode: TlvField(0,TlvByteString),
    })

    static TemplateCommandLockDoor = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.PinCode },
        ]
    }

    static MapCommandLockDoor = new Map([
        [0, 'pinCode'],
    ])

    static SchemaCommandUnlockDoor = TlvObject({
        pinCode: TlvField(0,TlvByteString),
    })

    static TemplateCommandUnlockDoor = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::ByteSpan', 'value': params.PinCode },
        ]
    }

    static MapCommandUnlockDoor = new Map([
        [0, 'pinCode'],
    ])

    static SchemaCommandUnlockWithTimeout = TlvObject({
        timeout: TlvField(0,TlvUInt16),
        pinCode: TlvField(1,TlvByteString),
    })

    static TemplateCommandUnlockWithTimeout = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.Timeout },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.PinCode },
        ]
    }

    static MapCommandUnlockWithTimeout = new Map([
        [0, 'timeout'],
        [1, 'pinCode'],
    ])

    static SchemaCommandSetWeekDaySchedule = TlvObject({
        weekDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
        daysMask: TlvField(2,TlvUInt8),
        startHour: TlvField(3,TlvUInt8),
        startMinute: TlvField(4,TlvUInt8),
        endHour: TlvField(5,TlvUInt8),
        endMinute: TlvField(6,TlvUInt8),
    })

    static TemplateCommandSetWeekDaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.WeekDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.DaysMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.StartHour },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.StartMinute },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.EndHour },
          { 'tag': 6, 'type': 'uint8_t', 'value': params.EndMinute },
        ]
    }

    static MapCommandSetWeekDaySchedule = new Map([
        [0, 'weekDayIndex'],
        [1, 'userIndex'],
        [2, 'daysMask'],
        [3, 'startHour'],
        [4, 'startMinute'],
        [5, 'endHour'],
        [6, 'endMinute'],
    ])

    static SchemaCommandGetWeekDaySchedule = TlvObject({
        weekDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
    })

    static TemplateCommandGetWeekDaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.WeekDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
        ]
    }

    static MapCommandGetWeekDaySchedule = new Map([
        [0, 'weekDayIndex'],
        [1, 'userIndex'],
    ])

    static SchemaCommandGetWeekDayScheduleResponse = TlvObject({
        weekDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
        status: TlvField(2,TlvUInt8),
        daysMask: TlvField(3,TlvUInt8),
        startHour: TlvField(4,TlvUInt8),
        startMinute: TlvField(5,TlvUInt8),
        endHour: TlvField(6,TlvUInt8),
        endMinute: TlvField(7,TlvUInt8),
    })

    static TemplateCommandGetWeekDayScheduleResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.WeekDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.DaysMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.StartHour },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.StartMinute },
          { 'tag': 6, 'type': 'uint8_t', 'value': params.EndHour },
          { 'tag': 7, 'type': 'uint8_t', 'value': params.EndMinute },
        ]
    }

    static MapCommandGetWeekDayScheduleResponse = new Map([
        [0, 'weekDayIndex'],
        [1, 'userIndex'],
        [2, 'status'],
        [3, 'daysMask'],
        [4, 'startHour'],
        [5, 'startMinute'],
        [6, 'endHour'],
        [7, 'endMinute'],
    ])

    static SchemaCommandClearWeekDaySchedule = TlvObject({
        weekDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
    })

    static TemplateCommandClearWeekDaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.WeekDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
        ]
    }

    static MapCommandClearWeekDaySchedule = new Map([
        [0, 'weekDayIndex'],
        [1, 'userIndex'],
    ])

    static SchemaCommandSetYearDaySchedule = TlvObject({
        yearDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
        localStartTime: TlvField(2,TlvUInt32),
        localEndTime: TlvField(3,TlvUInt32),
    })

    static TemplateCommandSetYearDaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.YearDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.LocalStartTime },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.LocalEndTime },
        ]
    }

    static MapCommandSetYearDaySchedule = new Map([
        [0, 'yearDayIndex'],
        [1, 'userIndex'],
        [2, 'localStartTime'],
        [3, 'localEndTime'],
    ])

    static SchemaCommandGetYearDaySchedule = TlvObject({
        yearDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
    })

    static TemplateCommandGetYearDaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.YearDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
        ]
    }

    static MapCommandGetYearDaySchedule = new Map([
        [0, 'yearDayIndex'],
        [1, 'userIndex'],
    ])

    static SchemaCommandGetYearDayScheduleResponse = TlvObject({
        yearDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
        status: TlvField(2,TlvUInt8),
        localStartTime: TlvField(3,TlvUInt32),
        localEndTime: TlvField(4,TlvUInt32),
    })

    static TemplateCommandGetYearDayScheduleResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.YearDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.LocalStartTime },
          { 'tag': 4, 'type': 'uint32_t', 'value': params.LocalEndTime },
        ]
    }

    static MapCommandGetYearDayScheduleResponse = new Map([
        [0, 'yearDayIndex'],
        [1, 'userIndex'],
        [2, 'status'],
        [3, 'localStartTime'],
        [4, 'localEndTime'],
    ])

    static SchemaCommandClearYearDaySchedule = TlvObject({
        yearDayIndex: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
    })

    static TemplateCommandClearYearDaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.YearDayIndex },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
        ]
    }

    static MapCommandClearYearDaySchedule = new Map([
        [0, 'yearDayIndex'],
        [1, 'userIndex'],
    ])

    static SchemaCommandSetHolidaySchedule = TlvObject({
        holidayIndex: TlvField(0,TlvUInt8),
        localStartTime: TlvField(1,TlvUInt32),
        localEndTime: TlvField(2,TlvUInt32),
        operatingMode: TlvField(3,TlvUInt8),
    })

    static TemplateCommandSetHolidaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.HolidayIndex },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.LocalStartTime },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.LocalEndTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OperatingMode },
        ]
    }

    static MapCommandSetHolidaySchedule = new Map([
        [0, 'holidayIndex'],
        [1, 'localStartTime'],
        [2, 'localEndTime'],
        [3, 'operatingMode'],
    ])

    static SchemaCommandGetHolidaySchedule = TlvObject({
        holidayIndex: TlvField(0,TlvUInt8),
    })

    static TemplateCommandGetHolidaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.HolidayIndex },
        ]
    }

    static MapCommandGetHolidaySchedule = new Map([
        [0, 'holidayIndex'],
    ])

    static SchemaCommandGetHolidayScheduleResponse = TlvObject({
        holidayIndex: TlvField(0,TlvUInt8),
        status: TlvField(1,TlvUInt8),
        localStartTime: TlvField(2,TlvUInt32),
        localEndTime: TlvField(3,TlvUInt32),
        operatingMode: TlvField(4,TlvUInt8),
    })

    static TemplateCommandGetHolidayScheduleResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.HolidayIndex },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.LocalStartTime },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.LocalEndTime },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OperatingMode },
        ]
    }

    static MapCommandGetHolidayScheduleResponse = new Map([
        [0, 'holidayIndex'],
        [1, 'status'],
        [2, 'localStartTime'],
        [3, 'localEndTime'],
        [4, 'operatingMode'],
    ])

    static SchemaCommandClearHolidaySchedule = TlvObject({
        holidayIndex: TlvField(0,TlvUInt8),
    })

    static TemplateCommandClearHolidaySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.HolidayIndex },
        ]
    }

    static MapCommandClearHolidaySchedule = new Map([
        [0, 'holidayIndex'],
    ])

    static SchemaCommandSetUser = TlvObject({
        operationType: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
        userName: TlvField(2,TlvString),
        userUniqueId: TlvField(3,TlvUInt32),
        userStatus: TlvField(4,TlvUInt8),
        userType: TlvField(5,TlvUInt8),
        credentialRule: TlvField(6,TlvUInt8),
    })

    static TemplateCommandSetUser = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.OperationType },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'chip::CharSpan', 'value': params.UserName },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.UserUniqueId },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.UserStatus },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.UserType },
          { 'tag': 6, 'type': 'uint8_t', 'value': params.CredentialRule },
        ]
    }

    static MapCommandSetUser = new Map([
        [0, 'operationType'],
        [1, 'userIndex'],
        [2, 'userName'],
        [3, 'userUniqueId'],
        [4, 'userStatus'],
        [5, 'userType'],
        [6, 'credentialRule'],
    ])

    static SchemaCommandGetUser = TlvObject({
        userIndex: TlvField(0,TlvUInt16),
    })

    static TemplateCommandGetUser = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.UserIndex },
        ]
    }

    static MapCommandGetUser = new Map([
        [0, 'userIndex'],
    ])

    static SchemaCommandGetUserResponse = TlvObject({
        userIndex: TlvField(0,TlvUInt16),
        userName: TlvField(1,TlvString),
        userUniqueId: TlvField(2,TlvUInt32),
        userStatus: TlvField(3,TlvUInt8),
        userType: TlvField(4,TlvUInt8),
        credentialRule: TlvField(5,TlvUInt8),
        credentials: TlvField(6,TlvArray),
        creatorFabricIndex: TlvField(7,TlvUInt64),
        lastModifiedFabricIndex: TlvField(8,TlvUInt64),
        nextUserIndex: TlvField(9,TlvUInt16),
    })

    static TemplateCommandGetUserResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.UserName },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.UserUniqueId },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.UserStatus },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.UserType },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.CredentialRule },
          { 'tag': 6, 'type': 'array', 'value': [] }, // params.Credentials
          { 'tag': 7, 'type': 'chip::FabricIndex', 'value': params.CreatorFabricIndex },
          { 'tag': 8, 'type': 'chip::FabricIndex', 'value': params.LastModifiedFabricIndex },
          { 'tag': 9, 'type': 'uint16_t', 'value': params.NextUserIndex },
        ]
    }

    static MapCommandGetUserResponse = new Map([
        [0, 'userIndex'],
        [1, 'userName'],
        [2, 'userUniqueId'],
        [3, 'userStatus'],
        [4, 'userType'],
        [5, 'credentialRule'],
        [6, 'credentials'],
        [7, 'creatorFabricIndex'],
        [8, 'lastModifiedFabricIndex'],
        [9, 'nextUserIndex'],
    ])

    static SchemaCommandClearUser = TlvObject({
        userIndex: TlvField(0,TlvUInt16),
    })

    static TemplateCommandClearUser = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.UserIndex },
        ]
    }

    static MapCommandClearUser = new Map([
        [0, 'userIndex'],
    ])

    static SchemaCommandSetCredential = TlvObject({
        operationType: TlvField(0,TlvUInt8),
        credential: TlvField(1,TlvObject),
        credentialData: TlvField(2,TlvByteString),
        userIndex: TlvField(3,TlvUInt16),
        userStatus: TlvField(4,TlvUInt8),
        userType: TlvField(5,TlvUInt8),
    })

    static TemplateCommandSetCredential = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.OperationType },
          { 'tag': 1, 'type': 'struct', 'value': [] }, // params.Credential
          { 'tag': 2, 'type': 'chip::ByteSpan', 'value': params.CredentialData },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.UserStatus },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.UserType },
        ]
    }

    static MapCommandSetCredential = new Map([
        [0, 'operationType'],
        [1, 'credential'],
        [2, 'credentialData'],
        [3, 'userIndex'],
        [4, 'userStatus'],
        [5, 'userType'],
    ])

    static SchemaCommandSetCredentialResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        userIndex: TlvField(1,TlvUInt16),
        nextCredentialIndex: TlvField(2,TlvUInt16),
    })

    static TemplateCommandSetCredentialResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.NextCredentialIndex },
        ]
    }

    static MapCommandSetCredentialResponse = new Map([
        [0, 'status'],
        [1, 'userIndex'],
        [2, 'nextCredentialIndex'],
    ])

    static SchemaCommandGetCredentialStatus = TlvObject({
        credential: TlvField(0,TlvObject),
    })

    static TemplateCommandGetCredentialStatus = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Credential
        ]
    }

    static MapCommandGetCredentialStatus = new Map([
        [0, 'credential'],
    ])

    static SchemaCommandGetCredentialStatusResponse = TlvObject({
        credentialExists: TlvField(0,Tlvbool),
        userIndex: TlvField(1,TlvUInt16),
        creatorFabricIndex: TlvField(2,TlvUInt64),
        lastModifiedFabricIndex: TlvField(3,TlvUInt64),
        nextCredentialIndex: TlvField(4,TlvUInt16),
    })

    static TemplateCommandGetCredentialStatusResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.CredentialExists },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.UserIndex },
          { 'tag': 2, 'type': 'chip::FabricIndex', 'value': params.CreatorFabricIndex },
          { 'tag': 3, 'type': 'chip::FabricIndex', 'value': params.LastModifiedFabricIndex },
          { 'tag': 4, 'type': 'uint16_t', 'value': params.NextCredentialIndex },
        ]
    }

    static MapCommandGetCredentialStatusResponse = new Map([
        [0, 'credentialExists'],
        [1, 'userIndex'],
        [2, 'creatorFabricIndex'],
        [3, 'lastModifiedFabricIndex'],
        [4, 'nextCredentialIndex'],
    ])

    static SchemaCommandClearCredential = TlvObject({
        credential: TlvField(0,TlvObject),
    })

    static TemplateCommandClearCredential = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Credential
        ]
    }

    static MapCommandClearCredential = new Map([
        [0, 'credential'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterDoorLockServer.Attribute.LockState
                "name": "LockState",
                "type": "DlLockState",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterDoorLockServer.Attribute.LockType
                "name": "LockType",
                "type": "DlLockType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterDoorLockServer.Attribute.ActuatorEnabled
                "name": "ActuatorEnabled",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterDoorLockServer.Attribute.DoorState
                "name": "DoorState",
                "type": "DlDoorState",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterDoorLockServer.Attribute.DoorOpenEvents
                "name": "DoorOpenEvents",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterDoorLockServer.Attribute.DoorClosedEvents
                "name": "DoorClosedEvents",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterDoorLockServer.Attribute.OpenPeriod
                "name": "OpenPeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterDoorLockServer.Attribute.NumberOfTotalUsersSupported
                "name": "NumberOfTotalUsersSupported",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterDoorLockServer.Attribute.NumberOfPINUsersSupported
                "name": "NumberOfPINUsersSupported",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterDoorLockServer.Attribute.NumberOfRFIDUsersSupported
                "name": "NumberOfRFIDUsersSupported",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterDoorLockServer.Attribute.NumberOfWeekDaySchedulesSupportedPerUser
                "name": "NumberOfWeekDaySchedulesSupportedPerUser",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterDoorLockServer.Attribute.NumberOfYearDaySchedulesSupportedPerUser
                "name": "NumberOfYearDaySchedulesSupportedPerUser",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterDoorLockServer.Attribute.NumberOfHolidaySchedulesSupported
                "name": "NumberOfHolidaySchedulesSupported",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterDoorLockServer.Attribute.MaxPINCodeLength
                "name": "MaxPINCodeLength",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            24: { // ClusterDoorLockServer.Attribute.MinPINCodeLength
                "name": "MinPINCodeLength",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            25: { // ClusterDoorLockServer.Attribute.MaxRFIDCodeLength
                "name": "MaxRFIDCodeLength",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterDoorLockServer.Attribute.MinRFIDCodeLength
                "name": "MinRFIDCodeLength",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            27: { // ClusterDoorLockServer.Attribute.CredentialRulesSupport
                "name": "CredentialRulesSupport",
                "type": "DlCredentialRuleMask",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            28: { // ClusterDoorLockServer.Attribute.NumberOfCredentialsSupportedPerUser
                "name": "NumberOfCredentialsSupportedPerUser",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterDoorLockServer.Attribute.Language
                "name": "Language",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            34: { // ClusterDoorLockServer.Attribute.LEDSettings
                "name": "LEDSettings",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            35: { // ClusterDoorLockServer.Attribute.AutoRelockTime
                "name": "AutoRelockTime",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            36: { // ClusterDoorLockServer.Attribute.SoundVolume
                "name": "SoundVolume",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            37: { // ClusterDoorLockServer.Attribute.OperatingMode
                "name": "OperatingMode",
                "type": "DlOperatingMode",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            38: { // ClusterDoorLockServer.Attribute.SupportedOperatingModes
                "name": "SupportedOperatingModes",
                "type": "DlSupportedOperatingModes",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            39: { // ClusterDoorLockServer.Attribute.DefaultConfigurationRegister
                "name": "DefaultConfigurationRegister",
                "type": "DlDefaultConfigurationRegister",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            40: { // ClusterDoorLockServer.Attribute.EnableLocalProgramming
                "name": "EnableLocalProgramming",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            41: { // ClusterDoorLockServer.Attribute.EnableOneTouchLocking
                "name": "EnableOneTouchLocking",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            42: { // ClusterDoorLockServer.Attribute.EnableInsideStatusLED
                "name": "EnableInsideStatusLED",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            43: { // ClusterDoorLockServer.Attribute.EnablePrivacyModeButton
                "name": "EnablePrivacyModeButton",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            44: { // ClusterDoorLockServer.Attribute.LocalProgrammingFeatures
                "name": "LocalProgrammingFeatures",
                "type": "DlLocalProgrammingFeatures",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            48: { // ClusterDoorLockServer.Attribute.WrongCodeEntryLimit
                "name": "WrongCodeEntryLimit",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            49: { // ClusterDoorLockServer.Attribute.UserCodeTemporaryDisableTime
                "name": "UserCodeTemporaryDisableTime",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            50: { // ClusterDoorLockServer.Attribute.SendPINOverTheAir
                "name": "SendPINOverTheAir",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            51: { // ClusterDoorLockServer.Attribute.RequirePINforRemoteOperation
                "name": "RequirePINforRemoteOperation",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            53: { // ClusterDoorLockServer.Attribute.ExpiringUserTimeout
                "name": "ExpiringUserTimeout",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterDoorLockServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterDoorLockServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterDoorLockServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterDoorLockServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterDoorLockServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterDoorLock.Command.LockDoor: this.onLockDoor(msg, path); break;
            case ClusterDoorLock.Command.UnlockDoor: this.onUnlockDoor(msg, path); break;
            case ClusterDoorLock.Command.UnlockWithTimeout: this.onUnlockWithTimeout(msg, path); break;
            case ClusterDoorLock.Command.SetWeekDaySchedule: this.onSetWeekDaySchedule(msg, path); break;
            case ClusterDoorLock.Command.GetWeekDaySchedule: this.onGetWeekDaySchedule(msg, path); break;
            case ClusterDoorLock.Command.GetWeekDayScheduleResponse: this.onGetWeekDayScheduleResponse(msg, path); break;
            case ClusterDoorLock.Command.ClearWeekDaySchedule: this.onClearWeekDaySchedule(msg, path); break;
            case ClusterDoorLock.Command.SetYearDaySchedule: this.onSetYearDaySchedule(msg, path); break;
            case ClusterDoorLock.Command.GetYearDaySchedule: this.onGetYearDaySchedule(msg, path); break;
            case ClusterDoorLock.Command.GetYearDayScheduleResponse: this.onGetYearDayScheduleResponse(msg, path); break;
            case ClusterDoorLock.Command.ClearYearDaySchedule: this.onClearYearDaySchedule(msg, path); break;
            case ClusterDoorLock.Command.SetHolidaySchedule: this.onSetHolidaySchedule(msg, path); break;
            case ClusterDoorLock.Command.GetHolidaySchedule: this.onGetHolidaySchedule(msg, path); break;
            case ClusterDoorLock.Command.GetHolidayScheduleResponse: this.onGetHolidayScheduleResponse(msg, path); break;
            case ClusterDoorLock.Command.ClearHolidaySchedule: this.onClearHolidaySchedule(msg, path); break;
            case ClusterDoorLock.Command.SetUser: this.onSetUser(msg, path); break;
            case ClusterDoorLock.Command.GetUser: this.onGetUser(msg, path); break;
            case ClusterDoorLock.Command.GetUserResponse: this.onGetUserResponse(msg, path); break;
            case ClusterDoorLock.Command.ClearUser: this.onClearUser(msg, path); break;
            case ClusterDoorLock.Command.SetCredential: this.onSetCredential(msg, path); break;
            case ClusterDoorLock.Command.SetCredentialResponse: this.onSetCredentialResponse(msg, path); break;
            case ClusterDoorLock.Command.GetCredentialStatus: this.onGetCredentialStatus(msg, path); break;
            case ClusterDoorLock.Command.GetCredentialStatusResponse: this.onGetCredentialStatusResponse(msg, path); break;
            case ClusterDoorLock.Command.ClearCredential: this.onClearCredential(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onLockDoor(msg, commandPath)
    {
        console.log(this.constructor.name+".onLockDoor")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onUnlockDoor(msg, commandPath)
    {
        console.log(this.constructor.name+".onUnlockDoor")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onUnlockWithTimeout(msg, commandPath)
    {
        console.log(this.constructor.name+".onUnlockWithTimeout")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetWeekDaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetWeekDaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetWeekDaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetWeekDaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetWeekDayScheduleResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetWeekDayScheduleResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onClearWeekDaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onClearWeekDaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetYearDaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetYearDaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetYearDaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetYearDaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetYearDayScheduleResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetYearDayScheduleResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onClearYearDaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onClearYearDaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetHolidaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetHolidaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetHolidaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetHolidaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetHolidayScheduleResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetHolidayScheduleResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onClearHolidaySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onClearHolidaySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetUser(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetUser")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetUser(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetUser")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetUserResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetUserResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onClearUser(msg, commandPath)
    {
        console.log(this.constructor.name+".onClearUser")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetCredential(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetCredential")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetCredentialResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetCredentialResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetCredentialStatus(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetCredentialStatus")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetCredentialStatusResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetCredentialStatusResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onClearCredential(msg, commandPath)
    {
        console.log(this.constructor.name+".onClearCredential")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterWindowCovering
 */
class ClusterWindowCovering
{
    static CLUSTER_NAME = 'WINDOW_COVERING_CLUSTER'
    static CLUSTER_ID = 0x0102

    static Command = {
        UpOrOpen: 0,
        DownOrClose: 1,
        StopMotion: 2,
        GoToLiftValue: 4,
        GoToLiftPercentage: 5,
        GoToTiltValue: 7,
        GoToTiltPercentage: 8,
    }
}

/**
 * ClusterWindowCoveringServer
 */
class ClusterWindowCoveringServer
{
    static Attribute = {
        Type: 0,
        PhysicalClosedLimitLift: 1,
        PhysicalClosedLimitTilt: 2,
        CurrentPositionLift: 3,
        CurrentPositionTilt: 4,
        NumberOfActuationsLift: 5,
        NumberOfActuationsTilt: 6,
        ConfigStatus: 7,
        CurrentPositionLiftPercentage: 8,
        CurrentPositionTiltPercentage: 9,
        OperationalStatus: 10,
        TargetPositionLiftPercent100ths: 11,
        TargetPositionTiltPercent100ths: 12,
        EndProductType: 13,
        CurrentPositionLiftPercent100ths: 14,
        CurrentPositionTiltPercent100ths: 15,
        InstalledOpenLimitLift: 16,
        InstalledClosedLimitLift: 17,
        InstalledOpenLimitTilt: 18,
        InstalledClosedLimitTilt: 19,
        Mode: 23,
        SafetyStatus: 26,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandUpOrOpen = TlvObject({
    })

    static TemplateCommandUpOrOpen = function(params) {
        return [
        ]
    }

    static MapCommandUpOrOpen = new Map([
    ])

    static SchemaCommandDownOrClose = TlvObject({
    })

    static TemplateCommandDownOrClose = function(params) {
        return [
        ]
    }

    static MapCommandDownOrClose = new Map([
    ])

    static SchemaCommandStopMotion = TlvObject({
    })

    static TemplateCommandStopMotion = function(params) {
        return [
        ]
    }

    static MapCommandStopMotion = new Map([
    ])

    static SchemaCommandGoToLiftValue = TlvObject({
        liftValue: TlvField(0,TlvUInt16),
    })

    static TemplateCommandGoToLiftValue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.LiftValue },
        ]
    }

    static MapCommandGoToLiftValue = new Map([
        [0, 'liftValue'],
    ])

    static SchemaCommandGoToLiftPercentage = TlvObject({
        liftPercent100thsValue: TlvField(0,Tlvchip::Percent100ths),
    })

    static TemplateCommandGoToLiftPercentage = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::Percent100ths', 'value': params.LiftPercent100thsValue },
        ]
    }

    static MapCommandGoToLiftPercentage = new Map([
        [0, 'liftPercent100thsValue'],
    ])

    static SchemaCommandGoToTiltValue = TlvObject({
        tiltValue: TlvField(0,TlvUInt16),
    })

    static TemplateCommandGoToTiltValue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.TiltValue },
        ]
    }

    static MapCommandGoToTiltValue = new Map([
        [0, 'tiltValue'],
    ])

    static SchemaCommandGoToTiltPercentage = TlvObject({
        tiltPercent100thsValue: TlvField(0,Tlvchip::Percent100ths),
    })

    static TemplateCommandGoToTiltPercentage = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::Percent100ths', 'value': params.TiltPercent100thsValue },
        ]
    }

    static MapCommandGoToTiltPercentage = new Map([
        [0, 'tiltPercent100thsValue'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterWindowCoveringServer.Attribute.Type
                "name": "Type",
                "type": "Type",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterWindowCoveringServer.Attribute.PhysicalClosedLimitLift
                "name": "PhysicalClosedLimitLift",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterWindowCoveringServer.Attribute.PhysicalClosedLimitTilt
                "name": "PhysicalClosedLimitTilt",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterWindowCoveringServer.Attribute.CurrentPositionLift
                "name": "CurrentPositionLift",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterWindowCoveringServer.Attribute.CurrentPositionTilt
                "name": "CurrentPositionTilt",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterWindowCoveringServer.Attribute.NumberOfActuationsLift
                "name": "NumberOfActuationsLift",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterWindowCoveringServer.Attribute.NumberOfActuationsTilt
                "name": "NumberOfActuationsTilt",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterWindowCoveringServer.Attribute.ConfigStatus
                "name": "ConfigStatus",
                "type": "ConfigStatus",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterWindowCoveringServer.Attribute.CurrentPositionLiftPercentage
                "name": "CurrentPositionLiftPercentage",
                "type": "Percent",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterWindowCoveringServer.Attribute.CurrentPositionTiltPercentage
                "name": "CurrentPositionTiltPercentage",
                "type": "Percent",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterWindowCoveringServer.Attribute.OperationalStatus
                "name": "OperationalStatus",
                "type": "OperationalStatus",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterWindowCoveringServer.Attribute.TargetPositionLiftPercent100ths
                "name": "TargetPositionLiftPercent100ths",
                "type": "Percent100ths",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterWindowCoveringServer.Attribute.TargetPositionTiltPercent100ths
                "name": "TargetPositionTiltPercent100ths",
                "type": "Percent100ths",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            13: { // ClusterWindowCoveringServer.Attribute.EndProductType
                "name": "EndProductType",
                "type": "EndProductType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            14: { // ClusterWindowCoveringServer.Attribute.CurrentPositionLiftPercent100ths
                "name": "CurrentPositionLiftPercent100ths",
                "type": "Percent100ths",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterWindowCoveringServer.Attribute.CurrentPositionTiltPercent100ths
                "name": "CurrentPositionTiltPercent100ths",
                "type": "Percent100ths",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterWindowCoveringServer.Attribute.InstalledOpenLimitLift
                "name": "InstalledOpenLimitLift",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterWindowCoveringServer.Attribute.InstalledClosedLimitLift
                "name": "InstalledClosedLimitLift",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterWindowCoveringServer.Attribute.InstalledOpenLimitTilt
                "name": "InstalledOpenLimitTilt",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterWindowCoveringServer.Attribute.InstalledClosedLimitTilt
                "name": "InstalledClosedLimitTilt",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterWindowCoveringServer.Attribute.Mode
                "name": "Mode",
                "type": "Mode",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterWindowCoveringServer.Attribute.SafetyStatus
                "name": "SafetyStatus",
                "type": "SafetyStatus",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterWindowCoveringServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterWindowCoveringServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterWindowCoveringServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterWindowCoveringServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterWindowCoveringServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterWindowCovering.Command.UpOrOpen: this.onUpOrOpen(msg, path); break;
            case ClusterWindowCovering.Command.DownOrClose: this.onDownOrClose(msg, path); break;
            case ClusterWindowCovering.Command.StopMotion: this.onStopMotion(msg, path); break;
            case ClusterWindowCovering.Command.GoToLiftValue: this.onGoToLiftValue(msg, path); break;
            case ClusterWindowCovering.Command.GoToLiftPercentage: this.onGoToLiftPercentage(msg, path); break;
            case ClusterWindowCovering.Command.GoToTiltValue: this.onGoToTiltValue(msg, path); break;
            case ClusterWindowCovering.Command.GoToTiltPercentage: this.onGoToTiltPercentage(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onUpOrOpen(msg, commandPath)
    {
        console.log(this.constructor.name+".onUpOrOpen")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onDownOrClose(msg, commandPath)
    {
        console.log(this.constructor.name+".onDownOrClose")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStopMotion(msg, commandPath)
    {
        console.log(this.constructor.name+".onStopMotion")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGoToLiftValue(msg, commandPath)
    {
        console.log(this.constructor.name+".onGoToLiftValue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGoToLiftPercentage(msg, commandPath)
    {
        console.log(this.constructor.name+".onGoToLiftPercentage")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGoToTiltValue(msg, commandPath)
    {
        console.log(this.constructor.name+".onGoToTiltValue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGoToTiltPercentage(msg, commandPath)
    {
        console.log(this.constructor.name+".onGoToTiltPercentage")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterBarrierControl
 */
class ClusterBarrierControl
{
    static CLUSTER_NAME = 'BARRIER_CONTROL_CLUSTER'
    static CLUSTER_ID = 0x0103

    static Command = {
        BarrierControlGoToPercent: 0,
        BarrierControlStop: 1,
    }
}

/**
 * ClusterBarrierControlServer
 */
class ClusterBarrierControlServer
{
    static Attribute = {
        BarrierMovingState: 1,
        BarrierSafetyStatus: 2,
        BarrierCapabilities: 3,
        BarrierOpenEvents: 4,
        BarrierCloseEvents: 5,
        BarrierCommandOpenEvents: 6,
        BarrierCommandCloseEvents: 7,
        BarrierOpenPeriod: 8,
        BarrierClosePeriod: 9,
        BarrierPosition: 10,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandBarrierControlGoToPercent = TlvObject({
        percentOpen: TlvField(0,TlvUInt8),
    })

    static TemplateCommandBarrierControlGoToPercent = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.PercentOpen },
        ]
    }

    static MapCommandBarrierControlGoToPercent = new Map([
        [0, 'percentOpen'],
    ])

    static SchemaCommandBarrierControlStop = TlvObject({
    })

    static TemplateCommandBarrierControlStop = function(params) {
        return [
        ]
    }

    static MapCommandBarrierControlStop = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            1: { // ClusterBarrierControlServer.Attribute.BarrierMovingState
                "name": "BarrierMovingState",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterBarrierControlServer.Attribute.BarrierSafetyStatus
                "name": "BarrierSafetyStatus",
                "type": "bitmap16",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterBarrierControlServer.Attribute.BarrierCapabilities
                "name": "BarrierCapabilities",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterBarrierControlServer.Attribute.BarrierOpenEvents
                "name": "BarrierOpenEvents",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterBarrierControlServer.Attribute.BarrierCloseEvents
                "name": "BarrierCloseEvents",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterBarrierControlServer.Attribute.BarrierCommandOpenEvents
                "name": "BarrierCommandOpenEvents",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterBarrierControlServer.Attribute.BarrierCommandCloseEvents
                "name": "BarrierCommandCloseEvents",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterBarrierControlServer.Attribute.BarrierOpenPeriod
                "name": "BarrierOpenPeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterBarrierControlServer.Attribute.BarrierClosePeriod
                "name": "BarrierClosePeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterBarrierControlServer.Attribute.BarrierPosition
                "name": "BarrierPosition",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterBarrierControlServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterBarrierControlServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterBarrierControlServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterBarrierControlServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterBarrierControlServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterBarrierControl.Command.BarrierControlGoToPercent: this.onBarrierControlGoToPercent(msg, path); break;
            case ClusterBarrierControl.Command.BarrierControlStop: this.onBarrierControlStop(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onBarrierControlGoToPercent(msg, commandPath)
    {
        console.log(this.constructor.name+".onBarrierControlGoToPercent")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onBarrierControlStop(msg, commandPath)
    {
        console.log(this.constructor.name+".onBarrierControlStop")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterPumpConfigurationAndControl
 */
class ClusterPumpConfigurationAndControl
{
    static CLUSTER_NAME = 'PUMP_CONFIGURATION_AND_CONTROL_CLUSTER'
    static CLUSTER_ID = 0x0200

    static Command = {
    }
}

/**
 * ClusterPumpConfigurationAndControlServer
 */
class ClusterPumpConfigurationAndControlServer
{
    static Attribute = {
        MaxPressure: 0,
        MaxSpeed: 1,
        MaxFlow: 2,
        MinConstPressure: 3,
        MaxConstPressure: 4,
        MinCompPressure: 5,
        MaxCompPressure: 6,
        MinConstSpeed: 7,
        MaxConstSpeed: 8,
        MinConstFlow: 9,
        MaxConstFlow: 10,
        MinConstTemp: 11,
        MaxConstTemp: 12,
        PumpStatus: 16,
        EffectiveOperationMode: 17,
        EffectiveControlMode: 18,
        Capacity: 19,
        Speed: 20,
        LifetimeRunningHours: 21,
        Power: 22,
        LifetimeEnergyConsumed: 23,
        OperationMode: 32,
        ControlMode: 33,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxPressure
                "name": "MaxPressure",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxSpeed
                "name": "MaxSpeed",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxFlow
                "name": "MaxFlow",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterPumpConfigurationAndControlServer.Attribute.MinConstPressure
                "name": "MinConstPressure",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxConstPressure
                "name": "MaxConstPressure",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterPumpConfigurationAndControlServer.Attribute.MinCompPressure
                "name": "MinCompPressure",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxCompPressure
                "name": "MaxCompPressure",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterPumpConfigurationAndControlServer.Attribute.MinConstSpeed
                "name": "MinConstSpeed",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxConstSpeed
                "name": "MaxConstSpeed",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterPumpConfigurationAndControlServer.Attribute.MinConstFlow
                "name": "MinConstFlow",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxConstFlow
                "name": "MaxConstFlow",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterPumpConfigurationAndControlServer.Attribute.MinConstTemp
                "name": "MinConstTemp",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterPumpConfigurationAndControlServer.Attribute.MaxConstTemp
                "name": "MaxConstTemp",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterPumpConfigurationAndControlServer.Attribute.PumpStatus
                "name": "PumpStatus",
                "type": "PumpStatus",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterPumpConfigurationAndControlServer.Attribute.EffectiveOperationMode
                "name": "EffectiveOperationMode",
                "type": "PumpOperationMode",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterPumpConfigurationAndControlServer.Attribute.EffectiveControlMode
                "name": "EffectiveControlMode",
                "type": "PumpControlMode",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterPumpConfigurationAndControlServer.Attribute.Capacity
                "name": "Capacity",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterPumpConfigurationAndControlServer.Attribute.Speed
                "name": "Speed",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterPumpConfigurationAndControlServer.Attribute.LifetimeRunningHours
                "name": "LifetimeRunningHours",
                "type": "int24u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterPumpConfigurationAndControlServer.Attribute.Power
                "name": "Power",
                "type": "int24u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterPumpConfigurationAndControlServer.Attribute.LifetimeEnergyConsumed
                "name": "LifetimeEnergyConsumed",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            32: { // ClusterPumpConfigurationAndControlServer.Attribute.OperationMode
                "name": "OperationMode",
                "type": "PumpOperationMode",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterPumpConfigurationAndControlServer.Attribute.ControlMode
                "name": "ControlMode",
                "type": "PumpControlMode",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterPumpConfigurationAndControlServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterPumpConfigurationAndControlServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterPumpConfigurationAndControlServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterPumpConfigurationAndControlServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterPumpConfigurationAndControlServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterThermostat
 */
class ClusterThermostat
{
    static CLUSTER_NAME = 'THERMOSTAT_CLUSTER'
    static CLUSTER_ID = 0x0201

    static Command = {
        SetpointRaiseLower: 0,
        GetWeeklyScheduleResponse: 0,
        SetWeeklySchedule: 1,
        GetWeeklySchedule: 2,
        ClearWeeklySchedule: 3,
    }
}

/**
 * ClusterThermostatServer
 */
class ClusterThermostatServer
{
    static Attribute = {
        LocalTemperature: 0,
        OutdoorTemperature: 1,
        Occupancy: 2,
        AbsMinHeatSetpointLimit: 3,
        AbsMaxHeatSetpointLimit: 4,
        AbsMinCoolSetpointLimit: 5,
        AbsMaxCoolSetpointLimit: 6,
        PICoolingDemand: 7,
        PIHeatingDemand: 8,
        HVACSystemTypeConfiguration: 9,
        LocalTemperatureCalibration: 16,
        OccupiedCoolingSetpoint: 17,
        OccupiedHeatingSetpoint: 18,
        UnoccupiedCoolingSetpoint: 19,
        UnoccupiedHeatingSetpoint: 20,
        MinHeatSetpointLimit: 21,
        MaxHeatSetpointLimit: 22,
        MinCoolSetpointLimit: 23,
        MaxCoolSetpointLimit: 24,
        MinSetpointDeadBand: 25,
        RemoteSensing: 26,
        ControlSequenceOfOperation: 27,
        SystemMode: 28,
        ThermostatRunningMode: 30,
        StartOfWeek: 32,
        NumberOfWeeklyTransitions: 33,
        NumberOfDailyTransitions: 34,
        TemperatureSetpointHold: 35,
        TemperatureSetpointHoldDuration: 36,
        ThermostatProgrammingOperationMode: 37,
        ThermostatRunningState: 41,
        SetpointChangeSource: 48,
        SetpointChangeAmount: 49,
        SetpointChangeSourceTimestamp: 50,
        OccupiedSetback: 52,
        OccupiedSetbackMin: 53,
        OccupiedSetbackMax: 54,
        UnoccupiedSetback: 55,
        UnoccupiedSetbackMin: 56,
        UnoccupiedSetbackMax: 57,
        EmergencyHeatDelta: 58,
        ACType: 64,
        ACCapacity: 65,
        ACRefrigerantType: 66,
        ACCompressorType: 67,
        ACErrorCode: 68,
        ACLouverPosition: 69,
        ACCoilTemperature: 70,
        ACCapacityformat: 71,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandSetpointRaiseLower = TlvObject({
        mode: TlvField(0,TlvUInt8),
        amount: TlvField(1,TlvInt8_t),
    })

    static TemplateCommandSetpointRaiseLower = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Mode },
          { 'tag': 1, 'type': 'int8_t', 'value': params.Amount },
        ]
    }

    static MapCommandSetpointRaiseLower = new Map([
        [0, 'mode'],
        [1, 'amount'],
    ])

    static SchemaCommandGetWeeklyScheduleResponse = TlvObject({
        numberOfTransitionsForSequence: TlvField(0,TlvUInt8),
        dayOfWeekForSequence: TlvField(1,TlvUInt8),
        modeForSequence: TlvField(2,TlvUInt8),
        transitions: TlvField(3,TlvArray),
    })

    static TemplateCommandGetWeeklyScheduleResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NumberOfTransitionsForSequence },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.DayOfWeekForSequence },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.ModeForSequence },
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.Transitions
        ]
    }

    static MapCommandGetWeeklyScheduleResponse = new Map([
        [0, 'numberOfTransitionsForSequence'],
        [1, 'dayOfWeekForSequence'],
        [2, 'modeForSequence'],
        [3, 'transitions'],
    ])

    static SchemaCommandSetWeeklySchedule = TlvObject({
        numberOfTransitionsForSequence: TlvField(0,TlvUInt8),
        dayOfWeekForSequence: TlvField(1,TlvUInt8),
        modeForSequence: TlvField(2,TlvUInt8),
        transitions: TlvField(3,TlvArray),
    })

    static TemplateCommandSetWeeklySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.NumberOfTransitionsForSequence },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.DayOfWeekForSequence },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.ModeForSequence },
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.Transitions
        ]
    }

    static MapCommandSetWeeklySchedule = new Map([
        [0, 'numberOfTransitionsForSequence'],
        [1, 'dayOfWeekForSequence'],
        [2, 'modeForSequence'],
        [3, 'transitions'],
    ])

    static SchemaCommandGetWeeklySchedule = TlvObject({
        daysToReturn: TlvField(0,TlvUInt8),
        modeToReturn: TlvField(1,TlvUInt8),
    })

    static TemplateCommandGetWeeklySchedule = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.DaysToReturn },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.ModeToReturn },
        ]
    }

    static MapCommandGetWeeklySchedule = new Map([
        [0, 'daysToReturn'],
        [1, 'modeToReturn'],
    ])

    static SchemaCommandClearWeeklySchedule = TlvObject({
    })

    static TemplateCommandClearWeeklySchedule = function(params) {
        return [
        ]
    }

    static MapCommandClearWeeklySchedule = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterThermostatServer.Attribute.LocalTemperature
                "name": "LocalTemperature",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterThermostatServer.Attribute.OutdoorTemperature
                "name": "OutdoorTemperature",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterThermostatServer.Attribute.Occupancy
                "name": "Occupancy",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterThermostatServer.Attribute.AbsMinHeatSetpointLimit
                "name": "AbsMinHeatSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterThermostatServer.Attribute.AbsMaxHeatSetpointLimit
                "name": "AbsMaxHeatSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterThermostatServer.Attribute.AbsMinCoolSetpointLimit
                "name": "AbsMinCoolSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterThermostatServer.Attribute.AbsMaxCoolSetpointLimit
                "name": "AbsMaxCoolSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterThermostatServer.Attribute.PICoolingDemand
                "name": "PICoolingDemand",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterThermostatServer.Attribute.PIHeatingDemand
                "name": "PIHeatingDemand",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterThermostatServer.Attribute.HVACSystemTypeConfiguration
                "name": "HVACSystemTypeConfiguration",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterThermostatServer.Attribute.LocalTemperatureCalibration
                "name": "LocalTemperatureCalibration",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterThermostatServer.Attribute.OccupiedCoolingSetpoint
                "name": "OccupiedCoolingSetpoint",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterThermostatServer.Attribute.OccupiedHeatingSetpoint
                "name": "OccupiedHeatingSetpoint",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterThermostatServer.Attribute.UnoccupiedCoolingSetpoint
                "name": "UnoccupiedCoolingSetpoint",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterThermostatServer.Attribute.UnoccupiedHeatingSetpoint
                "name": "UnoccupiedHeatingSetpoint",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterThermostatServer.Attribute.MinHeatSetpointLimit
                "name": "MinHeatSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterThermostatServer.Attribute.MaxHeatSetpointLimit
                "name": "MaxHeatSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterThermostatServer.Attribute.MinCoolSetpointLimit
                "name": "MinCoolSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            24: { // ClusterThermostatServer.Attribute.MaxCoolSetpointLimit
                "name": "MaxCoolSetpointLimit",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            25: { // ClusterThermostatServer.Attribute.MinSetpointDeadBand
                "name": "MinSetpointDeadBand",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterThermostatServer.Attribute.RemoteSensing
                "name": "RemoteSensing",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            27: { // ClusterThermostatServer.Attribute.ControlSequenceOfOperation
                "name": "ControlSequenceOfOperation",
                "type": "ThermostatControlSequence",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            28: { // ClusterThermostatServer.Attribute.SystemMode
                "name": "SystemMode",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            30: { // ClusterThermostatServer.Attribute.ThermostatRunningMode
                "name": "ThermostatRunningMode",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            32: { // ClusterThermostatServer.Attribute.StartOfWeek
                "name": "StartOfWeek",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterThermostatServer.Attribute.NumberOfWeeklyTransitions
                "name": "NumberOfWeeklyTransitions",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            34: { // ClusterThermostatServer.Attribute.NumberOfDailyTransitions
                "name": "NumberOfDailyTransitions",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            35: { // ClusterThermostatServer.Attribute.TemperatureSetpointHold
                "name": "TemperatureSetpointHold",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            36: { // ClusterThermostatServer.Attribute.TemperatureSetpointHoldDuration
                "name": "TemperatureSetpointHoldDuration",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            37: { // ClusterThermostatServer.Attribute.ThermostatProgrammingOperationMode
                "name": "ThermostatProgrammingOperationMode",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            41: { // ClusterThermostatServer.Attribute.ThermostatRunningState
                "name": "ThermostatRunningState",
                "type": "bitmap16",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            48: { // ClusterThermostatServer.Attribute.SetpointChangeSource
                "name": "SetpointChangeSource",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            49: { // ClusterThermostatServer.Attribute.SetpointChangeAmount
                "name": "SetpointChangeAmount",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            50: { // ClusterThermostatServer.Attribute.SetpointChangeSourceTimestamp
                "name": "SetpointChangeSourceTimestamp",
                "type": "utc",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            52: { // ClusterThermostatServer.Attribute.OccupiedSetback
                "name": "OccupiedSetback",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            53: { // ClusterThermostatServer.Attribute.OccupiedSetbackMin
                "name": "OccupiedSetbackMin",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            54: { // ClusterThermostatServer.Attribute.OccupiedSetbackMax
                "name": "OccupiedSetbackMax",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            55: { // ClusterThermostatServer.Attribute.UnoccupiedSetback
                "name": "UnoccupiedSetback",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            56: { // ClusterThermostatServer.Attribute.UnoccupiedSetbackMin
                "name": "UnoccupiedSetbackMin",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            57: { // ClusterThermostatServer.Attribute.UnoccupiedSetbackMax
                "name": "UnoccupiedSetbackMax",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            58: { // ClusterThermostatServer.Attribute.EmergencyHeatDelta
                "name": "EmergencyHeatDelta",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            64: { // ClusterThermostatServer.Attribute.ACType
                "name": "ACType",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65: { // ClusterThermostatServer.Attribute.ACCapacity
                "name": "ACCapacity",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            66: { // ClusterThermostatServer.Attribute.ACRefrigerantType
                "name": "ACRefrigerantType",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            67: { // ClusterThermostatServer.Attribute.ACCompressorType
                "name": "ACCompressorType",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            68: { // ClusterThermostatServer.Attribute.ACErrorCode
                "name": "ACErrorCode",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            69: { // ClusterThermostatServer.Attribute.ACLouverPosition
                "name": "ACLouverPosition",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            70: { // ClusterThermostatServer.Attribute.ACCoilTemperature
                "name": "ACCoilTemperature",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            71: { // ClusterThermostatServer.Attribute.ACCapacityformat
                "name": "ACCapacityformat",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterThermostatServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterThermostatServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterThermostatServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterThermostatServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterThermostatServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterThermostat.Command.SetpointRaiseLower: this.onSetpointRaiseLower(msg, path); break;
            case ClusterThermostat.Command.GetWeeklyScheduleResponse: this.onGetWeeklyScheduleResponse(msg, path); break;
            case ClusterThermostat.Command.SetWeeklySchedule: this.onSetWeeklySchedule(msg, path); break;
            case ClusterThermostat.Command.GetWeeklySchedule: this.onGetWeeklySchedule(msg, path); break;
            case ClusterThermostat.Command.ClearWeeklySchedule: this.onClearWeeklySchedule(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onSetpointRaiseLower(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetpointRaiseLower")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetWeeklyScheduleResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetWeeklyScheduleResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSetWeeklySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onSetWeeklySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetWeeklySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetWeeklySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onClearWeeklySchedule(msg, commandPath)
    {
        console.log(this.constructor.name+".onClearWeeklySchedule")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterFanControl
 */
class ClusterFanControl
{
    static CLUSTER_NAME = 'FAN_CONTROL_CLUSTER'
    static CLUSTER_ID = 0x0202

    static Command = {
    }
}

/**
 * ClusterFanControlServer
 */
class ClusterFanControlServer
{
    static Attribute = {
        FanMode: 0,
        FanModeSequence: 1,
        PercentSetting: 2,
        PercentCurrent: 3,
        SpeedMax: 4,
        SpeedSetting: 5,
        SpeedCurrent: 6,
        RockSupport: 7,
        RockSetting: 8,
        WindSupport: 9,
        WindSetting: 10,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterFanControlServer.Attribute.FanMode
                "name": "FanMode",
                "type": "FanModeType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterFanControlServer.Attribute.FanModeSequence
                "name": "FanModeSequence",
                "type": "FanModeSequenceType",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterFanControlServer.Attribute.PercentSetting
                "name": "PercentSetting",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterFanControlServer.Attribute.PercentCurrent
                "name": "PercentCurrent",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterFanControlServer.Attribute.SpeedMax
                "name": "SpeedMax",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterFanControlServer.Attribute.SpeedSetting
                "name": "SpeedSetting",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterFanControlServer.Attribute.SpeedCurrent
                "name": "SpeedCurrent",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterFanControlServer.Attribute.RockSupport
                "name": "RockSupport",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterFanControlServer.Attribute.RockSetting
                "name": "RockSetting",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterFanControlServer.Attribute.WindSupport
                "name": "WindSupport",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterFanControlServer.Attribute.WindSetting
                "name": "WindSetting",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterFanControlServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterFanControlServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterFanControlServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterFanControlServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterFanControlServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterThermostatUserInterfaceConfiguration
 */
class ClusterThermostatUserInterfaceConfiguration
{
    static CLUSTER_NAME = 'THERMOSTAT_USER_INTERFACE_CONFIGURATION_CLUSTER'
    static CLUSTER_ID = 0x0204

    static Command = {
    }
}

/**
 * ClusterThermostatUserInterfaceConfigurationServer
 */
class ClusterThermostatUserInterfaceConfigurationServer
{
    static Attribute = {
        TemperatureDisplayMode: 0,
        KeypadLockout: 1,
        ScheduleProgrammingVisibility: 2,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.TemperatureDisplayMode
                "name": "TemperatureDisplayMode",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.KeypadLockout
                "name": "KeypadLockout",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.ScheduleProgrammingVisibility
                "name": "ScheduleProgrammingVisibility",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterThermostatUserInterfaceConfigurationServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterColorControl
 */
class ClusterColorControl
{
    static CLUSTER_NAME = 'COLOR_CONTROL_CLUSTER'
    static CLUSTER_ID = 0x0300

    static Command = {
        MoveToHue: 0,
        MoveHue: 1,
        StepHue: 2,
        MoveToSaturation: 3,
        MoveSaturation: 4,
        StepSaturation: 5,
        MoveToHueAndSaturation: 6,
        MoveToColor: 7,
        MoveColor: 8,
        StepColor: 9,
        MoveToColorTemperature: 10,
        EnhancedMoveToHue: 64,
        EnhancedMoveHue: 65,
        EnhancedStepHue: 66,
        EnhancedMoveToHueAndSaturation: 67,
        ColorLoopSet: 68,
        StopMoveStep: 71,
        MoveColorTemperature: 75,
        StepColorTemperature: 76,
    }
}

/**
 * ClusterColorControlServer
 */
class ClusterColorControlServer
{
    static Attribute = {
        CurrentHue: 0,
        CurrentSaturation: 1,
        RemainingTime: 2,
        CurrentX: 3,
        CurrentY: 4,
        DriftCompensation: 5,
        CompensationText: 6,
        ColorTemperatureMireds: 7,
        ColorMode: 8,
        Options: 15,
        NumberOfPrimaries: 16,
        Primary1X: 17,
        Primary1Y: 18,
        Primary1Intensity: 19,
        Primary2X: 21,
        Primary2Y: 22,
        Primary2Intensity: 23,
        Primary3X: 25,
        Primary3Y: 26,
        Primary3Intensity: 27,
        Primary4X: 32,
        Primary4Y: 33,
        Primary4Intensity: 34,
        Primary5X: 36,
        Primary5Y: 37,
        Primary5Intensity: 38,
        Primary6X: 40,
        Primary6Y: 41,
        Primary6Intensity: 42,
        WhitePointX: 48,
        WhitePointY: 49,
        ColorPointRX: 50,
        ColorPointRY: 51,
        ColorPointRIntensity: 52,
        ColorPointGX: 54,
        ColorPointGY: 55,
        ColorPointGIntensity: 56,
        ColorPointBX: 58,
        ColorPointBY: 59,
        ColorPointBIntensity: 60,
        EnhancedCurrentHue: 16384,
        EnhancedColorMode: 16385,
        ColorLoopActive: 16386,
        ColorLoopDirection: 16387,
        ColorLoopTime: 16388,
        ColorLoopStartEnhancedHue: 16389,
        ColorLoopStoredEnhancedHue: 16390,
        ColorCapabilities: 16394,
        ColorTempPhysicalMinMireds: 16395,
        ColorTempPhysicalMaxMireds: 16396,
        CoupleColorTempToLevelMinMireds: 16397,
        StartUpColorTemperatureMireds: 16400,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandMoveToHue = TlvObject({
        hue: TlvField(0,TlvUInt8),
        direction: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandMoveToHue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Hue },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Direction },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToHue = new Map([
        [0, 'hue'],
        [1, 'direction'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandMoveHue = TlvObject({
        moveMode: TlvField(0,TlvUInt8),
        rate: TlvField(1,TlvUInt8),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveHue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.MoveMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Rate },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveHue = new Map([
        [0, 'moveMode'],
        [1, 'rate'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandStepHue = TlvObject({
        stepMode: TlvField(0,TlvUInt8),
        stepSize: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt8),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandStepHue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StepMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.StepSize },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStepHue = new Map([
        [0, 'stepMode'],
        [1, 'stepSize'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandMoveToSaturation = TlvObject({
        saturation: TlvField(0,TlvUInt8),
        transitionTime: TlvField(1,TlvUInt16),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveToSaturation = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Saturation },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToSaturation = new Map([
        [0, 'saturation'],
        [1, 'transitionTime'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandMoveSaturation = TlvObject({
        moveMode: TlvField(0,TlvUInt8),
        rate: TlvField(1,TlvUInt8),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveSaturation = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.MoveMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Rate },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveSaturation = new Map([
        [0, 'moveMode'],
        [1, 'rate'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandStepSaturation = TlvObject({
        stepMode: TlvField(0,TlvUInt8),
        stepSize: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt8),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandStepSaturation = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StepMode },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.StepSize },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStepSaturation = new Map([
        [0, 'stepMode'],
        [1, 'stepSize'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandMoveToHueAndSaturation = TlvObject({
        hue: TlvField(0,TlvUInt8),
        saturation: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandMoveToHueAndSaturation = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Hue },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Saturation },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToHueAndSaturation = new Map([
        [0, 'hue'],
        [1, 'saturation'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandMoveToColor = TlvObject({
        colorX: TlvField(0,TlvUInt16),
        colorY: TlvField(1,TlvUInt16),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandMoveToColor = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ColorX },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.ColorY },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToColor = new Map([
        [0, 'colorX'],
        [1, 'colorY'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandMoveColor = TlvObject({
        rateX: TlvField(0,TlvInt16_t),
        rateY: TlvField(1,TlvInt16_t),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveColor = function(params) {
        return [
          { 'tag': 0, 'type': 'int16_t', 'value': params.RateX },
          { 'tag': 1, 'type': 'int16_t', 'value': params.RateY },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveColor = new Map([
        [0, 'rateX'],
        [1, 'rateY'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandStepColor = TlvObject({
        stepX: TlvField(0,TlvInt16_t),
        stepY: TlvField(1,TlvInt16_t),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandStepColor = function(params) {
        return [
          { 'tag': 0, 'type': 'int16_t', 'value': params.StepX },
          { 'tag': 1, 'type': 'int16_t', 'value': params.StepY },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStepColor = new Map([
        [0, 'stepX'],
        [1, 'stepY'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandMoveToColorTemperature = TlvObject({
        colorTemperature: TlvField(0,TlvUInt16),
        transitionTime: TlvField(1,TlvUInt16),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandMoveToColorTemperature = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.ColorTemperature },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveToColorTemperature = new Map([
        [0, 'colorTemperature'],
        [1, 'transitionTime'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandEnhancedMoveToHue = TlvObject({
        enhancedHue: TlvField(0,TlvUInt16),
        direction: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandEnhancedMoveToHue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.EnhancedHue },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Direction },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandEnhancedMoveToHue = new Map([
        [0, 'enhancedHue'],
        [1, 'direction'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandEnhancedMoveHue = TlvObject({
        moveMode: TlvField(0,TlvUInt8),
        rate: TlvField(1,TlvUInt16),
        optionsMask: TlvField(2,TlvUInt8),
        optionsOverride: TlvField(3,TlvUInt8),
    })

    static TemplateCommandEnhancedMoveHue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.MoveMode },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.Rate },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandEnhancedMoveHue = new Map([
        [0, 'moveMode'],
        [1, 'rate'],
        [2, 'optionsMask'],
        [3, 'optionsOverride'],
    ])

    static SchemaCommandEnhancedStepHue = TlvObject({
        stepMode: TlvField(0,TlvUInt8),
        stepSize: TlvField(1,TlvUInt16),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandEnhancedStepHue = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StepMode },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.StepSize },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandEnhancedStepHue = new Map([
        [0, 'stepMode'],
        [1, 'stepSize'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandEnhancedMoveToHueAndSaturation = TlvObject({
        enhancedHue: TlvField(0,TlvUInt16),
        saturation: TlvField(1,TlvUInt8),
        transitionTime: TlvField(2,TlvUInt16),
        optionsMask: TlvField(3,TlvUInt8),
        optionsOverride: TlvField(4,TlvUInt8),
    })

    static TemplateCommandEnhancedMoveToHueAndSaturation = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.EnhancedHue },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Saturation },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandEnhancedMoveToHueAndSaturation = new Map([
        [0, 'enhancedHue'],
        [1, 'saturation'],
        [2, 'transitionTime'],
        [3, 'optionsMask'],
        [4, 'optionsOverride'],
    ])

    static SchemaCommandColorLoopSet = TlvObject({
        updateFlags: TlvField(0,TlvUInt8),
        action: TlvField(1,TlvUInt8),
        direction: TlvField(2,TlvUInt8),
        time: TlvField(3,TlvUInt16),
        startHue: TlvField(4,TlvUInt16),
        optionsMask: TlvField(5,TlvUInt8),
        optionsOverride: TlvField(6,TlvUInt8),
    })

    static TemplateCommandColorLoopSet = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.UpdateFlags },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Action },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.Direction },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.Time },
          { 'tag': 4, 'type': 'uint16_t', 'value': params.StartHue },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 6, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandColorLoopSet = new Map([
        [0, 'updateFlags'],
        [1, 'action'],
        [2, 'direction'],
        [3, 'time'],
        [4, 'startHue'],
        [5, 'optionsMask'],
        [6, 'optionsOverride'],
    ])

    static SchemaCommandStopMoveStep = TlvObject({
        optionsMask: TlvField(0,TlvUInt8),
        optionsOverride: TlvField(1,TlvUInt8),
    })

    static TemplateCommandStopMoveStep = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStopMoveStep = new Map([
        [0, 'optionsMask'],
        [1, 'optionsOverride'],
    ])

    static SchemaCommandMoveColorTemperature = TlvObject({
        moveMode: TlvField(0,TlvUInt8),
        rate: TlvField(1,TlvUInt16),
        colorTemperatureMinimumMireds: TlvField(2,TlvUInt16),
        colorTemperatureMaximumMireds: TlvField(3,TlvUInt16),
        optionsMask: TlvField(4,TlvUInt8),
        optionsOverride: TlvField(5,TlvUInt8),
    })

    static TemplateCommandMoveColorTemperature = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.MoveMode },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.Rate },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.ColorTemperatureMinimumMireds },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.ColorTemperatureMaximumMireds },
          { 'tag': 4, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandMoveColorTemperature = new Map([
        [0, 'moveMode'],
        [1, 'rate'],
        [2, 'colorTemperatureMinimumMireds'],
        [3, 'colorTemperatureMaximumMireds'],
        [4, 'optionsMask'],
        [5, 'optionsOverride'],
    ])

    static SchemaCommandStepColorTemperature = TlvObject({
        stepMode: TlvField(0,TlvUInt8),
        stepSize: TlvField(1,TlvUInt16),
        transitionTime: TlvField(2,TlvUInt16),
        colorTemperatureMinimumMireds: TlvField(3,TlvUInt16),
        colorTemperatureMaximumMireds: TlvField(4,TlvUInt16),
        optionsMask: TlvField(5,TlvUInt8),
        optionsOverride: TlvField(6,TlvUInt8),
    })

    static TemplateCommandStepColorTemperature = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.StepMode },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.StepSize },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.TransitionTime },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.ColorTemperatureMinimumMireds },
          { 'tag': 4, 'type': 'uint16_t', 'value': params.ColorTemperatureMaximumMireds },
          { 'tag': 5, 'type': 'uint8_t', 'value': params.OptionsMask },
          { 'tag': 6, 'type': 'uint8_t', 'value': params.OptionsOverride },
        ]
    }

    static MapCommandStepColorTemperature = new Map([
        [0, 'stepMode'],
        [1, 'stepSize'],
        [2, 'transitionTime'],
        [3, 'colorTemperatureMinimumMireds'],
        [4, 'colorTemperatureMaximumMireds'],
        [5, 'optionsMask'],
        [6, 'optionsOverride'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterColorControlServer.Attribute.CurrentHue
                "name": "CurrentHue",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterColorControlServer.Attribute.CurrentSaturation
                "name": "CurrentSaturation",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterColorControlServer.Attribute.RemainingTime
                "name": "RemainingTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterColorControlServer.Attribute.CurrentX
                "name": "CurrentX",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterColorControlServer.Attribute.CurrentY
                "name": "CurrentY",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterColorControlServer.Attribute.DriftCompensation
                "name": "DriftCompensation",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterColorControlServer.Attribute.CompensationText
                "name": "CompensationText",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterColorControlServer.Attribute.ColorTemperatureMireds
                "name": "ColorTemperatureMireds",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterColorControlServer.Attribute.ColorMode
                "name": "ColorMode",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterColorControlServer.Attribute.Options
                "name": "Options",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterColorControlServer.Attribute.NumberOfPrimaries
                "name": "NumberOfPrimaries",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterColorControlServer.Attribute.Primary1X
                "name": "Primary1X",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterColorControlServer.Attribute.Primary1Y
                "name": "Primary1Y",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterColorControlServer.Attribute.Primary1Intensity
                "name": "Primary1Intensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterColorControlServer.Attribute.Primary2X
                "name": "Primary2X",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterColorControlServer.Attribute.Primary2Y
                "name": "Primary2Y",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterColorControlServer.Attribute.Primary2Intensity
                "name": "Primary2Intensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            25: { // ClusterColorControlServer.Attribute.Primary3X
                "name": "Primary3X",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterColorControlServer.Attribute.Primary3Y
                "name": "Primary3Y",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            27: { // ClusterColorControlServer.Attribute.Primary3Intensity
                "name": "Primary3Intensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            32: { // ClusterColorControlServer.Attribute.Primary4X
                "name": "Primary4X",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterColorControlServer.Attribute.Primary4Y
                "name": "Primary4Y",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            34: { // ClusterColorControlServer.Attribute.Primary4Intensity
                "name": "Primary4Intensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            36: { // ClusterColorControlServer.Attribute.Primary5X
                "name": "Primary5X",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            37: { // ClusterColorControlServer.Attribute.Primary5Y
                "name": "Primary5Y",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            38: { // ClusterColorControlServer.Attribute.Primary5Intensity
                "name": "Primary5Intensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            40: { // ClusterColorControlServer.Attribute.Primary6X
                "name": "Primary6X",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            41: { // ClusterColorControlServer.Attribute.Primary6Y
                "name": "Primary6Y",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            42: { // ClusterColorControlServer.Attribute.Primary6Intensity
                "name": "Primary6Intensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            48: { // ClusterColorControlServer.Attribute.WhitePointX
                "name": "WhitePointX",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            49: { // ClusterColorControlServer.Attribute.WhitePointY
                "name": "WhitePointY",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            50: { // ClusterColorControlServer.Attribute.ColorPointRX
                "name": "ColorPointRX",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            51: { // ClusterColorControlServer.Attribute.ColorPointRY
                "name": "ColorPointRY",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            52: { // ClusterColorControlServer.Attribute.ColorPointRIntensity
                "name": "ColorPointRIntensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            54: { // ClusterColorControlServer.Attribute.ColorPointGX
                "name": "ColorPointGX",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            55: { // ClusterColorControlServer.Attribute.ColorPointGY
                "name": "ColorPointGY",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            56: { // ClusterColorControlServer.Attribute.ColorPointGIntensity
                "name": "ColorPointGIntensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            58: { // ClusterColorControlServer.Attribute.ColorPointBX
                "name": "ColorPointBX",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            59: { // ClusterColorControlServer.Attribute.ColorPointBY
                "name": "ColorPointBY",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            60: { // ClusterColorControlServer.Attribute.ColorPointBIntensity
                "name": "ColorPointBIntensity",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16384: { // ClusterColorControlServer.Attribute.EnhancedCurrentHue
                "name": "EnhancedCurrentHue",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16385: { // ClusterColorControlServer.Attribute.EnhancedColorMode
                "name": "EnhancedColorMode",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16386: { // ClusterColorControlServer.Attribute.ColorLoopActive
                "name": "ColorLoopActive",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16387: { // ClusterColorControlServer.Attribute.ColorLoopDirection
                "name": "ColorLoopDirection",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16388: { // ClusterColorControlServer.Attribute.ColorLoopTime
                "name": "ColorLoopTime",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16389: { // ClusterColorControlServer.Attribute.ColorLoopStartEnhancedHue
                "name": "ColorLoopStartEnhancedHue",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16390: { // ClusterColorControlServer.Attribute.ColorLoopStoredEnhancedHue
                "name": "ColorLoopStoredEnhancedHue",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16394: { // ClusterColorControlServer.Attribute.ColorCapabilities
                "name": "ColorCapabilities",
                "type": "bitmap16",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16395: { // ClusterColorControlServer.Attribute.ColorTempPhysicalMinMireds
                "name": "ColorTempPhysicalMinMireds",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16396: { // ClusterColorControlServer.Attribute.ColorTempPhysicalMaxMireds
                "name": "ColorTempPhysicalMaxMireds",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16397: { // ClusterColorControlServer.Attribute.CoupleColorTempToLevelMinMireds
                "name": "CoupleColorTempToLevelMinMireds",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16400: { // ClusterColorControlServer.Attribute.StartUpColorTemperatureMireds
                "name": "StartUpColorTemperatureMireds",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterColorControlServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterColorControlServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterColorControlServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterColorControlServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterColorControlServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterColorControl.Command.MoveToHue: this.onMoveToHue(msg, path); break;
            case ClusterColorControl.Command.MoveHue: this.onMoveHue(msg, path); break;
            case ClusterColorControl.Command.StepHue: this.onStepHue(msg, path); break;
            case ClusterColorControl.Command.MoveToSaturation: this.onMoveToSaturation(msg, path); break;
            case ClusterColorControl.Command.MoveSaturation: this.onMoveSaturation(msg, path); break;
            case ClusterColorControl.Command.StepSaturation: this.onStepSaturation(msg, path); break;
            case ClusterColorControl.Command.MoveToHueAndSaturation: this.onMoveToHueAndSaturation(msg, path); break;
            case ClusterColorControl.Command.MoveToColor: this.onMoveToColor(msg, path); break;
            case ClusterColorControl.Command.MoveColor: this.onMoveColor(msg, path); break;
            case ClusterColorControl.Command.StepColor: this.onStepColor(msg, path); break;
            case ClusterColorControl.Command.MoveToColorTemperature: this.onMoveToColorTemperature(msg, path); break;
            case ClusterColorControl.Command.EnhancedMoveToHue: this.onEnhancedMoveToHue(msg, path); break;
            case ClusterColorControl.Command.EnhancedMoveHue: this.onEnhancedMoveHue(msg, path); break;
            case ClusterColorControl.Command.EnhancedStepHue: this.onEnhancedStepHue(msg, path); break;
            case ClusterColorControl.Command.EnhancedMoveToHueAndSaturation: this.onEnhancedMoveToHueAndSaturation(msg, path); break;
            case ClusterColorControl.Command.ColorLoopSet: this.onColorLoopSet(msg, path); break;
            case ClusterColorControl.Command.StopMoveStep: this.onStopMoveStep(msg, path); break;
            case ClusterColorControl.Command.MoveColorTemperature: this.onMoveColorTemperature(msg, path); break;
            case ClusterColorControl.Command.StepColorTemperature: this.onStepColorTemperature(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onMoveToHue(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToHue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveHue(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveHue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStepHue(msg, commandPath)
    {
        console.log(this.constructor.name+".onStepHue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveToSaturation(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToSaturation")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveSaturation(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveSaturation")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStepSaturation(msg, commandPath)
    {
        console.log(this.constructor.name+".onStepSaturation")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveToHueAndSaturation(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToHueAndSaturation")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveToColor(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToColor")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveColor(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveColor")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStepColor(msg, commandPath)
    {
        console.log(this.constructor.name+".onStepColor")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveToColorTemperature(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveToColorTemperature")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedMoveToHue(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedMoveToHue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedMoveHue(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedMoveHue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedStepHue(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedStepHue")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onEnhancedMoveToHueAndSaturation(msg, commandPath)
    {
        console.log(this.constructor.name+".onEnhancedMoveToHueAndSaturation")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onColorLoopSet(msg, commandPath)
    {
        console.log(this.constructor.name+".onColorLoopSet")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStopMoveStep(msg, commandPath)
    {
        console.log(this.constructor.name+".onStopMoveStep")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onMoveColorTemperature(msg, commandPath)
    {
        console.log(this.constructor.name+".onMoveColorTemperature")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStepColorTemperature(msg, commandPath)
    {
        console.log(this.constructor.name+".onStepColorTemperature")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterIlluminanceMeasurement
 */
class ClusterIlluminanceMeasurement
{
    static CLUSTER_NAME = 'ILLUMINANCE_MEASUREMENT_CLUSTER'
    static CLUSTER_ID = 0x0400

    static Command = {
    }
}

/**
 * ClusterIlluminanceMeasurementServer
 */
class ClusterIlluminanceMeasurementServer
{
    static Attribute = {
        MeasuredValue: 0,
        MinMeasuredValue: 1,
        MaxMeasuredValue: 2,
        Tolerance: 3,
        LightSensorType: 4,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterIlluminanceMeasurementServer.Attribute.MeasuredValue
                "name": "MeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterIlluminanceMeasurementServer.Attribute.MinMeasuredValue
                "name": "MinMeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterIlluminanceMeasurementServer.Attribute.MaxMeasuredValue
                "name": "MaxMeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterIlluminanceMeasurementServer.Attribute.Tolerance
                "name": "Tolerance",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterIlluminanceMeasurementServer.Attribute.LightSensorType
                "name": "LightSensorType",
                "type": "enum8",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterIlluminanceMeasurementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterIlluminanceMeasurementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterIlluminanceMeasurementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterIlluminanceMeasurementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterIlluminanceMeasurementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterTemperatureMeasurement
 */
class ClusterTemperatureMeasurement
{
    static CLUSTER_NAME = 'TEMPERATURE_MEASUREMENT_CLUSTER'
    static CLUSTER_ID = 0x0402

    static Command = {
    }
}

/**
 * ClusterTemperatureMeasurementServer
 */
class ClusterTemperatureMeasurementServer
{
    static Attribute = {
        MeasuredValue: 0,
        MinMeasuredValue: 1,
        MaxMeasuredValue: 2,
        Tolerance: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterTemperatureMeasurementServer.Attribute.MeasuredValue
                "name": "MeasuredValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterTemperatureMeasurementServer.Attribute.MinMeasuredValue
                "name": "MinMeasuredValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterTemperatureMeasurementServer.Attribute.MaxMeasuredValue
                "name": "MaxMeasuredValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterTemperatureMeasurementServer.Attribute.Tolerance
                "name": "Tolerance",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterTemperatureMeasurementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterTemperatureMeasurementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterTemperatureMeasurementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterTemperatureMeasurementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterTemperatureMeasurementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterPressureMeasurement
 */
class ClusterPressureMeasurement
{
    static CLUSTER_NAME = 'PRESSURE_MEASUREMENT_CLUSTER'
    static CLUSTER_ID = 0x0403

    static Command = {
    }
}

/**
 * ClusterPressureMeasurementServer
 */
class ClusterPressureMeasurementServer
{
    static Attribute = {
        MeasuredValue: 0,
        MinMeasuredValue: 1,
        MaxMeasuredValue: 2,
        Tolerance: 3,
        ScaledValue: 16,
        MinScaledValue: 17,
        MaxScaledValue: 18,
        ScaledTolerance: 19,
        Scale: 20,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterPressureMeasurementServer.Attribute.MeasuredValue
                "name": "MeasuredValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterPressureMeasurementServer.Attribute.MinMeasuredValue
                "name": "MinMeasuredValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterPressureMeasurementServer.Attribute.MaxMeasuredValue
                "name": "MaxMeasuredValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterPressureMeasurementServer.Attribute.Tolerance
                "name": "Tolerance",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterPressureMeasurementServer.Attribute.ScaledValue
                "name": "ScaledValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterPressureMeasurementServer.Attribute.MinScaledValue
                "name": "MinScaledValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterPressureMeasurementServer.Attribute.MaxScaledValue
                "name": "MaxScaledValue",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterPressureMeasurementServer.Attribute.ScaledTolerance
                "name": "ScaledTolerance",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterPressureMeasurementServer.Attribute.Scale
                "name": "Scale",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterPressureMeasurementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterPressureMeasurementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterPressureMeasurementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterPressureMeasurementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterPressureMeasurementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterFlowMeasurement
 */
class ClusterFlowMeasurement
{
    static CLUSTER_NAME = 'FLOW_MEASUREMENT_CLUSTER'
    static CLUSTER_ID = 0x0404

    static Command = {
    }
}

/**
 * ClusterFlowMeasurementServer
 */
class ClusterFlowMeasurementServer
{
    static Attribute = {
        MeasuredValue: 0,
        MinMeasuredValue: 1,
        MaxMeasuredValue: 2,
        Tolerance: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterFlowMeasurementServer.Attribute.MeasuredValue
                "name": "MeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterFlowMeasurementServer.Attribute.MinMeasuredValue
                "name": "MinMeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterFlowMeasurementServer.Attribute.MaxMeasuredValue
                "name": "MaxMeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterFlowMeasurementServer.Attribute.Tolerance
                "name": "Tolerance",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterFlowMeasurementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterFlowMeasurementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterFlowMeasurementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterFlowMeasurementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterFlowMeasurementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterRelativeHumidityMeasurement
 */
class ClusterRelativeHumidityMeasurement
{
    static CLUSTER_NAME = 'RELATIVE_HUMIDITY_MEASUREMENT_CLUSTER'
    static CLUSTER_ID = 0x0405

    static Command = {
    }
}

/**
 * ClusterRelativeHumidityMeasurementServer
 */
class ClusterRelativeHumidityMeasurementServer
{
    static Attribute = {
        MeasuredValue: 0,
        MinMeasuredValue: 1,
        MaxMeasuredValue: 2,
        Tolerance: 3,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterRelativeHumidityMeasurementServer.Attribute.MeasuredValue
                "name": "MeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterRelativeHumidityMeasurementServer.Attribute.MinMeasuredValue
                "name": "MinMeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterRelativeHumidityMeasurementServer.Attribute.MaxMeasuredValue
                "name": "MaxMeasuredValue",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterRelativeHumidityMeasurementServer.Attribute.Tolerance
                "name": "Tolerance",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterRelativeHumidityMeasurementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterRelativeHumidityMeasurementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterRelativeHumidityMeasurementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterRelativeHumidityMeasurementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterRelativeHumidityMeasurementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterOccupancySensing
 */
class ClusterOccupancySensing
{
    static CLUSTER_NAME = 'OCCUPANCY_SENSING_CLUSTER'
    static CLUSTER_ID = 0x0406

    static Command = {
    }
}

/**
 * ClusterOccupancySensingServer
 */
class ClusterOccupancySensingServer
{
    static Attribute = {
        Occupancy: 0,
        OccupancySensorType: 1,
        OccupancySensorTypeBitmap: 2,
        PirOccupiedToUnoccupiedDelay: 16,
        PirUnoccupiedToOccupiedDelay: 17,
        PirUnoccupiedToOccupiedThreshold: 18,
        UltrasonicOccupiedToUnoccupiedDelay: 32,
        UltrasonicUnoccupiedToOccupiedDelay: 33,
        UltrasonicUnoccupiedToOccupiedThreshold: 34,
        PhysicalContactOccupiedToUnoccupiedDelay: 48,
        PhysicalContactUnoccupiedToOccupiedDelay: 49,
        PhysicalContactUnoccupiedToOccupiedThreshold: 50,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterOccupancySensingServer.Attribute.Occupancy
                "name": "Occupancy",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterOccupancySensingServer.Attribute.OccupancySensorType
                "name": "OccupancySensorType",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterOccupancySensingServer.Attribute.OccupancySensorTypeBitmap
                "name": "OccupancySensorTypeBitmap",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterOccupancySensingServer.Attribute.PirOccupiedToUnoccupiedDelay
                "name": "PirOccupiedToUnoccupiedDelay",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterOccupancySensingServer.Attribute.PirUnoccupiedToOccupiedDelay
                "name": "PirUnoccupiedToOccupiedDelay",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterOccupancySensingServer.Attribute.PirUnoccupiedToOccupiedThreshold
                "name": "PirUnoccupiedToOccupiedThreshold",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            32: { // ClusterOccupancySensingServer.Attribute.UltrasonicOccupiedToUnoccupiedDelay
                "name": "UltrasonicOccupiedToUnoccupiedDelay",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterOccupancySensingServer.Attribute.UltrasonicUnoccupiedToOccupiedDelay
                "name": "UltrasonicUnoccupiedToOccupiedDelay",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            34: { // ClusterOccupancySensingServer.Attribute.UltrasonicUnoccupiedToOccupiedThreshold
                "name": "UltrasonicUnoccupiedToOccupiedThreshold",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            48: { // ClusterOccupancySensingServer.Attribute.PhysicalContactOccupiedToUnoccupiedDelay
                "name": "PhysicalContactOccupiedToUnoccupiedDelay",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            49: { // ClusterOccupancySensingServer.Attribute.PhysicalContactUnoccupiedToOccupiedDelay
                "name": "PhysicalContactUnoccupiedToOccupiedDelay",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            50: { // ClusterOccupancySensingServer.Attribute.PhysicalContactUnoccupiedToOccupiedThreshold
                "name": "PhysicalContactUnoccupiedToOccupiedThreshold",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterOccupancySensingServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterOccupancySensingServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterOccupancySensingServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterOccupancySensingServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterOccupancySensingServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterWakeOnLan
 */
class ClusterWakeOnLan
{
    static CLUSTER_NAME = 'WAKE_ON_LAN_CLUSTER'
    static CLUSTER_ID = 0x0503

    static Command = {
    }
}

/**
 * ClusterWakeOnLanServer
 */
class ClusterWakeOnLanServer
{
    static Attribute = {
        MACAddress: 0,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterWakeOnLanServer.Attribute.MACAddress
                "name": "MACAddress",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterWakeOnLanServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterWakeOnLanServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterWakeOnLanServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterWakeOnLanServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterWakeOnLanServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterChannel
 */
class ClusterChannel
{
    static CLUSTER_NAME = 'CHANNEL_CLUSTER'
    static CLUSTER_ID = 0x0504

    static Command = {
        ChangeChannel: 0,
        ChangeChannelResponse: 1,
        ChangeChannelByNumber: 2,
        SkipChannel: 3,
    }
}

/**
 * ClusterChannelServer
 */
class ClusterChannelServer
{
    static Attribute = {
        ChannelList: 0,
        Lineup: 1,
        CurrentChannel: 2,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandChangeChannel = TlvObject({
        match: TlvField(0,TlvString),
    })

    static TemplateCommandChangeChannel = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::CharSpan', 'value': params.Match },
        ]
    }

    static MapCommandChangeChannel = new Map([
        [0, 'match'],
    ])

    static SchemaCommandChangeChannelResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        data: TlvField(1,TlvString),
    })

    static TemplateCommandChangeChannelResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Data },
        ]
    }

    static MapCommandChangeChannelResponse = new Map([
        [0, 'status'],
        [1, 'data'],
    ])

    static SchemaCommandChangeChannelByNumber = TlvObject({
        majorNumber: TlvField(0,TlvUInt16),
        minorNumber: TlvField(1,TlvUInt16),
    })

    static TemplateCommandChangeChannelByNumber = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.MajorNumber },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.MinorNumber },
        ]
    }

    static MapCommandChangeChannelByNumber = new Map([
        [0, 'majorNumber'],
        [1, 'minorNumber'],
    ])

    static SchemaCommandSkipChannel = TlvObject({
        count: TlvField(0,TlvUInt16),
    })

    static TemplateCommandSkipChannel = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.Count },
        ]
    }

    static MapCommandSkipChannel = new Map([
        [0, 'count'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterChannelServer.Attribute.ChannelList
                "name": "ChannelList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterChannelServer.Attribute.Lineup
                "name": "Lineup",
                "type": "LineupInfo",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterChannelServer.Attribute.CurrentChannel
                "name": "CurrentChannel",
                "type": "ChannelInfo",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterChannelServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterChannelServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterChannelServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterChannelServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterChannelServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterChannel.Command.ChangeChannel: this.onChangeChannel(msg, path); break;
            case ClusterChannel.Command.ChangeChannelResponse: this.onChangeChannelResponse(msg, path); break;
            case ClusterChannel.Command.ChangeChannelByNumber: this.onChangeChannelByNumber(msg, path); break;
            case ClusterChannel.Command.SkipChannel: this.onSkipChannel(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onChangeChannel(msg, commandPath)
    {
        console.log(this.constructor.name+".onChangeChannel")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onChangeChannelResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onChangeChannelResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onChangeChannelByNumber(msg, commandPath)
    {
        console.log(this.constructor.name+".onChangeChannelByNumber")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSkipChannel(msg, commandPath)
    {
        console.log(this.constructor.name+".onSkipChannel")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterTargetNavigator
 */
class ClusterTargetNavigator
{
    static CLUSTER_NAME = 'TARGET_NAVIGATOR_CLUSTER'
    static CLUSTER_ID = 0x0505

    static Command = {
        NavigateTarget: 0,
        NavigateTargetResponse: 1,
    }
}

/**
 * ClusterTargetNavigatorServer
 */
class ClusterTargetNavigatorServer
{
    static Attribute = {
        TargetList: 0,
        CurrentTarget: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandNavigateTarget = TlvObject({
        target: TlvField(0,TlvUInt8),
        data: TlvField(1,TlvString),
    })

    static TemplateCommandNavigateTarget = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Target },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Data },
        ]
    }

    static MapCommandNavigateTarget = new Map([
        [0, 'target'],
        [1, 'data'],
    ])

    static SchemaCommandNavigateTargetResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        data: TlvField(1,TlvString),
    })

    static TemplateCommandNavigateTargetResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Data },
        ]
    }

    static MapCommandNavigateTargetResponse = new Map([
        [0, 'status'],
        [1, 'data'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterTargetNavigatorServer.Attribute.TargetList
                "name": "TargetList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterTargetNavigatorServer.Attribute.CurrentTarget
                "name": "CurrentTarget",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterTargetNavigatorServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterTargetNavigatorServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterTargetNavigatorServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterTargetNavigatorServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterTargetNavigatorServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterTargetNavigator.Command.NavigateTarget: this.onNavigateTarget(msg, path); break;
            case ClusterTargetNavigator.Command.NavigateTargetResponse: this.onNavigateTargetResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onNavigateTarget(msg, commandPath)
    {
        console.log(this.constructor.name+".onNavigateTarget")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onNavigateTargetResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onNavigateTargetResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterMediaPlayback
 */
class ClusterMediaPlayback
{
    static CLUSTER_NAME = 'MEDIA_PLAYBACK_CLUSTER'
    static CLUSTER_ID = 0x0506

    static Command = {
        Play: 0,
        Pause: 1,
        StopPlayback: 2,
        StartOver: 3,
        Previous: 4,
        Next: 5,
        Rewind: 6,
        FastForward: 7,
        SkipForward: 8,
        SkipBackward: 9,
        PlaybackResponse: 10,
        Seek: 11,
    }
}

/**
 * ClusterMediaPlaybackServer
 */
class ClusterMediaPlaybackServer
{
    static Attribute = {
        CurrentState: 0,
        StartTime: 1,
        Duration: 2,
        SampledPosition: 3,
        PlaybackSpeed: 4,
        SeekRangeEnd: 5,
        SeekRangeStart: 6,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandPlay = TlvObject({
    })

    static TemplateCommandPlay = function(params) {
        return [
        ]
    }

    static MapCommandPlay = new Map([
    ])

    static SchemaCommandPause = TlvObject({
    })

    static TemplateCommandPause = function(params) {
        return [
        ]
    }

    static MapCommandPause = new Map([
    ])

    static SchemaCommandStopPlayback = TlvObject({
    })

    static TemplateCommandStopPlayback = function(params) {
        return [
        ]
    }

    static MapCommandStopPlayback = new Map([
    ])

    static SchemaCommandStartOver = TlvObject({
    })

    static TemplateCommandStartOver = function(params) {
        return [
        ]
    }

    static MapCommandStartOver = new Map([
    ])

    static SchemaCommandPrevious = TlvObject({
    })

    static TemplateCommandPrevious = function(params) {
        return [
        ]
    }

    static MapCommandPrevious = new Map([
    ])

    static SchemaCommandNext = TlvObject({
    })

    static TemplateCommandNext = function(params) {
        return [
        ]
    }

    static MapCommandNext = new Map([
    ])

    static SchemaCommandRewind = TlvObject({
    })

    static TemplateCommandRewind = function(params) {
        return [
        ]
    }

    static MapCommandRewind = new Map([
    ])

    static SchemaCommandFastForward = TlvObject({
    })

    static TemplateCommandFastForward = function(params) {
        return [
        ]
    }

    static MapCommandFastForward = new Map([
    ])

    static SchemaCommandSkipForward = TlvObject({
        deltaPositionMilliseconds: TlvField(0,TlvUInt64),
    })

    static TemplateCommandSkipForward = function(params) {
        return [
          { 'tag': 0, 'type': 'uint64_t', 'value': params.DeltaPositionMilliseconds },
        ]
    }

    static MapCommandSkipForward = new Map([
        [0, 'deltaPositionMilliseconds'],
    ])

    static SchemaCommandSkipBackward = TlvObject({
        deltaPositionMilliseconds: TlvField(0,TlvUInt64),
    })

    static TemplateCommandSkipBackward = function(params) {
        return [
          { 'tag': 0, 'type': 'uint64_t', 'value': params.DeltaPositionMilliseconds },
        ]
    }

    static MapCommandSkipBackward = new Map([
        [0, 'deltaPositionMilliseconds'],
    ])

    static SchemaCommandPlaybackResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        data: TlvField(1,TlvString),
    })

    static TemplateCommandPlaybackResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Data },
        ]
    }

    static MapCommandPlaybackResponse = new Map([
        [0, 'status'],
        [1, 'data'],
    ])

    static SchemaCommandSeek = TlvObject({
        position: TlvField(0,TlvUInt64),
    })

    static TemplateCommandSeek = function(params) {
        return [
          { 'tag': 0, 'type': 'uint64_t', 'value': params.Position },
        ]
    }

    static MapCommandSeek = new Map([
        [0, 'position'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterMediaPlaybackServer.Attribute.CurrentState
                "name": "CurrentState",
                "type": "PlaybackStateEnum",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterMediaPlaybackServer.Attribute.StartTime
                "name": "StartTime",
                "type": "epoch_us",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterMediaPlaybackServer.Attribute.Duration
                "name": "Duration",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterMediaPlaybackServer.Attribute.SampledPosition
                "name": "SampledPosition",
                "type": "PlaybackPosition",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterMediaPlaybackServer.Attribute.PlaybackSpeed
                "name": "PlaybackSpeed",
                "type": "single",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterMediaPlaybackServer.Attribute.SeekRangeEnd
                "name": "SeekRangeEnd",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterMediaPlaybackServer.Attribute.SeekRangeStart
                "name": "SeekRangeStart",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterMediaPlaybackServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterMediaPlaybackServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterMediaPlaybackServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterMediaPlaybackServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterMediaPlaybackServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterMediaPlayback.Command.Play: this.onPlay(msg, path); break;
            case ClusterMediaPlayback.Command.Pause: this.onPause(msg, path); break;
            case ClusterMediaPlayback.Command.StopPlayback: this.onStopPlayback(msg, path); break;
            case ClusterMediaPlayback.Command.StartOver: this.onStartOver(msg, path); break;
            case ClusterMediaPlayback.Command.Previous: this.onPrevious(msg, path); break;
            case ClusterMediaPlayback.Command.Next: this.onNext(msg, path); break;
            case ClusterMediaPlayback.Command.Rewind: this.onRewind(msg, path); break;
            case ClusterMediaPlayback.Command.FastForward: this.onFastForward(msg, path); break;
            case ClusterMediaPlayback.Command.SkipForward: this.onSkipForward(msg, path); break;
            case ClusterMediaPlayback.Command.SkipBackward: this.onSkipBackward(msg, path); break;
            case ClusterMediaPlayback.Command.PlaybackResponse: this.onPlaybackResponse(msg, path); break;
            case ClusterMediaPlayback.Command.Seek: this.onSeek(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onPlay(msg, commandPath)
    {
        console.log(this.constructor.name+".onPlay")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onPause(msg, commandPath)
    {
        console.log(this.constructor.name+".onPause")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStopPlayback(msg, commandPath)
    {
        console.log(this.constructor.name+".onStopPlayback")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStartOver(msg, commandPath)
    {
        console.log(this.constructor.name+".onStartOver")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onPrevious(msg, commandPath)
    {
        console.log(this.constructor.name+".onPrevious")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onNext(msg, commandPath)
    {
        console.log(this.constructor.name+".onNext")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRewind(msg, commandPath)
    {
        console.log(this.constructor.name+".onRewind")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onFastForward(msg, commandPath)
    {
        console.log(this.constructor.name+".onFastForward")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSkipForward(msg, commandPath)
    {
        console.log(this.constructor.name+".onSkipForward")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSkipBackward(msg, commandPath)
    {
        console.log(this.constructor.name+".onSkipBackward")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onPlaybackResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onPlaybackResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSeek(msg, commandPath)
    {
        console.log(this.constructor.name+".onSeek")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterMediaInput
 */
class ClusterMediaInput
{
    static CLUSTER_NAME = 'MEDIA_INPUT_CLUSTER'
    static CLUSTER_ID = 0x0507

    static Command = {
        SelectInput: 0,
        ShowInputStatus: 1,
        HideInputStatus: 2,
        RenameInput: 3,
    }
}

/**
 * ClusterMediaInputServer
 */
class ClusterMediaInputServer
{
    static Attribute = {
        InputList: 0,
        CurrentInput: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandSelectInput = TlvObject({
        index: TlvField(0,TlvUInt8),
    })

    static TemplateCommandSelectInput = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Index },
        ]
    }

    static MapCommandSelectInput = new Map([
        [0, 'index'],
    ])

    static SchemaCommandShowInputStatus = TlvObject({
    })

    static TemplateCommandShowInputStatus = function(params) {
        return [
        ]
    }

    static MapCommandShowInputStatus = new Map([
    ])

    static SchemaCommandHideInputStatus = TlvObject({
    })

    static TemplateCommandHideInputStatus = function(params) {
        return [
        ]
    }

    static MapCommandHideInputStatus = new Map([
    ])

    static SchemaCommandRenameInput = TlvObject({
        index: TlvField(0,TlvUInt8),
        name: TlvField(1,TlvString),
    })

    static TemplateCommandRenameInput = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Index },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Name },
        ]
    }

    static MapCommandRenameInput = new Map([
        [0, 'index'],
        [1, 'name'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterMediaInputServer.Attribute.InputList
                "name": "InputList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterMediaInputServer.Attribute.CurrentInput
                "name": "CurrentInput",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterMediaInputServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterMediaInputServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterMediaInputServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterMediaInputServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterMediaInputServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterMediaInput.Command.SelectInput: this.onSelectInput(msg, path); break;
            case ClusterMediaInput.Command.ShowInputStatus: this.onShowInputStatus(msg, path); break;
            case ClusterMediaInput.Command.HideInputStatus: this.onHideInputStatus(msg, path); break;
            case ClusterMediaInput.Command.RenameInput: this.onRenameInput(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onSelectInput(msg, commandPath)
    {
        console.log(this.constructor.name+".onSelectInput")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onShowInputStatus(msg, commandPath)
    {
        console.log(this.constructor.name+".onShowInputStatus")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onHideInputStatus(msg, commandPath)
    {
        console.log(this.constructor.name+".onHideInputStatus")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRenameInput(msg, commandPath)
    {
        console.log(this.constructor.name+".onRenameInput")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterLowPower
 */
class ClusterLowPower
{
    static CLUSTER_NAME = 'LOW_POWER_CLUSTER'
    static CLUSTER_ID = 0x0508

    static Command = {
        Sleep: 0,
    }
}

/**
 * ClusterLowPowerServer
 */
class ClusterLowPowerServer
{
    static Attribute = {
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandSleep = TlvObject({
    })

    static TemplateCommandSleep = function(params) {
        return [
        ]
    }

    static MapCommandSleep = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            65528: { // ClusterLowPowerServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterLowPowerServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterLowPowerServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterLowPowerServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterLowPowerServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterLowPower.Command.Sleep: this.onSleep(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onSleep(msg, commandPath)
    {
        console.log(this.constructor.name+".onSleep")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterKeypadInput
 */
class ClusterKeypadInput
{
    static CLUSTER_NAME = 'KEYPAD_INPUT_CLUSTER'
    static CLUSTER_ID = 0x0509

    static Command = {
        SendKey: 0,
        SendKeyResponse: 1,
    }
}

/**
 * ClusterKeypadInputServer
 */
class ClusterKeypadInputServer
{
    static Attribute = {
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandSendKey = TlvObject({
        keyCode: TlvField(0,TlvUInt8),
    })

    static TemplateCommandSendKey = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.KeyCode },
        ]
    }

    static MapCommandSendKey = new Map([
        [0, 'keyCode'],
    ])

    static SchemaCommandSendKeyResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
    })

    static TemplateCommandSendKeyResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
        ]
    }

    static MapCommandSendKeyResponse = new Map([
        [0, 'status'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            65528: { // ClusterKeypadInputServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterKeypadInputServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterKeypadInputServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterKeypadInputServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterKeypadInputServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterKeypadInput.Command.SendKey: this.onSendKey(msg, path); break;
            case ClusterKeypadInput.Command.SendKeyResponse: this.onSendKeyResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onSendKey(msg, commandPath)
    {
        console.log(this.constructor.name+".onSendKey")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSendKeyResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onSendKeyResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterContentLauncher
 */
class ClusterContentLauncher
{
    static CLUSTER_NAME = 'CONTENT_LAUNCHER_CLUSTER'
    static CLUSTER_ID = 0x050A

    static Command = {
        LaunchContent: 0,
        LaunchURL: 1,
        LaunchResponse: 2,
    }
}

/**
 * ClusterContentLauncherServer
 */
class ClusterContentLauncherServer
{
    static Attribute = {
        AcceptHeader: 0,
        SupportedStreamingProtocols: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandLaunchContent = TlvObject({
        search: TlvField(0,TlvObject),
        autoPlay: TlvField(1,Tlvbool),
        data: TlvField(2,TlvString),
    })

    static TemplateCommandLaunchContent = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Search
          { 'tag': 1, 'type': 'bool', 'value': params.AutoPlay },
          { 'tag': 2, 'type': 'chip::CharSpan', 'value': params.Data },
        ]
    }

    static MapCommandLaunchContent = new Map([
        [0, 'search'],
        [1, 'autoPlay'],
        [2, 'data'],
    ])

    static SchemaCommandLaunchURL = TlvObject({
        contentURL: TlvField(0,TlvString),
        displayString: TlvField(1,TlvString),
        brandingInformation: TlvField(2,TlvObject),
    })

    static TemplateCommandLaunchURL = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::CharSpan', 'value': params.ContentURL },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.DisplayString },
          { 'tag': 2, 'type': 'struct', 'value': [] }, // params.BrandingInformation
        ]
    }

    static MapCommandLaunchURL = new Map([
        [0, 'contentURL'],
        [1, 'displayString'],
        [2, 'brandingInformation'],
    ])

    static SchemaCommandLaunchResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        data: TlvField(1,TlvString),
    })

    static TemplateCommandLaunchResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Data },
        ]
    }

    static MapCommandLaunchResponse = new Map([
        [0, 'status'],
        [1, 'data'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterContentLauncherServer.Attribute.AcceptHeader
                "name": "AcceptHeader",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterContentLauncherServer.Attribute.SupportedStreamingProtocols
                "name": "SupportedStreamingProtocols",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterContentLauncherServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterContentLauncherServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterContentLauncherServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterContentLauncherServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterContentLauncherServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterContentLauncher.Command.LaunchContent: this.onLaunchContent(msg, path); break;
            case ClusterContentLauncher.Command.LaunchURL: this.onLaunchURL(msg, path); break;
            case ClusterContentLauncher.Command.LaunchResponse: this.onLaunchResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onLaunchContent(msg, commandPath)
    {
        console.log(this.constructor.name+".onLaunchContent")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onLaunchURL(msg, commandPath)
    {
        console.log(this.constructor.name+".onLaunchURL")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onLaunchResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onLaunchResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterAudioOutput
 */
class ClusterAudioOutput
{
    static CLUSTER_NAME = 'AUDIO_OUTPUT_CLUSTER'
    static CLUSTER_ID = 0x050B

    static Command = {
        SelectOutput: 0,
        RenameOutput: 1,
    }
}

/**
 * ClusterAudioOutputServer
 */
class ClusterAudioOutputServer
{
    static Attribute = {
        OutputList: 0,
        CurrentOutput: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandSelectOutput = TlvObject({
        index: TlvField(0,TlvUInt8),
    })

    static TemplateCommandSelectOutput = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Index },
        ]
    }

    static MapCommandSelectOutput = new Map([
        [0, 'index'],
    ])

    static SchemaCommandRenameOutput = TlvObject({
        index: TlvField(0,TlvUInt8),
        name: TlvField(1,TlvString),
    })

    static TemplateCommandRenameOutput = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Index },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.Name },
        ]
    }

    static MapCommandRenameOutput = new Map([
        [0, 'index'],
        [1, 'name'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterAudioOutputServer.Attribute.OutputList
                "name": "OutputList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterAudioOutputServer.Attribute.CurrentOutput
                "name": "CurrentOutput",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterAudioOutputServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterAudioOutputServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterAudioOutputServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterAudioOutputServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterAudioOutputServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterAudioOutput.Command.SelectOutput: this.onSelectOutput(msg, path); break;
            case ClusterAudioOutput.Command.RenameOutput: this.onRenameOutput(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onSelectOutput(msg, commandPath)
    {
        console.log(this.constructor.name+".onSelectOutput")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onRenameOutput(msg, commandPath)
    {
        console.log(this.constructor.name+".onRenameOutput")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterApplicationLauncher
 */
class ClusterApplicationLauncher
{
    static CLUSTER_NAME = 'APPLICATION_LAUNCHER_CLUSTER'
    static CLUSTER_ID = 0x050C

    static Command = {
        LaunchApp: 0,
        StopApp: 1,
        HideApp: 2,
        LauncherResponse: 3,
    }
}

/**
 * ClusterApplicationLauncherServer
 */
class ClusterApplicationLauncherServer
{
    static Attribute = {
        CatalogList: 0,
        CurrentApp: 1,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandLaunchApp = TlvObject({
        application: TlvField(0,TlvObject),
        data: TlvField(1,TlvByteString),
    })

    static TemplateCommandLaunchApp = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Application
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.Data },
        ]
    }

    static MapCommandLaunchApp = new Map([
        [0, 'application'],
        [1, 'data'],
    ])

    static SchemaCommandStopApp = TlvObject({
        application: TlvField(0,TlvObject),
    })

    static TemplateCommandStopApp = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Application
        ]
    }

    static MapCommandStopApp = new Map([
        [0, 'application'],
    ])

    static SchemaCommandHideApp = TlvObject({
        application: TlvField(0,TlvObject),
    })

    static TemplateCommandHideApp = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Application
        ]
    }

    static MapCommandHideApp = new Map([
        [0, 'application'],
    ])

    static SchemaCommandLauncherResponse = TlvObject({
        status: TlvField(0,TlvUInt8),
        data: TlvField(1,TlvByteString),
    })

    static TemplateCommandLauncherResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 1, 'type': 'chip::ByteSpan', 'value': params.Data },
        ]
    }

    static MapCommandLauncherResponse = new Map([
        [0, 'status'],
        [1, 'data'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterApplicationLauncherServer.Attribute.CatalogList
                "name": "CatalogList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterApplicationLauncherServer.Attribute.CurrentApp
                "name": "CurrentApp",
                "type": "ApplicationEP",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterApplicationLauncherServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterApplicationLauncherServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterApplicationLauncherServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterApplicationLauncherServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterApplicationLauncherServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterApplicationLauncher.Command.LaunchApp: this.onLaunchApp(msg, path); break;
            case ClusterApplicationLauncher.Command.StopApp: this.onStopApp(msg, path); break;
            case ClusterApplicationLauncher.Command.HideApp: this.onHideApp(msg, path); break;
            case ClusterApplicationLauncher.Command.LauncherResponse: this.onLauncherResponse(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onLaunchApp(msg, commandPath)
    {
        console.log(this.constructor.name+".onLaunchApp")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onStopApp(msg, commandPath)
    {
        console.log(this.constructor.name+".onStopApp")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onHideApp(msg, commandPath)
    {
        console.log(this.constructor.name+".onHideApp")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onLauncherResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onLauncherResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterApplicationBasic
 */
class ClusterApplicationBasic
{
    static CLUSTER_NAME = 'APPLICATION_BASIC_CLUSTER'
    static CLUSTER_ID = 0x050D

    static Command = {
    }
}

/**
 * ClusterApplicationBasicServer
 */
class ClusterApplicationBasicServer
{
    static Attribute = {
        VendorName: 0,
        VendorID: 1,
        ApplicationName: 2,
        ProductID: 3,
        Application: 4,
        Status: 5,
        ApplicationVersion: 6,
        AllowedVendorList: 7,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================

    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterApplicationBasicServer.Attribute.VendorName
                "name": "VendorName",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterApplicationBasicServer.Attribute.VendorID
                "name": "VendorID",
                "type": "vendor_id",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterApplicationBasicServer.Attribute.ApplicationName
                "name": "ApplicationName",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterApplicationBasicServer.Attribute.ProductID
                "name": "ProductID",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterApplicationBasicServer.Attribute.Application
                "name": "Application",
                "type": "ApplicationBasicApplication",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterApplicationBasicServer.Attribute.Status
                "name": "Status",
                "type": "ApplicationStatusEnum",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterApplicationBasicServer.Attribute.ApplicationVersion
                "name": "ApplicationVersion",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterApplicationBasicServer.Attribute.AllowedVendorList
                "name": "AllowedVendorList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterApplicationBasicServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterApplicationBasicServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterApplicationBasicServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterApplicationBasicServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterApplicationBasicServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
}

/**
 * ClusterAccountLogin
 */
class ClusterAccountLogin
{
    static CLUSTER_NAME = 'ACCOUNT_LOGIN_CLUSTER'
    static CLUSTER_ID = 0x050E

    static Command = {
        GetSetupPIN: 0,
        GetSetupPINResponse: 1,
        Login: 2,
        Logout: 3,
    }
}

/**
 * ClusterAccountLoginServer
 */
class ClusterAccountLoginServer
{
    static Attribute = {
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandGetSetupPIN = TlvObject({
        tempAccountIdentifier: TlvField(0,TlvString),
    })

    static TemplateCommandGetSetupPIN = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::CharSpan', 'value': params.TempAccountIdentifier },
        ]
    }

    static MapCommandGetSetupPIN = new Map([
        [0, 'tempAccountIdentifier'],
    ])

    static SchemaCommandGetSetupPINResponse = TlvObject({
        setupPIN: TlvField(0,TlvString),
    })

    static TemplateCommandGetSetupPINResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::CharSpan', 'value': params.SetupPIN },
        ]
    }

    static MapCommandGetSetupPINResponse = new Map([
        [0, 'setupPIN'],
    ])

    static SchemaCommandLogin = TlvObject({
        tempAccountIdentifier: TlvField(0,TlvString),
        setupPIN: TlvField(1,TlvString),
    })

    static TemplateCommandLogin = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::CharSpan', 'value': params.TempAccountIdentifier },
          { 'tag': 1, 'type': 'chip::CharSpan', 'value': params.SetupPIN },
        ]
    }

    static MapCommandLogin = new Map([
        [0, 'tempAccountIdentifier'],
        [1, 'setupPIN'],
    ])

    static SchemaCommandLogout = TlvObject({
    })

    static TemplateCommandLogout = function(params) {
        return [
        ]
    }

    static MapCommandLogout = new Map([
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            65528: { // ClusterAccountLoginServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterAccountLoginServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterAccountLoginServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterAccountLoginServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterAccountLoginServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterAccountLogin.Command.GetSetupPIN: this.onGetSetupPIN(msg, path); break;
            case ClusterAccountLogin.Command.GetSetupPINResponse: this.onGetSetupPINResponse(msg, path); break;
            case ClusterAccountLogin.Command.Login: this.onLogin(msg, path); break;
            case ClusterAccountLogin.Command.Logout: this.onLogout(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onGetSetupPIN(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetSetupPIN")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetSetupPINResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetSetupPINResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onLogin(msg, commandPath)
    {
        console.log(this.constructor.name+".onLogin")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onLogout(msg, commandPath)
    {
        console.log(this.constructor.name+".onLogout")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterElectricalMeasurement
 */
class ClusterElectricalMeasurement
{
    static CLUSTER_NAME = 'ELECTRICAL_MEASUREMENT_CLUSTER'
    static CLUSTER_ID = 0x0B04

    static Command = {
        GetProfileInfoResponseCommand: 0,
        GetProfileInfoCommand: 0,
        GetMeasurementProfileResponseCommand: 1,
        GetMeasurementProfileCommand: 1,
    }
}

/**
 * ClusterElectricalMeasurementServer
 */
class ClusterElectricalMeasurementServer
{
    static Attribute = {
        MeasurementType: 0,
        DcVoltage: 256,
        DcVoltageMin: 257,
        DcVoltageMax: 258,
        DcCurrent: 259,
        DcCurrentMin: 260,
        DcCurrentMax: 261,
        DcPower: 262,
        DcPowerMin: 263,
        DcPowerMax: 264,
        DcVoltageMultiplier: 512,
        DcVoltageDivisor: 513,
        DcCurrentMultiplier: 514,
        DcCurrentDivisor: 515,
        DcPowerMultiplier: 516,
        DcPowerDivisor: 517,
        AcFrequency: 768,
        AcFrequencyMin: 769,
        AcFrequencyMax: 770,
        NeutralCurrent: 771,
        TotalActivePower: 772,
        TotalReactivePower: 773,
        TotalApparentPower: 774,
        Measured1stHarmonicCurrent: 775,
        Measured3rdHarmonicCurrent: 776,
        Measured5thHarmonicCurrent: 777,
        Measured7thHarmonicCurrent: 778,
        Measured9thHarmonicCurrent: 779,
        Measured11thHarmonicCurrent: 780,
        MeasuredPhase1stHarmonicCurrent: 781,
        MeasuredPhase3rdHarmonicCurrent: 782,
        MeasuredPhase5thHarmonicCurrent: 783,
        MeasuredPhase7thHarmonicCurrent: 784,
        MeasuredPhase9thHarmonicCurrent: 785,
        MeasuredPhase11thHarmonicCurrent: 786,
        AcFrequencyMultiplier: 1024,
        AcFrequencyDivisor: 1025,
        PowerMultiplier: 1026,
        PowerDivisor: 1027,
        HarmonicCurrentMultiplier: 1028,
        PhaseHarmonicCurrentMultiplier: 1029,
        InstantaneousVoltage: 1280,
        InstantaneousLineCurrent: 1281,
        InstantaneousActiveCurrent: 1282,
        InstantaneousReactiveCurrent: 1283,
        InstantaneousPower: 1284,
        RmsVoltage: 1285,
        RmsVoltageMin: 1286,
        RmsVoltageMax: 1287,
        RmsCurrent: 1288,
        RmsCurrentMin: 1289,
        RmsCurrentMax: 1290,
        ActivePower: 1291,
        ActivePowerMin: 1292,
        ActivePowerMax: 1293,
        ReactivePower: 1294,
        ApparentPower: 1295,
        PowerFactor: 1296,
        AverageRmsVoltageMeasurementPeriod: 1297,
        AverageRmsUnderVoltageCounter: 1299,
        RmsExtremeOverVoltagePeriod: 1300,
        RmsExtremeUnderVoltagePeriod: 1301,
        RmsVoltageSagPeriod: 1302,
        RmsVoltageSwellPeriod: 1303,
        AcVoltageMultiplier: 1536,
        AcVoltageDivisor: 1537,
        AcCurrentMultiplier: 1538,
        AcCurrentDivisor: 1539,
        AcPowerMultiplier: 1540,
        AcPowerDivisor: 1541,
        OverloadAlarmsMask: 1792,
        VoltageOverload: 1793,
        CurrentOverload: 1794,
        AcOverloadAlarmsMask: 2048,
        AcVoltageOverload: 2049,
        AcCurrentOverload: 2050,
        AcActivePowerOverload: 2051,
        AcReactivePowerOverload: 2052,
        AverageRmsOverVoltage: 2053,
        AverageRmsUnderVoltage: 2054,
        RmsExtremeOverVoltage: 2055,
        RmsExtremeUnderVoltage: 2056,
        RmsVoltageSag: 2057,
        RmsVoltageSwell: 2058,
        LineCurrentPhaseB: 2305,
        ActiveCurrentPhaseB: 2306,
        ReactiveCurrentPhaseB: 2307,
        RmsVoltagePhaseB: 2309,
        RmsVoltageMinPhaseB: 2310,
        RmsVoltageMaxPhaseB: 2311,
        RmsCurrentPhaseB: 2312,
        RmsCurrentMinPhaseB: 2313,
        RmsCurrentMaxPhaseB: 2314,
        ActivePowerPhaseB: 2315,
        ActivePowerMinPhaseB: 2316,
        ActivePowerMaxPhaseB: 2317,
        ReactivePowerPhaseB: 2318,
        ApparentPowerPhaseB: 2319,
        PowerFactorPhaseB: 2320,
        AverageRmsVoltageMeasurementPeriodPhaseB: 2321,
        AverageRmsOverVoltageCounterPhaseB: 2322,
        AverageRmsUnderVoltageCounterPhaseB: 2323,
        RmsExtremeOverVoltagePeriodPhaseB: 2324,
        RmsExtremeUnderVoltagePeriodPhaseB: 2325,
        RmsVoltageSagPeriodPhaseB: 2326,
        RmsVoltageSwellPeriodPhaseB: 2327,
        LineCurrentPhaseC: 2561,
        ActiveCurrentPhaseC: 2562,
        ReactiveCurrentPhaseC: 2563,
        RmsVoltagePhaseC: 2565,
        RmsVoltageMinPhaseC: 2566,
        RmsVoltageMaxPhaseC: 2567,
        RmsCurrentPhaseC: 2568,
        RmsCurrentMinPhaseC: 2569,
        RmsCurrentMaxPhaseC: 2570,
        ActivePowerPhaseC: 2571,
        ActivePowerMinPhaseC: 2572,
        ActivePowerMaxPhaseC: 2573,
        ReactivePowerPhaseC: 2574,
        ApparentPowerPhaseC: 2575,
        PowerFactorPhaseC: 2576,
        AverageRmsVoltageMeasurementPeriodPhaseC: 2577,
        AverageRmsOverVoltageCounterPhaseC: 2578,
        AverageRmsUnderVoltageCounterPhaseC: 2579,
        RmsExtremeOverVoltagePeriodPhaseC: 2580,
        RmsExtremeUnderVoltagePeriodPhaseC: 2581,
        RmsVoltageSagPeriodPhaseC: 2582,
        RmsVoltageSwellPeriodPhaseC: 2583,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandGetProfileInfoResponseCommand = TlvObject({
        profileCount: TlvField(0,TlvUInt8),
        profileIntervalPeriod: TlvField(1,TlvUInt8),
        maxNumberOfIntervals: TlvField(2,TlvUInt8),
        listOfAttributes: TlvField(3,TlvArray),
    })

    static TemplateCommandGetProfileInfoResponseCommand = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.ProfileCount },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.ProfileIntervalPeriod },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.MaxNumberOfIntervals },
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.ListOfAttributes
        ]
    }

    static MapCommandGetProfileInfoResponseCommand = new Map([
        [0, 'profileCount'],
        [1, 'profileIntervalPeriod'],
        [2, 'maxNumberOfIntervals'],
        [3, 'listOfAttributes'],
    ])

    static SchemaCommandGetProfileInfoCommand = TlvObject({
    })

    static TemplateCommandGetProfileInfoCommand = function(params) {
        return [
        ]
    }

    static MapCommandGetProfileInfoCommand = new Map([
    ])

    static SchemaCommandGetMeasurementProfileResponseCommand = TlvObject({
        startTime: TlvField(0,TlvUInt32),
        status: TlvField(1,TlvUInt8),
        profileIntervalPeriod: TlvField(2,TlvUInt8),
        numberOfIntervalsDelivered: TlvField(3,TlvUInt8),
        attributeId: TlvField(4,TlvUInt16),
        intervals: TlvField(5,TlvArray),
    })

    static TemplateCommandGetMeasurementProfileResponseCommand = function(params) {
        return [
          { 'tag': 0, 'type': 'uint32_t', 'value': params.StartTime },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Status },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.ProfileIntervalPeriod },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.NumberOfIntervalsDelivered },
          { 'tag': 4, 'type': 'uint16_t', 'value': params.AttributeId },
          { 'tag': 5, 'type': 'array', 'value': [] }, // params.Intervals
        ]
    }

    static MapCommandGetMeasurementProfileResponseCommand = new Map([
        [0, 'startTime'],
        [1, 'status'],
        [2, 'profileIntervalPeriod'],
        [3, 'numberOfIntervalsDelivered'],
        [4, 'attributeId'],
        [5, 'intervals'],
    ])

    static SchemaCommandGetMeasurementProfileCommand = TlvObject({
        attributeId: TlvField(0,TlvUInt16),
        startTime: TlvField(1,TlvUInt32),
        numberOfIntervals: TlvField(2,TlvUInt8),
    })

    static TemplateCommandGetMeasurementProfileCommand = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.AttributeId },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.StartTime },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.NumberOfIntervals },
        ]
    }

    static MapCommandGetMeasurementProfileCommand = new Map([
        [0, 'attributeId'],
        [1, 'startTime'],
        [2, 'numberOfIntervals'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterElectricalMeasurementServer.Attribute.MeasurementType
                "name": "MeasurementType",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            256: { // ClusterElectricalMeasurementServer.Attribute.DcVoltage
                "name": "DcVoltage",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            257: { // ClusterElectricalMeasurementServer.Attribute.DcVoltageMin
                "name": "DcVoltageMin",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            258: { // ClusterElectricalMeasurementServer.Attribute.DcVoltageMax
                "name": "DcVoltageMax",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            259: { // ClusterElectricalMeasurementServer.Attribute.DcCurrent
                "name": "DcCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            260: { // ClusterElectricalMeasurementServer.Attribute.DcCurrentMin
                "name": "DcCurrentMin",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            261: { // ClusterElectricalMeasurementServer.Attribute.DcCurrentMax
                "name": "DcCurrentMax",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            262: { // ClusterElectricalMeasurementServer.Attribute.DcPower
                "name": "DcPower",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            263: { // ClusterElectricalMeasurementServer.Attribute.DcPowerMin
                "name": "DcPowerMin",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            264: { // ClusterElectricalMeasurementServer.Attribute.DcPowerMax
                "name": "DcPowerMax",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            512: { // ClusterElectricalMeasurementServer.Attribute.DcVoltageMultiplier
                "name": "DcVoltageMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            513: { // ClusterElectricalMeasurementServer.Attribute.DcVoltageDivisor
                "name": "DcVoltageDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            514: { // ClusterElectricalMeasurementServer.Attribute.DcCurrentMultiplier
                "name": "DcCurrentMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            515: { // ClusterElectricalMeasurementServer.Attribute.DcCurrentDivisor
                "name": "DcCurrentDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            516: { // ClusterElectricalMeasurementServer.Attribute.DcPowerMultiplier
                "name": "DcPowerMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            517: { // ClusterElectricalMeasurementServer.Attribute.DcPowerDivisor
                "name": "DcPowerDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            768: { // ClusterElectricalMeasurementServer.Attribute.AcFrequency
                "name": "AcFrequency",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            769: { // ClusterElectricalMeasurementServer.Attribute.AcFrequencyMin
                "name": "AcFrequencyMin",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            770: { // ClusterElectricalMeasurementServer.Attribute.AcFrequencyMax
                "name": "AcFrequencyMax",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            771: { // ClusterElectricalMeasurementServer.Attribute.NeutralCurrent
                "name": "NeutralCurrent",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            772: { // ClusterElectricalMeasurementServer.Attribute.TotalActivePower
                "name": "TotalActivePower",
                "type": "int32s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            773: { // ClusterElectricalMeasurementServer.Attribute.TotalReactivePower
                "name": "TotalReactivePower",
                "type": "int32s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            774: { // ClusterElectricalMeasurementServer.Attribute.TotalApparentPower
                "name": "TotalApparentPower",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            775: { // ClusterElectricalMeasurementServer.Attribute.Measured1stHarmonicCurrent
                "name": "Measured1stHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            776: { // ClusterElectricalMeasurementServer.Attribute.Measured3rdHarmonicCurrent
                "name": "Measured3rdHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            777: { // ClusterElectricalMeasurementServer.Attribute.Measured5thHarmonicCurrent
                "name": "Measured5thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            778: { // ClusterElectricalMeasurementServer.Attribute.Measured7thHarmonicCurrent
                "name": "Measured7thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            779: { // ClusterElectricalMeasurementServer.Attribute.Measured9thHarmonicCurrent
                "name": "Measured9thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            780: { // ClusterElectricalMeasurementServer.Attribute.Measured11thHarmonicCurrent
                "name": "Measured11thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            781: { // ClusterElectricalMeasurementServer.Attribute.MeasuredPhase1stHarmonicCurrent
                "name": "MeasuredPhase1stHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            782: { // ClusterElectricalMeasurementServer.Attribute.MeasuredPhase3rdHarmonicCurrent
                "name": "MeasuredPhase3rdHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            783: { // ClusterElectricalMeasurementServer.Attribute.MeasuredPhase5thHarmonicCurrent
                "name": "MeasuredPhase5thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            784: { // ClusterElectricalMeasurementServer.Attribute.MeasuredPhase7thHarmonicCurrent
                "name": "MeasuredPhase7thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            785: { // ClusterElectricalMeasurementServer.Attribute.MeasuredPhase9thHarmonicCurrent
                "name": "MeasuredPhase9thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            786: { // ClusterElectricalMeasurementServer.Attribute.MeasuredPhase11thHarmonicCurrent
                "name": "MeasuredPhase11thHarmonicCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1024: { // ClusterElectricalMeasurementServer.Attribute.AcFrequencyMultiplier
                "name": "AcFrequencyMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1025: { // ClusterElectricalMeasurementServer.Attribute.AcFrequencyDivisor
                "name": "AcFrequencyDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1026: { // ClusterElectricalMeasurementServer.Attribute.PowerMultiplier
                "name": "PowerMultiplier",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1027: { // ClusterElectricalMeasurementServer.Attribute.PowerDivisor
                "name": "PowerDivisor",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1028: { // ClusterElectricalMeasurementServer.Attribute.HarmonicCurrentMultiplier
                "name": "HarmonicCurrentMultiplier",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1029: { // ClusterElectricalMeasurementServer.Attribute.PhaseHarmonicCurrentMultiplier
                "name": "PhaseHarmonicCurrentMultiplier",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1280: { // ClusterElectricalMeasurementServer.Attribute.InstantaneousVoltage
                "name": "InstantaneousVoltage",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1281: { // ClusterElectricalMeasurementServer.Attribute.InstantaneousLineCurrent
                "name": "InstantaneousLineCurrent",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1282: { // ClusterElectricalMeasurementServer.Attribute.InstantaneousActiveCurrent
                "name": "InstantaneousActiveCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1283: { // ClusterElectricalMeasurementServer.Attribute.InstantaneousReactiveCurrent
                "name": "InstantaneousReactiveCurrent",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1284: { // ClusterElectricalMeasurementServer.Attribute.InstantaneousPower
                "name": "InstantaneousPower",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1285: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltage
                "name": "RmsVoltage",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1286: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageMin
                "name": "RmsVoltageMin",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1287: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageMax
                "name": "RmsVoltageMax",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1288: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrent
                "name": "RmsCurrent",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1289: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentMin
                "name": "RmsCurrentMin",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1290: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentMax
                "name": "RmsCurrentMax",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1291: { // ClusterElectricalMeasurementServer.Attribute.ActivePower
                "name": "ActivePower",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1292: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerMin
                "name": "ActivePowerMin",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1293: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerMax
                "name": "ActivePowerMax",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1294: { // ClusterElectricalMeasurementServer.Attribute.ReactivePower
                "name": "ReactivePower",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1295: { // ClusterElectricalMeasurementServer.Attribute.ApparentPower
                "name": "ApparentPower",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1296: { // ClusterElectricalMeasurementServer.Attribute.PowerFactor
                "name": "PowerFactor",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1297: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsVoltageMeasurementPeriod
                "name": "AverageRmsVoltageMeasurementPeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1299: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsUnderVoltageCounter
                "name": "AverageRmsUnderVoltageCounter",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1300: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeOverVoltagePeriod
                "name": "RmsExtremeOverVoltagePeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1301: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeUnderVoltagePeriod
                "name": "RmsExtremeUnderVoltagePeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1302: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSagPeriod
                "name": "RmsVoltageSagPeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1303: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSwellPeriod
                "name": "RmsVoltageSwellPeriod",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1536: { // ClusterElectricalMeasurementServer.Attribute.AcVoltageMultiplier
                "name": "AcVoltageMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1537: { // ClusterElectricalMeasurementServer.Attribute.AcVoltageDivisor
                "name": "AcVoltageDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1538: { // ClusterElectricalMeasurementServer.Attribute.AcCurrentMultiplier
                "name": "AcCurrentMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1539: { // ClusterElectricalMeasurementServer.Attribute.AcCurrentDivisor
                "name": "AcCurrentDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1540: { // ClusterElectricalMeasurementServer.Attribute.AcPowerMultiplier
                "name": "AcPowerMultiplier",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1541: { // ClusterElectricalMeasurementServer.Attribute.AcPowerDivisor
                "name": "AcPowerDivisor",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1792: { // ClusterElectricalMeasurementServer.Attribute.OverloadAlarmsMask
                "name": "OverloadAlarmsMask",
                "type": "bitmap8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1793: { // ClusterElectricalMeasurementServer.Attribute.VoltageOverload
                "name": "VoltageOverload",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1794: { // ClusterElectricalMeasurementServer.Attribute.CurrentOverload
                "name": "CurrentOverload",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2048: { // ClusterElectricalMeasurementServer.Attribute.AcOverloadAlarmsMask
                "name": "AcOverloadAlarmsMask",
                "type": "bitmap16",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2049: { // ClusterElectricalMeasurementServer.Attribute.AcVoltageOverload
                "name": "AcVoltageOverload",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2050: { // ClusterElectricalMeasurementServer.Attribute.AcCurrentOverload
                "name": "AcCurrentOverload",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2051: { // ClusterElectricalMeasurementServer.Attribute.AcActivePowerOverload
                "name": "AcActivePowerOverload",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2052: { // ClusterElectricalMeasurementServer.Attribute.AcReactivePowerOverload
                "name": "AcReactivePowerOverload",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2053: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsOverVoltage
                "name": "AverageRmsOverVoltage",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2054: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsUnderVoltage
                "name": "AverageRmsUnderVoltage",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2055: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeOverVoltage
                "name": "RmsExtremeOverVoltage",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2056: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeUnderVoltage
                "name": "RmsExtremeUnderVoltage",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2057: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSag
                "name": "RmsVoltageSag",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2058: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSwell
                "name": "RmsVoltageSwell",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2305: { // ClusterElectricalMeasurementServer.Attribute.LineCurrentPhaseB
                "name": "LineCurrentPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2306: { // ClusterElectricalMeasurementServer.Attribute.ActiveCurrentPhaseB
                "name": "ActiveCurrentPhaseB",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2307: { // ClusterElectricalMeasurementServer.Attribute.ReactiveCurrentPhaseB
                "name": "ReactiveCurrentPhaseB",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2309: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltagePhaseB
                "name": "RmsVoltagePhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2310: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageMinPhaseB
                "name": "RmsVoltageMinPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2311: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageMaxPhaseB
                "name": "RmsVoltageMaxPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2312: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentPhaseB
                "name": "RmsCurrentPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2313: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentMinPhaseB
                "name": "RmsCurrentMinPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2314: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentMaxPhaseB
                "name": "RmsCurrentMaxPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2315: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerPhaseB
                "name": "ActivePowerPhaseB",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2316: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerMinPhaseB
                "name": "ActivePowerMinPhaseB",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2317: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerMaxPhaseB
                "name": "ActivePowerMaxPhaseB",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2318: { // ClusterElectricalMeasurementServer.Attribute.ReactivePowerPhaseB
                "name": "ReactivePowerPhaseB",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2319: { // ClusterElectricalMeasurementServer.Attribute.ApparentPowerPhaseB
                "name": "ApparentPowerPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2320: { // ClusterElectricalMeasurementServer.Attribute.PowerFactorPhaseB
                "name": "PowerFactorPhaseB",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2321: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsVoltageMeasurementPeriodPhaseB
                "name": "AverageRmsVoltageMeasurementPeriodPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2322: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsOverVoltageCounterPhaseB
                "name": "AverageRmsOverVoltageCounterPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2323: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsUnderVoltageCounterPhaseB
                "name": "AverageRmsUnderVoltageCounterPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2324: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeOverVoltagePeriodPhaseB
                "name": "RmsExtremeOverVoltagePeriodPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2325: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeUnderVoltagePeriodPhaseB
                "name": "RmsExtremeUnderVoltagePeriodPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2326: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSagPeriodPhaseB
                "name": "RmsVoltageSagPeriodPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2327: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSwellPeriodPhaseB
                "name": "RmsVoltageSwellPeriodPhaseB",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2561: { // ClusterElectricalMeasurementServer.Attribute.LineCurrentPhaseC
                "name": "LineCurrentPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2562: { // ClusterElectricalMeasurementServer.Attribute.ActiveCurrentPhaseC
                "name": "ActiveCurrentPhaseC",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2563: { // ClusterElectricalMeasurementServer.Attribute.ReactiveCurrentPhaseC
                "name": "ReactiveCurrentPhaseC",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2565: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltagePhaseC
                "name": "RmsVoltagePhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2566: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageMinPhaseC
                "name": "RmsVoltageMinPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2567: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageMaxPhaseC
                "name": "RmsVoltageMaxPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2568: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentPhaseC
                "name": "RmsCurrentPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2569: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentMinPhaseC
                "name": "RmsCurrentMinPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2570: { // ClusterElectricalMeasurementServer.Attribute.RmsCurrentMaxPhaseC
                "name": "RmsCurrentMaxPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2571: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerPhaseC
                "name": "ActivePowerPhaseC",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2572: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerMinPhaseC
                "name": "ActivePowerMinPhaseC",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2573: { // ClusterElectricalMeasurementServer.Attribute.ActivePowerMaxPhaseC
                "name": "ActivePowerMaxPhaseC",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2574: { // ClusterElectricalMeasurementServer.Attribute.ReactivePowerPhaseC
                "name": "ReactivePowerPhaseC",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2575: { // ClusterElectricalMeasurementServer.Attribute.ApparentPowerPhaseC
                "name": "ApparentPowerPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2576: { // ClusterElectricalMeasurementServer.Attribute.PowerFactorPhaseC
                "name": "PowerFactorPhaseC",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2577: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsVoltageMeasurementPeriodPhaseC
                "name": "AverageRmsVoltageMeasurementPeriodPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2578: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsOverVoltageCounterPhaseC
                "name": "AverageRmsOverVoltageCounterPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2579: { // ClusterElectricalMeasurementServer.Attribute.AverageRmsUnderVoltageCounterPhaseC
                "name": "AverageRmsUnderVoltageCounterPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2580: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeOverVoltagePeriodPhaseC
                "name": "RmsExtremeOverVoltagePeriodPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2581: { // ClusterElectricalMeasurementServer.Attribute.RmsExtremeUnderVoltagePeriodPhaseC
                "name": "RmsExtremeUnderVoltagePeriodPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2582: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSagPeriodPhaseC
                "name": "RmsVoltageSagPeriodPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2583: { // ClusterElectricalMeasurementServer.Attribute.RmsVoltageSwellPeriodPhaseC
                "name": "RmsVoltageSwellPeriodPhaseC",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterElectricalMeasurementServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterElectricalMeasurementServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterElectricalMeasurementServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterElectricalMeasurementServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterElectricalMeasurementServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterElectricalMeasurement.Command.GetProfileInfoResponseCommand: this.onGetProfileInfoResponseCommand(msg, path); break;
            case ClusterElectricalMeasurement.Command.GetProfileInfoCommand: this.onGetProfileInfoCommand(msg, path); break;
            case ClusterElectricalMeasurement.Command.GetMeasurementProfileResponseCommand: this.onGetMeasurementProfileResponseCommand(msg, path); break;
            case ClusterElectricalMeasurement.Command.GetMeasurementProfileCommand: this.onGetMeasurementProfileCommand(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onGetProfileInfoResponseCommand(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetProfileInfoResponseCommand")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetProfileInfoCommand(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetProfileInfoCommand")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetMeasurementProfileResponseCommand(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetMeasurementProfileResponseCommand")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onGetMeasurementProfileCommand(msg, commandPath)
    {
        console.log(this.constructor.name+".onGetMeasurementProfileCommand")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterUnitTesting
 */
class ClusterUnitTesting
{
    static CLUSTER_NAME = 'UNIT_TESTING_CLUSTER'
    static CLUSTER_ID = 0xFFF1FC05

    static Command = {
        Test: 0,
        TestSpecificResponse: 0,
        TestNotHandled: 1,
        TestAddArgumentsResponse: 1,
        TestSpecific: 2,
        TestSimpleArgumentResponse: 2,
        TestUnknownCommand: 3,
        TestStructArrayArgumentResponse: 3,
        TestAddArguments: 4,
        TestListInt8UReverseResponse: 4,
        TestSimpleArgumentRequest: 5,
        TestEnumsResponse: 5,
        TestStructArrayArgumentRequest: 6,
        TestNullableOptionalResponse: 6,
        TestStructArgumentRequest: 7,
        TestComplexNullableOptionalResponse: 7,
        TestNestedStructArgumentRequest: 8,
        BooleanResponse: 8,
        TestListStructArgumentRequest: 9,
        SimpleStructResponse: 9,
        TestListInt8UArgumentRequest: 10,
        TestEmitTestEventResponse: 10,
        TestNestedStructListArgumentRequest: 11,
        TestEmitTestFabricScopedEventResponse: 11,
        TestListNestedStructListArgumentRequest: 12,
        TestListInt8UReverseRequest: 13,
        TestEnumsRequest: 14,
        TestNullableOptionalRequest: 15,
        TestComplexNullableOptionalRequest: 16,
        SimpleStructEchoRequest: 17,
        TimedInvokeRequest: 18,
        TestSimpleOptionalArgumentRequest: 19,
        TestEmitTestEventRequest: 20,
        TestEmitTestFabricScopedEventRequest: 21,
    }
}

/**
 * ClusterUnitTestingServer
 */
class ClusterUnitTestingServer
{
    static Attribute = {
        Boolean: 0,
        Bitmap8: 1,
        Bitmap16: 2,
        Bitmap32: 3,
        Bitmap64: 4,
        Int8u: 5,
        Int16u: 6,
        Int24u: 7,
        Int32u: 8,
        Int40u: 9,
        Int48u: 10,
        Int56u: 11,
        Int64u: 12,
        Int8s: 13,
        Int16s: 14,
        Int24s: 15,
        Int32s: 16,
        Int40s: 17,
        Int48s: 18,
        Int56s: 19,
        Int64s: 20,
        Enum8: 21,
        Enum16: 22,
        FloatSingle: 23,
        FloatDouble: 24,
        OctetString: 25,
        ListInt8u: 26,
        ListOctetString: 27,
        ListStructOctetString: 28,
        LongOctetString: 29,
        CharString: 30,
        LongCharString: 31,
        EpochUs: 32,
        EpochS: 33,
        VendorId: 34,
        ListNullablesAndOptionalsStruct: 35,
        EnumAttr: 36,
        StructAttr: 37,
        RangeRestrictedInt8u: 38,
        RangeRestrictedInt8s: 39,
        RangeRestrictedInt16u: 40,
        RangeRestrictedInt16s: 41,
        ListLongOctetString: 42,
        ListFabricScoped: 43,
        TimedWriteBoolean: 48,
        GeneralErrorBoolean: 49,
        ClusterErrorBoolean: 50,
        Unsupported: 255,
        NullableBoolean: 16384,
        NullableBitmap8: 16385,
        NullableBitmap16: 16386,
        NullableBitmap32: 16387,
        NullableBitmap64: 16388,
        NullableInt8u: 16389,
        NullableInt16u: 16390,
        NullableInt24u: 16391,
        NullableInt32u: 16392,
        NullableInt40u: 16393,
        NullableInt48u: 16394,
        NullableInt56u: 16395,
        NullableInt64u: 16396,
        NullableInt8s: 16397,
        NullableInt16s: 16398,
        NullableInt24s: 16399,
        NullableInt32s: 16400,
        NullableInt40s: 16401,
        NullableInt48s: 16402,
        NullableInt56s: 16403,
        NullableInt64s: 16404,
        NullableEnum8: 16405,
        NullableEnum16: 16406,
        NullableFloatSingle: 16407,
        NullableFloatDouble: 16408,
        NullableOctetString: 16409,
        NullableCharString: 16414,
        NullableEnumAttr: 16420,
        NullableStruct: 16421,
        NullableRangeRestrictedInt8u: 16422,
        NullableRangeRestrictedInt8s: 16423,
        NullableRangeRestrictedInt16u: 16424,
        NullableRangeRestrictedInt16s: 16425,
        WriteOnlyInt8u: 16426,
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandTest = TlvObject({
    })

    static TemplateCommandTest = function(params) {
        return [
        ]
    }

    static MapCommandTest = new Map([
    ])

    static SchemaCommandTestSpecificResponse = TlvObject({
        returnValue: TlvField(0,TlvUInt8),
    })

    static TemplateCommandTestSpecificResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.ReturnValue },
        ]
    }

    static MapCommandTestSpecificResponse = new Map([
        [0, 'returnValue'],
    ])

    static SchemaCommandTestNotHandled = TlvObject({
    })

    static TemplateCommandTestNotHandled = function(params) {
        return [
        ]
    }

    static MapCommandTestNotHandled = new Map([
    ])

    static SchemaCommandTestAddArgumentsResponse = TlvObject({
        returnValue: TlvField(0,TlvUInt8),
    })

    static TemplateCommandTestAddArgumentsResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.ReturnValue },
        ]
    }

    static MapCommandTestAddArgumentsResponse = new Map([
        [0, 'returnValue'],
    ])

    static SchemaCommandTestSpecific = TlvObject({
    })

    static TemplateCommandTestSpecific = function(params) {
        return [
        ]
    }

    static MapCommandTestSpecific = new Map([
    ])

    static SchemaCommandTestSimpleArgumentResponse = TlvObject({
        returnValue: TlvField(0,Tlvbool),
    })

    static TemplateCommandTestSimpleArgumentResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.ReturnValue },
        ]
    }

    static MapCommandTestSimpleArgumentResponse = new Map([
        [0, 'returnValue'],
    ])

    static SchemaCommandTestUnknownCommand = TlvObject({
    })

    static TemplateCommandTestUnknownCommand = function(params) {
        return [
        ]
    }

    static MapCommandTestUnknownCommand = new Map([
    ])

    static SchemaCommandTestStructArrayArgumentResponse = TlvObject({
        arg1: TlvField(0,TlvArray),
        arg2: TlvField(1,TlvArray),
        arg3: TlvField(2,TlvArray),
        arg4: TlvField(3,TlvArray),
        arg5: TlvField(4,TlvUInt8),
        arg6: TlvField(5,Tlvbool),
    })

    static TemplateCommandTestStructArrayArgumentResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
          { 'tag': 1, 'type': 'array', 'value': [] }, // params.Arg2
          { 'tag': 2, 'type': 'array', 'value': [] }, // params.Arg3
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.Arg4
          { 'tag': 4, 'type': 'uint8_t', 'value': params.Arg5 },
          { 'tag': 5, 'type': 'bool', 'value': params.Arg6 },
        ]
    }

    static MapCommandTestStructArrayArgumentResponse = new Map([
        [0, 'arg1'],
        [1, 'arg2'],
        [2, 'arg3'],
        [3, 'arg4'],
        [4, 'arg5'],
        [5, 'arg6'],
    ])

    static SchemaCommandTestAddArguments = TlvObject({
        arg1: TlvField(0,TlvUInt8),
        arg2: TlvField(1,TlvUInt8),
    })

    static TemplateCommandTestAddArguments = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Arg1 },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Arg2 },
        ]
    }

    static MapCommandTestAddArguments = new Map([
        [0, 'arg1'],
        [1, 'arg2'],
    ])

    static SchemaCommandTestListInt8UReverseResponse = TlvObject({
        arg1: TlvField(0,TlvArray),
    })

    static TemplateCommandTestListInt8UReverseResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestListInt8UReverseResponse = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestSimpleArgumentRequest = TlvObject({
        arg1: TlvField(0,Tlvbool),
    })

    static TemplateCommandTestSimpleArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.Arg1 },
        ]
    }

    static MapCommandTestSimpleArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestEnumsResponse = TlvObject({
        arg1: TlvField(0,TlvUInt16),
        arg2: TlvField(1,TlvUInt8),
    })

    static TemplateCommandTestEnumsResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::VendorId', 'value': params.Arg1 },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Arg2 },
        ]
    }

    static MapCommandTestEnumsResponse = new Map([
        [0, 'arg1'],
        [1, 'arg2'],
    ])

    static SchemaCommandTestStructArrayArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvArray),
        arg2: TlvField(1,TlvArray),
        arg3: TlvField(2,TlvArray),
        arg4: TlvField(3,TlvArray),
        arg5: TlvField(4,TlvUInt8),
        arg6: TlvField(5,Tlvbool),
    })

    static TemplateCommandTestStructArrayArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
          { 'tag': 1, 'type': 'array', 'value': [] }, // params.Arg2
          { 'tag': 2, 'type': 'array', 'value': [] }, // params.Arg3
          { 'tag': 3, 'type': 'array', 'value': [] }, // params.Arg4
          { 'tag': 4, 'type': 'uint8_t', 'value': params.Arg5 },
          { 'tag': 5, 'type': 'bool', 'value': params.Arg6 },
        ]
    }

    static MapCommandTestStructArrayArgumentRequest = new Map([
        [0, 'arg1'],
        [1, 'arg2'],
        [2, 'arg3'],
        [3, 'arg4'],
        [4, 'arg5'],
        [5, 'arg6'],
    ])

    static SchemaCommandTestNullableOptionalResponse = TlvObject({
        wasPresent: TlvField(0,Tlvbool),
        wasNull: TlvField(1,Tlvbool),
        value: TlvField(2,TlvUInt8),
        originalValue: TlvField(3,TlvUInt8),
    })

    static TemplateCommandTestNullableOptionalResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.WasPresent },
          { 'tag': 1, 'type': 'bool', 'value': params.WasNull },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.Value },
          { 'tag': 3, 'type': 'uint8_t', 'value': params.OriginalValue },
        ]
    }

    static MapCommandTestNullableOptionalResponse = new Map([
        [0, 'wasPresent'],
        [1, 'wasNull'],
        [2, 'value'],
        [3, 'originalValue'],
    ])

    static SchemaCommandTestStructArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvObject),
    })

    static TemplateCommandTestStructArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestStructArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestComplexNullableOptionalResponse = TlvObject({
        nullableIntWasNull: TlvField(0,Tlvbool),
        nullableIntValue: TlvField(1,TlvUInt16),
        optionalIntWasPresent: TlvField(2,Tlvbool),
        optionalIntValue: TlvField(3,TlvUInt16),
        nullableOptionalIntWasPresent: TlvField(4,Tlvbool),
        nullableOptionalIntWasNull: TlvField(5,Tlvbool),
        nullableOptionalIntValue: TlvField(6,TlvUInt16),
        nullableStringWasNull: TlvField(7,Tlvbool),
        nullableStringValue: TlvField(8,TlvString),
        optionalStringWasPresent: TlvField(9,Tlvbool),
        optionalStringValue: TlvField(10,TlvString),
        nullableOptionalStringWasPresent: TlvField(11,Tlvbool),
        nullableOptionalStringWasNull: TlvField(12,Tlvbool),
        nullableOptionalStringValue: TlvField(13,TlvString),
        nullableStructWasNull: TlvField(14,Tlvbool),
        nullableStructValue: TlvField(15,TlvObject),
        optionalStructWasPresent: TlvField(16,Tlvbool),
        optionalStructValue: TlvField(17,TlvObject),
        nullableOptionalStructWasPresent: TlvField(18,Tlvbool),
        nullableOptionalStructWasNull: TlvField(19,Tlvbool),
        nullableOptionalStructValue: TlvField(20,TlvObject),
        nullableListWasNull: TlvField(21,Tlvbool),
        nullableListValue: TlvField(22,TlvArray),
        optionalListWasPresent: TlvField(23,Tlvbool),
        optionalListValue: TlvField(24,TlvArray),
        nullableOptionalListWasPresent: TlvField(25,Tlvbool),
        nullableOptionalListWasNull: TlvField(26,Tlvbool),
        nullableOptionalListValue: TlvField(27,TlvArray),
    })

    static TemplateCommandTestComplexNullableOptionalResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.NullableIntWasNull },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.NullableIntValue },
          { 'tag': 2, 'type': 'bool', 'value': params.OptionalIntWasPresent },
          { 'tag': 3, 'type': 'uint16_t', 'value': params.OptionalIntValue },
          { 'tag': 4, 'type': 'bool', 'value': params.NullableOptionalIntWasPresent },
          { 'tag': 5, 'type': 'bool', 'value': params.NullableOptionalIntWasNull },
          { 'tag': 6, 'type': 'uint16_t', 'value': params.NullableOptionalIntValue },
          { 'tag': 7, 'type': 'bool', 'value': params.NullableStringWasNull },
          { 'tag': 8, 'type': 'chip::CharSpan', 'value': params.NullableStringValue },
          { 'tag': 9, 'type': 'bool', 'value': params.OptionalStringWasPresent },
          { 'tag': 10, 'type': 'chip::CharSpan', 'value': params.OptionalStringValue },
          { 'tag': 11, 'type': 'bool', 'value': params.NullableOptionalStringWasPresent },
          { 'tag': 12, 'type': 'bool', 'value': params.NullableOptionalStringWasNull },
          { 'tag': 13, 'type': 'chip::CharSpan', 'value': params.NullableOptionalStringValue },
          { 'tag': 14, 'type': 'bool', 'value': params.NullableStructWasNull },
          { 'tag': 15, 'type': 'struct', 'value': [] }, // params.NullableStructValue
          { 'tag': 16, 'type': 'bool', 'value': params.OptionalStructWasPresent },
          { 'tag': 17, 'type': 'struct', 'value': [] }, // params.OptionalStructValue
          { 'tag': 18, 'type': 'bool', 'value': params.NullableOptionalStructWasPresent },
          { 'tag': 19, 'type': 'bool', 'value': params.NullableOptionalStructWasNull },
          { 'tag': 20, 'type': 'struct', 'value': [] }, // params.NullableOptionalStructValue
          { 'tag': 21, 'type': 'bool', 'value': params.NullableListWasNull },
          { 'tag': 22, 'type': 'array', 'value': [] }, // params.NullableListValue
          { 'tag': 23, 'type': 'bool', 'value': params.OptionalListWasPresent },
          { 'tag': 24, 'type': 'array', 'value': [] }, // params.OptionalListValue
          { 'tag': 25, 'type': 'bool', 'value': params.NullableOptionalListWasPresent },
          { 'tag': 26, 'type': 'bool', 'value': params.NullableOptionalListWasNull },
          { 'tag': 27, 'type': 'array', 'value': [] }, // params.NullableOptionalListValue
        ]
    }

    static MapCommandTestComplexNullableOptionalResponse = new Map([
        [0, 'nullableIntWasNull'],
        [1, 'nullableIntValue'],
        [2, 'optionalIntWasPresent'],
        [3, 'optionalIntValue'],
        [4, 'nullableOptionalIntWasPresent'],
        [5, 'nullableOptionalIntWasNull'],
        [6, 'nullableOptionalIntValue'],
        [7, 'nullableStringWasNull'],
        [8, 'nullableStringValue'],
        [9, 'optionalStringWasPresent'],
        [10, 'optionalStringValue'],
        [11, 'nullableOptionalStringWasPresent'],
        [12, 'nullableOptionalStringWasNull'],
        [13, 'nullableOptionalStringValue'],
        [14, 'nullableStructWasNull'],
        [15, 'nullableStructValue'],
        [16, 'optionalStructWasPresent'],
        [17, 'optionalStructValue'],
        [18, 'nullableOptionalStructWasPresent'],
        [19, 'nullableOptionalStructWasNull'],
        [20, 'nullableOptionalStructValue'],
        [21, 'nullableListWasNull'],
        [22, 'nullableListValue'],
        [23, 'optionalListWasPresent'],
        [24, 'optionalListValue'],
        [25, 'nullableOptionalListWasPresent'],
        [26, 'nullableOptionalListWasNull'],
        [27, 'nullableOptionalListValue'],
    ])

    static SchemaCommandTestNestedStructArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvObject),
    })

    static TemplateCommandTestNestedStructArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestNestedStructArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandBooleanResponse = TlvObject({
        value: TlvField(0,Tlvbool),
    })

    static TemplateCommandBooleanResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.Value },
        ]
    }

    static MapCommandBooleanResponse = new Map([
        [0, 'value'],
    ])

    static SchemaCommandTestListStructArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvArray),
    })

    static TemplateCommandTestListStructArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestListStructArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandSimpleStructResponse = TlvObject({
        arg1: TlvField(0,TlvObject),
    })

    static TemplateCommandSimpleStructResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandSimpleStructResponse = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestListInt8UArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvArray),
    })

    static TemplateCommandTestListInt8UArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestListInt8UArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestEmitTestEventResponse = TlvObject({
        value: TlvField(0,TlvUInt64),
    })

    static TemplateCommandTestEmitTestEventResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint64_t', 'value': params.Value },
        ]
    }

    static MapCommandTestEmitTestEventResponse = new Map([
        [0, 'value'],
    ])

    static SchemaCommandTestNestedStructListArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvObject),
    })

    static TemplateCommandTestNestedStructListArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestNestedStructListArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestEmitTestFabricScopedEventResponse = TlvObject({
        value: TlvField(0,TlvUInt64),
    })

    static TemplateCommandTestEmitTestFabricScopedEventResponse = function(params) {
        return [
          { 'tag': 0, 'type': 'uint64_t', 'value': params.Value },
        ]
    }

    static MapCommandTestEmitTestFabricScopedEventResponse = new Map([
        [0, 'value'],
    ])

    static SchemaCommandTestListNestedStructListArgumentRequest = TlvObject({
        arg1: TlvField(0,TlvArray),
    })

    static TemplateCommandTestListNestedStructListArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestListNestedStructListArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestListInt8UReverseRequest = TlvObject({
        arg1: TlvField(0,TlvArray),
    })

    static TemplateCommandTestListInt8UReverseRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'array', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandTestListInt8UReverseRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestEnumsRequest = TlvObject({
        arg1: TlvField(0,TlvUInt16),
        arg2: TlvField(1,TlvUInt8),
    })

    static TemplateCommandTestEnumsRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'chip::VendorId', 'value': params.Arg1 },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Arg2 },
        ]
    }

    static MapCommandTestEnumsRequest = new Map([
        [0, 'arg1'],
        [1, 'arg2'],
    ])

    static SchemaCommandTestNullableOptionalRequest = TlvObject({
        arg1: TlvField(0,TlvUInt8),
    })

    static TemplateCommandTestNullableOptionalRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Arg1 },
        ]
    }

    static MapCommandTestNullableOptionalRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestComplexNullableOptionalRequest = TlvObject({
        nullableInt: TlvField(0,TlvUInt16),
        optionalInt: TlvField(1,TlvUInt16),
        nullableOptionalInt: TlvField(2,TlvUInt16),
        nullableString: TlvField(3,TlvString),
        optionalString: TlvField(4,TlvString),
        nullableOptionalString: TlvField(5,TlvString),
        nullableStruct: TlvField(6,TlvObject),
        optionalStruct: TlvField(7,TlvObject),
        nullableOptionalStruct: TlvField(8,TlvObject),
        nullableList: TlvField(9,TlvArray),
        optionalList: TlvField(10,TlvArray),
        nullableOptionalList: TlvField(11,TlvArray),
    })

    static TemplateCommandTestComplexNullableOptionalRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'uint16_t', 'value': params.NullableInt },
          { 'tag': 1, 'type': 'uint16_t', 'value': params.OptionalInt },
          { 'tag': 2, 'type': 'uint16_t', 'value': params.NullableOptionalInt },
          { 'tag': 3, 'type': 'chip::CharSpan', 'value': params.NullableString },
          { 'tag': 4, 'type': 'chip::CharSpan', 'value': params.OptionalString },
          { 'tag': 5, 'type': 'chip::CharSpan', 'value': params.NullableOptionalString },
          { 'tag': 6, 'type': 'struct', 'value': [] }, // params.NullableStruct
          { 'tag': 7, 'type': 'struct', 'value': [] }, // params.OptionalStruct
          { 'tag': 8, 'type': 'struct', 'value': [] }, // params.NullableOptionalStruct
          { 'tag': 9, 'type': 'array', 'value': [] }, // params.NullableList
          { 'tag': 10, 'type': 'array', 'value': [] }, // params.OptionalList
          { 'tag': 11, 'type': 'array', 'value': [] }, // params.NullableOptionalList
        ]
    }

    static MapCommandTestComplexNullableOptionalRequest = new Map([
        [0, 'nullableInt'],
        [1, 'optionalInt'],
        [2, 'nullableOptionalInt'],
        [3, 'nullableString'],
        [4, 'optionalString'],
        [5, 'nullableOptionalString'],
        [6, 'nullableStruct'],
        [7, 'optionalStruct'],
        [8, 'nullableOptionalStruct'],
        [9, 'nullableList'],
        [10, 'optionalList'],
        [11, 'nullableOptionalList'],
    ])

    static SchemaCommandSimpleStructEchoRequest = TlvObject({
        arg1: TlvField(0,TlvObject),
    })

    static TemplateCommandSimpleStructEchoRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'struct', 'value': [] }, // params.Arg1
        ]
    }

    static MapCommandSimpleStructEchoRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTimedInvokeRequest = TlvObject({
    })

    static TemplateCommandTimedInvokeRequest = function(params) {
        return [
        ]
    }

    static MapCommandTimedInvokeRequest = new Map([
    ])

    static SchemaCommandTestSimpleOptionalArgumentRequest = TlvObject({
        arg1: TlvField(0,Tlvbool),
    })

    static TemplateCommandTestSimpleOptionalArgumentRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'bool', 'value': params.Arg1 },
        ]
    }

    static MapCommandTestSimpleOptionalArgumentRequest = new Map([
        [0, 'arg1'],
    ])

    static SchemaCommandTestEmitTestEventRequest = TlvObject({
        arg1: TlvField(0,TlvUInt8),
        arg2: TlvField(1,TlvUInt8),
        arg3: TlvField(2,Tlvbool),
    })

    static TemplateCommandTestEmitTestEventRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Arg1 },
          { 'tag': 1, 'type': 'uint8_t', 'value': params.Arg2 },
          { 'tag': 2, 'type': 'bool', 'value': params.Arg3 },
        ]
    }

    static MapCommandTestEmitTestEventRequest = new Map([
        [0, 'arg1'],
        [1, 'arg2'],
        [2, 'arg3'],
    ])

    static SchemaCommandTestEmitTestFabricScopedEventRequest = TlvObject({
        arg1: TlvField(0,TlvUInt8),
    })

    static TemplateCommandTestEmitTestFabricScopedEventRequest = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Arg1 },
        ]
    }

    static MapCommandTestEmitTestFabricScopedEventRequest = new Map([
        [0, 'arg1'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            0: { // ClusterUnitTestingServer.Attribute.Boolean
                "name": "Boolean",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            1: { // ClusterUnitTestingServer.Attribute.Bitmap8
                "name": "Bitmap8",
                "type": "Bitmap8MaskMap",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            2: { // ClusterUnitTestingServer.Attribute.Bitmap16
                "name": "Bitmap16",
                "type": "Bitmap16MaskMap",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            3: { // ClusterUnitTestingServer.Attribute.Bitmap32
                "name": "Bitmap32",
                "type": "Bitmap32MaskMap",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            4: { // ClusterUnitTestingServer.Attribute.Bitmap64
                "name": "Bitmap64",
                "type": "Bitmap64MaskMap",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            5: { // ClusterUnitTestingServer.Attribute.Int8u
                "name": "Int8u",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            6: { // ClusterUnitTestingServer.Attribute.Int16u
                "name": "Int16u",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            7: { // ClusterUnitTestingServer.Attribute.Int24u
                "name": "Int24u",
                "type": "int24u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            8: { // ClusterUnitTestingServer.Attribute.Int32u
                "name": "Int32u",
                "type": "int32u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            9: { // ClusterUnitTestingServer.Attribute.Int40u
                "name": "Int40u",
                "type": "int40u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            10: { // ClusterUnitTestingServer.Attribute.Int48u
                "name": "Int48u",
                "type": "int48u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            11: { // ClusterUnitTestingServer.Attribute.Int56u
                "name": "Int56u",
                "type": "int56u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            12: { // ClusterUnitTestingServer.Attribute.Int64u
                "name": "Int64u",
                "type": "int64u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            13: { // ClusterUnitTestingServer.Attribute.Int8s
                "name": "Int8s",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            14: { // ClusterUnitTestingServer.Attribute.Int16s
                "name": "Int16s",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            15: { // ClusterUnitTestingServer.Attribute.Int24s
                "name": "Int24s",
                "type": "int24s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16: { // ClusterUnitTestingServer.Attribute.Int32s
                "name": "Int32s",
                "type": "int32s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            17: { // ClusterUnitTestingServer.Attribute.Int40s
                "name": "Int40s",
                "type": "int40s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            18: { // ClusterUnitTestingServer.Attribute.Int48s
                "name": "Int48s",
                "type": "int48s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            19: { // ClusterUnitTestingServer.Attribute.Int56s
                "name": "Int56s",
                "type": "int56s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            20: { // ClusterUnitTestingServer.Attribute.Int64s
                "name": "Int64s",
                "type": "int64s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            21: { // ClusterUnitTestingServer.Attribute.Enum8
                "name": "Enum8",
                "type": "enum8",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            22: { // ClusterUnitTestingServer.Attribute.Enum16
                "name": "Enum16",
                "type": "enum16",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            23: { // ClusterUnitTestingServer.Attribute.FloatSingle
                "name": "FloatSingle",
                "type": "single",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            24: { // ClusterUnitTestingServer.Attribute.FloatDouble
                "name": "FloatDouble",
                "type": "double",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            25: { // ClusterUnitTestingServer.Attribute.OctetString
                "name": "OctetString",
                "type": "octet_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            26: { // ClusterUnitTestingServer.Attribute.ListInt8u
                "name": "ListInt8u",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            27: { // ClusterUnitTestingServer.Attribute.ListOctetString
                "name": "ListOctetString",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            28: { // ClusterUnitTestingServer.Attribute.ListStructOctetString
                "name": "ListStructOctetString",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            29: { // ClusterUnitTestingServer.Attribute.LongOctetString
                "name": "LongOctetString",
                "type": "long_octet_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            30: { // ClusterUnitTestingServer.Attribute.CharString
                "name": "CharString",
                "type": "char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            31: { // ClusterUnitTestingServer.Attribute.LongCharString
                "name": "LongCharString",
                "type": "long_char_string",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            32: { // ClusterUnitTestingServer.Attribute.EpochUs
                "name": "EpochUs",
                "type": "epoch_us",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            33: { // ClusterUnitTestingServer.Attribute.EpochS
                "name": "EpochS",
                "type": "epoch_s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            34: { // ClusterUnitTestingServer.Attribute.VendorId
                "name": "VendorId",
                "type": "vendor_id",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            35: { // ClusterUnitTestingServer.Attribute.ListNullablesAndOptionalsStruct
                "name": "ListNullablesAndOptionalsStruct",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            36: { // ClusterUnitTestingServer.Attribute.EnumAttr
                "name": "EnumAttr",
                "type": "SimpleEnum",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            37: { // ClusterUnitTestingServer.Attribute.StructAttr
                "name": "StructAttr",
                "type": "SimpleStruct",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            38: { // ClusterUnitTestingServer.Attribute.RangeRestrictedInt8u
                "name": "RangeRestrictedInt8u",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            39: { // ClusterUnitTestingServer.Attribute.RangeRestrictedInt8s
                "name": "RangeRestrictedInt8s",
                "type": "int8s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            40: { // ClusterUnitTestingServer.Attribute.RangeRestrictedInt16u
                "name": "RangeRestrictedInt16u",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            41: { // ClusterUnitTestingServer.Attribute.RangeRestrictedInt16s
                "name": "RangeRestrictedInt16s",
                "type": "int16s",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            42: { // ClusterUnitTestingServer.Attribute.ListLongOctetString
                "name": "ListLongOctetString",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            43: { // ClusterUnitTestingServer.Attribute.ListFabricScoped
                "name": "ListFabricScoped",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            48: { // ClusterUnitTestingServer.Attribute.TimedWriteBoolean
                "name": "TimedWriteBoolean",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            49: { // ClusterUnitTestingServer.Attribute.GeneralErrorBoolean
                "name": "GeneralErrorBoolean",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            50: { // ClusterUnitTestingServer.Attribute.ClusterErrorBoolean
                "name": "ClusterErrorBoolean",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            255: { // ClusterUnitTestingServer.Attribute.Unsupported
                "name": "Unsupported",
                "type": "boolean",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            16384: { // ClusterUnitTestingServer.Attribute.NullableBoolean
                "name": "NullableBoolean",
                "type": "boolean",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16385: { // ClusterUnitTestingServer.Attribute.NullableBitmap8
                "name": "NullableBitmap8",
                "type": "Bitmap8MaskMap",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16386: { // ClusterUnitTestingServer.Attribute.NullableBitmap16
                "name": "NullableBitmap16",
                "type": "Bitmap16MaskMap",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16387: { // ClusterUnitTestingServer.Attribute.NullableBitmap32
                "name": "NullableBitmap32",
                "type": "Bitmap32MaskMap",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16388: { // ClusterUnitTestingServer.Attribute.NullableBitmap64
                "name": "NullableBitmap64",
                "type": "Bitmap64MaskMap",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16389: { // ClusterUnitTestingServer.Attribute.NullableInt8u
                "name": "NullableInt8u",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16390: { // ClusterUnitTestingServer.Attribute.NullableInt16u
                "name": "NullableInt16u",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16391: { // ClusterUnitTestingServer.Attribute.NullableInt24u
                "name": "NullableInt24u",
                "type": "int24u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16392: { // ClusterUnitTestingServer.Attribute.NullableInt32u
                "name": "NullableInt32u",
                "type": "int32u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16393: { // ClusterUnitTestingServer.Attribute.NullableInt40u
                "name": "NullableInt40u",
                "type": "int40u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16394: { // ClusterUnitTestingServer.Attribute.NullableInt48u
                "name": "NullableInt48u",
                "type": "int48u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16395: { // ClusterUnitTestingServer.Attribute.NullableInt56u
                "name": "NullableInt56u",
                "type": "int56u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16396: { // ClusterUnitTestingServer.Attribute.NullableInt64u
                "name": "NullableInt64u",
                "type": "int64u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16397: { // ClusterUnitTestingServer.Attribute.NullableInt8s
                "name": "NullableInt8s",
                "type": "int8s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16398: { // ClusterUnitTestingServer.Attribute.NullableInt16s
                "name": "NullableInt16s",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16399: { // ClusterUnitTestingServer.Attribute.NullableInt24s
                "name": "NullableInt24s",
                "type": "int24s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16400: { // ClusterUnitTestingServer.Attribute.NullableInt32s
                "name": "NullableInt32s",
                "type": "int32s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16401: { // ClusterUnitTestingServer.Attribute.NullableInt40s
                "name": "NullableInt40s",
                "type": "int40s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16402: { // ClusterUnitTestingServer.Attribute.NullableInt48s
                "name": "NullableInt48s",
                "type": "int48s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16403: { // ClusterUnitTestingServer.Attribute.NullableInt56s
                "name": "NullableInt56s",
                "type": "int56s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16404: { // ClusterUnitTestingServer.Attribute.NullableInt64s
                "name": "NullableInt64s",
                "type": "int64s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16405: { // ClusterUnitTestingServer.Attribute.NullableEnum8
                "name": "NullableEnum8",
                "type": "enum8",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16406: { // ClusterUnitTestingServer.Attribute.NullableEnum16
                "name": "NullableEnum16",
                "type": "enum16",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16407: { // ClusterUnitTestingServer.Attribute.NullableFloatSingle
                "name": "NullableFloatSingle",
                "type": "single",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16408: { // ClusterUnitTestingServer.Attribute.NullableFloatDouble
                "name": "NullableFloatDouble",
                "type": "double",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16409: { // ClusterUnitTestingServer.Attribute.NullableOctetString
                "name": "NullableOctetString",
                "type": "octet_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16414: { // ClusterUnitTestingServer.Attribute.NullableCharString
                "name": "NullableCharString",
                "type": "char_string",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16420: { // ClusterUnitTestingServer.Attribute.NullableEnumAttr
                "name": "NullableEnumAttr",
                "type": "SimpleEnum",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16421: { // ClusterUnitTestingServer.Attribute.NullableStruct
                "name": "NullableStruct",
                "type": "SimpleStruct",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16422: { // ClusterUnitTestingServer.Attribute.NullableRangeRestrictedInt8u
                "name": "NullableRangeRestrictedInt8u",
                "type": "int8u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16423: { // ClusterUnitTestingServer.Attribute.NullableRangeRestrictedInt8s
                "name": "NullableRangeRestrictedInt8s",
                "type": "int8s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16424: { // ClusterUnitTestingServer.Attribute.NullableRangeRestrictedInt16u
                "name": "NullableRangeRestrictedInt16u",
                "type": "int16u",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16425: { // ClusterUnitTestingServer.Attribute.NullableRangeRestrictedInt16s
                "name": "NullableRangeRestrictedInt16s",
                "type": "int16s",
                "nullable": true,
                "nosubscribe": true,
                "readonly": true,
            },
            16426: { // ClusterUnitTestingServer.Attribute.WriteOnlyInt8u
                "name": "WriteOnlyInt8u",
                "type": "int8u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65528: { // ClusterUnitTestingServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterUnitTestingServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterUnitTestingServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterUnitTestingServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterUnitTestingServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterUnitTesting.Command.Test: this.onTest(msg, path); break;
            case ClusterUnitTesting.Command.TestSpecificResponse: this.onTestSpecificResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestNotHandled: this.onTestNotHandled(msg, path); break;
            case ClusterUnitTesting.Command.TestAddArgumentsResponse: this.onTestAddArgumentsResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestSpecific: this.onTestSpecific(msg, path); break;
            case ClusterUnitTesting.Command.TestSimpleArgumentResponse: this.onTestSimpleArgumentResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestUnknownCommand: this.onTestUnknownCommand(msg, path); break;
            case ClusterUnitTesting.Command.TestStructArrayArgumentResponse: this.onTestStructArrayArgumentResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestAddArguments: this.onTestAddArguments(msg, path); break;
            case ClusterUnitTesting.Command.TestListInt8UReverseResponse: this.onTestListInt8UReverseResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestSimpleArgumentRequest: this.onTestSimpleArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestEnumsResponse: this.onTestEnumsResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestStructArrayArgumentRequest: this.onTestStructArrayArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestNullableOptionalResponse: this.onTestNullableOptionalResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestStructArgumentRequest: this.onTestStructArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestComplexNullableOptionalResponse: this.onTestComplexNullableOptionalResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestNestedStructArgumentRequest: this.onTestNestedStructArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.BooleanResponse: this.onBooleanResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestListStructArgumentRequest: this.onTestListStructArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.SimpleStructResponse: this.onSimpleStructResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestListInt8UArgumentRequest: this.onTestListInt8UArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestEmitTestEventResponse: this.onTestEmitTestEventResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestNestedStructListArgumentRequest: this.onTestNestedStructListArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestEmitTestFabricScopedEventResponse: this.onTestEmitTestFabricScopedEventResponse(msg, path); break;
            case ClusterUnitTesting.Command.TestListNestedStructListArgumentRequest: this.onTestListNestedStructListArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestListInt8UReverseRequest: this.onTestListInt8UReverseRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestEnumsRequest: this.onTestEnumsRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestNullableOptionalRequest: this.onTestNullableOptionalRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestComplexNullableOptionalRequest: this.onTestComplexNullableOptionalRequest(msg, path); break;
            case ClusterUnitTesting.Command.SimpleStructEchoRequest: this.onSimpleStructEchoRequest(msg, path); break;
            case ClusterUnitTesting.Command.TimedInvokeRequest: this.onTimedInvokeRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestSimpleOptionalArgumentRequest: this.onTestSimpleOptionalArgumentRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestEmitTestEventRequest: this.onTestEmitTestEventRequest(msg, path); break;
            case ClusterUnitTesting.Command.TestEmitTestFabricScopedEventRequest: this.onTestEmitTestFabricScopedEventRequest(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onTest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestSpecificResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestSpecificResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestNotHandled(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestNotHandled")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestAddArgumentsResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestAddArgumentsResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestSpecific(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestSpecific")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestSimpleArgumentResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestSimpleArgumentResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestUnknownCommand(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestUnknownCommand")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestStructArrayArgumentResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestStructArrayArgumentResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestAddArguments(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestAddArguments")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestListInt8UReverseResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestListInt8UReverseResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestSimpleArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestSimpleArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestEnumsResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEnumsResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestStructArrayArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestStructArrayArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestNullableOptionalResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestNullableOptionalResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestStructArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestStructArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestComplexNullableOptionalResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestComplexNullableOptionalResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestNestedStructArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestNestedStructArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onBooleanResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onBooleanResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestListStructArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestListStructArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSimpleStructResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onSimpleStructResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestListInt8UArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestListInt8UArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestEmitTestEventResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEmitTestEventResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestNestedStructListArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestNestedStructListArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestEmitTestFabricScopedEventResponse(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEmitTestFabricScopedEventResponse")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestListNestedStructListArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestListNestedStructListArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestListInt8UReverseRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestListInt8UReverseRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestEnumsRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEnumsRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestNullableOptionalRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestNullableOptionalRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestComplexNullableOptionalRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestComplexNullableOptionalRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onSimpleStructEchoRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onSimpleStructEchoRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTimedInvokeRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTimedInvokeRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestSimpleOptionalArgumentRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestSimpleOptionalArgumentRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestEmitTestEventRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEmitTestEventRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onTestEmitTestFabricScopedEventRequest(msg, commandPath)
    {
        console.log(this.constructor.name+".onTestEmitTestFabricScopedEventRequest")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}

/**
 * ClusterFaultInjection
 */
class ClusterFaultInjection
{
    static CLUSTER_NAME = 'FAULT_INJECTION_CLUSTER'
    static CLUSTER_ID = 0xFFF1FC06

    static Command = {
        FailAtFault: 0,
        FailRandomlyAtFault: 1,
    }
}

/**
 * ClusterFaultInjectionServer
 */
class ClusterFaultInjectionServer
{
    static Attribute = {
        GeneratedCommandList: 65528,
        AcceptedCommandList: 65529,
        AttributeList: 65531,
        FeatureMap: 65532,
        ClusterRevision: 65533,
    }


    // ============================================
    //              COMMAND TEMPLATES
    // ============================================
    static SchemaCommandFailAtFault = TlvObject({
        type: TlvField(0,TlvUInt8),
        id: TlvField(1,TlvUInt32),
        numCallsToSkip: TlvField(2,TlvUInt32),
        numCallsToFail: TlvField(3,TlvUInt32),
        takeMutex: TlvField(4,Tlvbool),
    })

    static TemplateCommandFailAtFault = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Type },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.Id },
          { 'tag': 2, 'type': 'uint32_t', 'value': params.NumCallsToSkip },
          { 'tag': 3, 'type': 'uint32_t', 'value': params.NumCallsToFail },
          { 'tag': 4, 'type': 'bool', 'value': params.TakeMutex },
        ]
    }

    static MapCommandFailAtFault = new Map([
        [0, 'type'],
        [1, 'id'],
        [2, 'numCallsToSkip'],
        [3, 'numCallsToFail'],
        [4, 'takeMutex'],
    ])

    static SchemaCommandFailRandomlyAtFault = TlvObject({
        type: TlvField(0,TlvUInt8),
        id: TlvField(1,TlvUInt32),
        percentage: TlvField(2,TlvUInt8),
    })

    static TemplateCommandFailRandomlyAtFault = function(params) {
        return [
          { 'tag': 0, 'type': 'uint8_t', 'value': params.Type },
          { 'tag': 1, 'type': 'uint32_t', 'value': params.Id },
          { 'tag': 2, 'type': 'uint8_t', 'value': params.Percentage },
        ]
    }

    static MapCommandFailRandomlyAtFault = new Map([
        [0, 'type'],
        [1, 'id'],
        [2, 'percentage'],
    ])


    // ============================================
    //             ATTRIBUTE TEMPLATES
    // ============================================

    constructor(imManager) {
        this._imManager = imManager
        this._dataVersion = Random.getRandomUint32()

        this._attributes = {
            65528: { // ClusterFaultInjectionServer.Attribute.GeneratedCommandList
                "name": "GeneratedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65529: { // ClusterFaultInjectionServer.Attribute.AcceptedCommandList
                "name": "AcceptedCommandList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65531: { // ClusterFaultInjectionServer.Attribute.AttributeList
                "name": "AttributeList",
                "type": "array",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65532: { // ClusterFaultInjectionServer.Attribute.FeatureMap
                "name": "FeatureMap",
                "type": "bitmap32",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
            65533: { // ClusterFaultInjectionServer.Attribute.ClusterRevision
                "name": "ClusterRevision",
                "type": "int16u",
                "nullable": false,
                "nosubscribe": true,
                "readonly": true,
            },
        }
    }

    getAttribute(id)
    {
        return this._attributes[id]
    }

    /**
     * Dispatches incoming commands for this cluster to the correct handler.
     */
    onCommand(msg, path)
    {
        console.log(this.constructor.name+".onCommand "+path.CommandId)
        switch(path.CommandId)
        {
            case ClusterFaultInjection.Command.FailAtFault: this.onFailAtFault(msg, path); break;
            case ClusterFaultInjection.Command.FailRandomlyAtFault: this.onFailRandomlyAtFault(msg, path); break;
        }
    }

    // ============================================
    //              COMMAND HANDLERS
    // ============================================
    onFailAtFault(msg, commandPath)
    {
        console.log(this.constructor.name+".onFailAtFault")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

    onFailRandomlyAtFault(msg, commandPath)
    {
        console.log(this.constructor.name+".onFailRandomlyAtFault")
        this._imManager.sendInvokeCommandResponseStatus(exchange, commandPath, 0)
    }

}


module.exports = {
    ClusterIdentifyServer,
    ClusterGroupsServer,
    ClusterScenesServer,
    ClusterOnOffServer,
    ClusterOnOffSwitchConfigurationServer,
    ClusterLevelControlServer,
    ClusterBinaryInputBasicServer,
    ClusterDescriptorServer,
    ClusterBindingServer,
    ClusterAccessControlServer,
    ClusterActionsServer,
    ClusterBasicServer,
    ClusterOtaSoftwareUpdateProviderClient,
    ClusterOtaSoftwareUpdateRequestorServer,
    ClusterLocalizationConfigurationServer,
    ClusterTimeFormatLocalizationServer,
    ClusterUnitLocalizationServer,
    ClusterPowerSourceConfigurationServer,
    ClusterPowerSourceServer,
    ClusterGeneralCommissioningServer,
    ClusterNetworkCommissioningServer,
    ClusterDiagnosticLogsServer,
    ClusterGeneralDiagnosticsServer,
    ClusterSoftwareDiagnosticsServer,
    ClusterThreadNetworkDiagnosticsServer,
    ClusterWiFiNetworkDiagnosticsServer,
    ClusterEthernetNetworkDiagnosticsServer,
    ClusterSwitchServer,
    ClusterAdministratorCommissioningServer,
    ClusterOperationalCredentialsServer,
    ClusterGroupKeyManagementServer,
    ClusterFixedLabelServer,
    ClusterUserLabelServer,
    ClusterBooleanStateServer,
    ClusterModeSelectServer,
    ClusterDoorLockServer,
    ClusterWindowCoveringServer,
    ClusterBarrierControlServer,
    ClusterPumpConfigurationAndControlServer,
    ClusterThermostatServer,
    ClusterFanControlServer,
    ClusterThermostatUserInterfaceConfigurationServer,
    ClusterColorControlServer,
    ClusterIlluminanceMeasurementServer,
    ClusterTemperatureMeasurementServer,
    ClusterPressureMeasurementServer,
    ClusterFlowMeasurementServer,
    ClusterRelativeHumidityMeasurementServer,
    ClusterOccupancySensingServer,
    ClusterWakeOnLanServer,
    ClusterChannelServer,
    ClusterTargetNavigatorServer,
    ClusterMediaPlaybackServer,
    ClusterMediaInputServer,
    ClusterLowPowerServer,
    ClusterKeypadInputServer,
    ClusterContentLauncherServer,
    ClusterAudioOutputServer,
    ClusterApplicationLauncherServer,
    ClusterApplicationBasicServer,
    ClusterAccountLoginServer,
    ClusterElectricalMeasurementServer,
    ClusterUnitTestingServer,
    ClusterFaultInjectionServer,
}
